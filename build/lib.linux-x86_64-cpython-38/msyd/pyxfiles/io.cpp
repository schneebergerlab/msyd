/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "msyd.io",
        "sources": [
            "msyd/pyxfiles/io.pyx"
        ]
    },
    "module_name": "msyd.io"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__msyd__io
#define __PYX_HAVE_API__msyd__io
/* Early includes */
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "msyd/pyxfiles/io.pyx",
  "__init__.cython-30.pxd",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":731
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":732
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":733
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":738
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":739
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":740
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":745
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":746
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":755
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":756
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":757
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":759
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":760
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":761
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":763
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":764
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":766
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":767
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":768
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records;
struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":770
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":771
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":772
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":774
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_4msyd_2io_filter_vcfs;
struct __pyx_opt_args_4msyd_2io_extract_syntenic_from_vcf;
struct __pyx_opt_args_4msyd_2io_reduce_vcfs;
struct __pyx_opt_args_4msyd_2io_add_syn_anns_to_vcf;
struct __pyx_opt_args_4msyd_2io_add_syn_ann;
struct __pyx_opt_args_4msyd_2io_merge_vcfs;
struct __pyx_opt_args_4msyd_2io_copy_record;
struct __pyx_opt_args_4msyd_2io_merge_vcf_records;
struct __pyx_opt_args_4msyd_2io_extract_syri_regions_from_file;
struct __pyx_opt_args_4msyd_2io_extract_syri_regions;
struct __pyx_opt_args_4msyd_2io_save_to_vcf;
struct __pyx_opt_args_4msyd_2io_save_to_pff;

/* "msyd/pyxfiles/io.pyx":398
 * ##FORMAT=<ID=HAP,Number=1,Type=Character,Description="Unique haplotype identifier">"""
 * 
 * cpdef filter_vcfs(syns, vcfs: List[Union[str, os.PathLike]], ref: Union[str, os.PathLike], add_syn_anns=False, no_complex=False):             # <<<<<<<<<<<<<<
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]
 * 
 */
struct __pyx_opt_args_4msyd_2io_filter_vcfs {
  int __pyx_n;
  PyObject *add_syn_anns;
  PyObject *no_complex;
};

/* "msyd/pyxfiles/io.pyx":408
 *     return tmpfiles
 * 
 * cpdef void extract_syntenic_from_vcf(syns, inpath:Union[str, os.PathLike], outpath: Union[str, os.PathLike], force_index=True, synorg='ref', ref=None, keep_nonsyn_calls=False, add_syn_anns=True, add_cigar=False, add_identity=True, no_complex=False, coords_in_info=False):             # <<<<<<<<<<<<<<
 *     """
 *     Extract syntenic annotations from a given VCF.
 */
struct __pyx_opt_args_4msyd_2io_extract_syntenic_from_vcf {
  int __pyx_n;
  PyObject *force_index;
  PyObject *synorg;
  PyObject *ref;
  PyObject *keep_nonsyn_calls;
  PyObject *add_syn_anns;
  PyObject *add_cigar;
  PyObject *add_identity;
  PyObject *no_complex;
  PyObject *coords_in_info;
};

/* "msyd/pyxfiles/io.pyx":521
 *     #vcfin.close()
 * 
 * cpdef void reduce_vcfs(vcfs: List[Union[str, os.PathLike]], opath: Union[str, os.PathLike], add_syn_anns=True):             # <<<<<<<<<<<<<<
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 */
struct __pyx_opt_args_4msyd_2io_reduce_vcfs {
  int __pyx_n;
  PyObject *add_syn_anns;
};

/* "msyd/pyxfiles/io.pyx":541
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)
 * 
 * cpdef add_syn_anns_to_vcf(syns, vcfin: Union[str, os.PathLike], vcfout: Union[str, os.PathLike], ref=None):             # <<<<<<<<<<<<<<
 *     """Takes a VCF file, overwrites it adding annotations for core/cross-syn region. Other records are preserved as-is."""
 *     cdef:
 */
struct __pyx_opt_args_4msyd_2io_add_syn_anns_to_vcf {
  int __pyx_n;
  PyObject *ref;
};

/* "msyd/pyxfiles/io.pyx":590
 * 
 * 
 * cdef add_syn_ann(syn, ovcf, ref=None, no=None, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     rng = syn.ref
 *     rec = ovcf.new_record()
 */
struct __pyx_opt_args_4msyd_2io_add_syn_ann {
  int __pyx_n;
  PyObject *ref;
  PyObject *no;
  PyObject *add_cigar;
  PyObject *add_identity;
};

/* "msyd/pyxfiles/io.pyx":639
 * 
 * 
 * cdef str merge_vcfs(lf: Union[str, os.PathLike], rf:Union[str, os.PathLike], of:Union[str, os.PathLike], condense_errors=True):             # <<<<<<<<<<<<<<
 *     logger.info(f"Merging {lf} and {rf} into {of}")
 *     # TODO reimplement this with common framework with merge pffs
 */
struct __pyx_opt_args_4msyd_2io_merge_vcfs {
  int __pyx_n;
  PyObject *condense_errors;
};

/* "msyd/pyxfiles/io.pyx":782
 *     return of # to enable reduction operation
 * 
 * cdef copy_record(rec: VariantRecord, ovcf:VariantFile, int pid=0):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to copy a record to another VCF, because pysam needs some conversions done.
 */
struct __pyx_opt_args_4msyd_2io_copy_record {
  int __pyx_n;
  int pid;
};

/* "msyd/pyxfiles/io.pyx":802
 *     ovcf.write(new_rec)
 * 
 * cdef merge_vcf_records(lrec: VariantRecord, rrec:VariantRecord, ovcf:VariantFile, condense_errors=True):             # <<<<<<<<<<<<<<
 *     """
 *     Merge two vcf records from different files, append to ovcf.
 */
struct __pyx_opt_args_4msyd_2io_merge_vcf_records {
  int __pyx_n;
  PyObject *condense_errors;
};

/* "msyd/pyxfiles/io.pyx":894
 *     ovcf.write(rec)
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)
 */
struct __pyx_opt_args_4msyd_2io_extract_syri_regions_from_file {
  int __pyx_n;
  PyObject *ref;
  PyObject *anns;
  PyObject *reforg;
  PyObject *qryorg;
};

/* "msyd/pyxfiles/io.pyx":899
 * 
 * 
 * cpdef extract_syri_regions(rawsyriout, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     """
 *     Given a syri output file, extract all regions matching a given annotation.
 */
struct __pyx_opt_args_4msyd_2io_extract_syri_regions {
  int __pyx_n;
  PyObject *ref;
  PyObject *anns;
  PyObject *reforg;
  PyObject *qryorg;
};

/* "msyd/pyxfiles/io.pyx":948
 *     #        for fin in fins]
 * 
 * cpdef void save_to_vcf(syns: Union[str, os.PathLike], outf: Union[str, os.PathLike], ref=None, cores=1, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     #TODO add functionality to incorporate reference information as optional argument
 *     cdef:
 */
struct __pyx_opt_args_4msyd_2io_save_to_vcf {
  int __pyx_n;
  PyObject *ref;
  PyObject *cores;
  PyObject *add_cigar;
  PyObject *add_identity;
};

/* "msyd/pyxfiles/io.pyx":1048
 *     out.close()
 * 
 * cpdef save_to_pff(df, buf, save_cigars=True, collapse_mesyn=True):             # <<<<<<<<<<<<<<
 *     """Takes a df containing `Pansyn` objects and writes them in pansynteny file format to `buf`.
 *     Can be used to print directly to a file, or to print or further process the output.
 */
struct __pyx_opt_args_4msyd_2io_save_to_pff {
  int __pyx_n;
  PyObject *save_cigars;
  PyObject *collapse_mesyn;
};

/* "msyd/pyxfiles/io.pyx":802
 *     ovcf.write(new_rec)
 * 
 * cdef merge_vcf_records(lrec: VariantRecord, rrec:VariantRecord, ovcf:VariantFile, condense_errors=True):             # <<<<<<<<<<<<<<
 *     """
 *     Merge two vcf records from different files, append to ovcf.
 */
struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records {
  PyObject_HEAD
  PyObject *__pyx_v_alleles;
  PyObject *__pyx_v_gtmap;
};


/* "msyd/pyxfiles/io.pyx":928
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     `extract_syri_regions`, but for processing a list of inputs
 */
struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files {
  PyObject_HEAD
  PyObject *__pyx_v_kwargs;
};

/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(__Pyx_PyLong_IsNonNeg(x)) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseClosureNameError.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* MergeKeywords.proto */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "msyd.io" */
static PyObject *__pyx_f_4msyd_2io_readsyriout(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4msyd_2io_extract_syri_snvs(PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_4msyd_2io_filter_vcfs(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_filter_vcfs *__pyx_optional_args); /*proto*/
static void __pyx_f_4msyd_2io_extract_syntenic_from_vcf(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_extract_syntenic_from_vcf *__pyx_optional_args); /*proto*/
static void __pyx_f_4msyd_2io_reduce_vcfs(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_reduce_vcfs *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_add_syn_anns_to_vcf(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_add_syn_anns_to_vcf *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_add_syn_ann(PyObject *, PyObject *, struct __pyx_opt_args_4msyd_2io_add_syn_ann *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_merge_vcfs(PyObject *, PyObject *, PyObject *, struct __pyx_opt_args_4msyd_2io_merge_vcfs *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_copy_record(PyObject *, PyObject *, struct __pyx_opt_args_4msyd_2io_copy_record *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_merge_vcf_records(PyObject *, PyObject *, PyObject *, struct __pyx_opt_args_4msyd_2io_merge_vcf_records *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_extract_syri_regions_from_file(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_extract_syri_regions_from_file *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_extract_syri_regions(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_extract_syri_regions *__pyx_optional_args); /*proto*/
static void __pyx_f_4msyd_2io_save_to_vcf(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_save_to_vcf *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_save_to_pff(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_save_to_pff *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_4msyd_2io_write_pansyns(PyObject *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_4msyd_2io_read_pff(PyObject *, int __pyx_skip_dispatch); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "msyd.io"
extern int __pyx_module_is_main_msyd__io;
int __pyx_module_is_main_msyd__io = 0;

/* Implementation of "msyd.io" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_format;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_any;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
/* #### Code section: string_decls ### */
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_2f[] = ".2f";
static const char __pyx_k_AI[] = "AI";
static const char __pyx_k_CG[] = "CG";
static const char __pyx_k_GT[] = "GT";
static const char __pyx_k_LN[] = "LN";
static const char __pyx_k_SN[] = "SN";
static const char __pyx_k_SQ[] = "@SQ";
static const char __pyx_k__3[] = ";";
static const char __pyx_k__4[] = ",";
static const char __pyx_k__6[] = "";
static const char __pyx_k__8[] = ">";
static const char __pyx_k__9[] = " ";
static const char __pyx_k_al[] = "al";
static const char __pyx_k_bf[] = "bf";
static const char __pyx_k_cg[] = "cg";
static const char __pyx_k_df[] = "df";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_gz[] = ".gz";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_in[] = " in ";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_qe[] = "qe";
static const char __pyx_k_qs[] = "qs";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_rc[] = "rc";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_rs[] = "rs";
static const char __pyx_k_rt[] = "rt";
static const char __pyx_k_CHR[] = "CHR";
static const char __pyx_k_CPG[] = "CPG";
static const char __pyx_k_CPL[] = "CPL";
static const char __pyx_k_DEL[] = "DEL";
static const char __pyx_k_DUP[] = "DUP";
static const char __pyx_k_D_2[] = ";D,";
static const char __pyx_k_END[] = "END";
static const char __pyx_k_HDR[] = "HDR";
static const char __pyx_k_H_2[] = ";H,";
static const char __pyx_k_INS[] = "INS";
static const char __pyx_k_INV[] = "INV";
static const char __pyx_k_I_2[] = ";I,";
static const char __pyx_k_PID[] = "PID";
static const char __pyx_k_SNP[] = "SNP";
static const char __pyx_k_SNV[] = "SNV";
static const char __pyx_k_SYN[] = "SYN";
static const char __pyx_k_S_2[] = ";S,";
static const char __pyx_k_TDM[] = "TDM";
static const char __pyx_k_X_2[] = ";X,";
static const char __pyx_k__12[] = ":";
static const char __pyx_k__13[] = "@";
static const char __pyx_k__14[] = "\t";
static const char __pyx_k__16[] = "*";
static const char __pyx_k__19[] = "=";
static const char __pyx_k__20[] = ";=,";
static const char __pyx_k__28[] = "+";
static const char __pyx_k__36[] = ", ";
static const char __pyx_k__37[] = "_";
static const char __pyx_k__38[] = ": ";
static const char __pyx_k__39[] = " != ";
static const char __pyx_k__42[] = "\n";
static const char __pyx_k__43[] = "-";
static const char __pyx_k__45[] = ".";
static const char __pyx_k__89[] = "?";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_aln[] = "aln";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_cgt[] = "cgt";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_fin[] = "fin";
static const char __pyx_k_for[] = " for ";
static const char __pyx_k_loc[] = "loc";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_org[] = "org";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_paf[] = "paf";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_qry[] = "qry";
static const char __pyx_k_rcs[] = "rcs";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_seq[] = "seq";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_vcf[] = "vcf";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_012b[] = "{:012b}";
static const char __pyx_k_ChrB[] = "ChrB";
static const char __pyx_k_EndB[] = "EndB";
static const char __pyx_k_Pool[] = "Pool";
static const char __pyx_k_VARS[] = "VARS";
static const char __pyx_k_achr[] = "achr";
static const char __pyx_k_adir[] = "adir";
static const char __pyx_k_aend[] = "aend";
static const char __pyx_k_alen[] = "alen";
static const char __pyx_k_anns[] = "anns";
static const char __pyx_k_bchr[] = "bchr";
static const char __pyx_k_bdir[] = "bdir";
static const char __pyx_k_bend[] = "bend";
static const char __pyx_k_blen[] = "blen";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_fins[] = "fins";
static const char __pyx_k_flag[] = "flag";
static const char __pyx_k_gzip[] = "gzip";
static const char __pyx_k_iden[] = "iden";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_into[] = " into ";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_msyd[] = "msyd";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_outf[] = "outf";
static const char __pyx_k_ovcf[] = "ovcf";
static const char __pyx_k_pool[] = "pool";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_seed[] = "seed";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_syns[] = "syns";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_vcfs[] = "vcfs";
static const char __pyx_k_DUPAL[] = "DUPAL";
static const char __pyx_k_INVAL[] = "INVAL";
static const char __pyx_k_INVDP[] = "INVDP";
static const char __pyx_k_INVTR[] = "INVTR";
static const char __pyx_k_NOTAL[] = "NOTAL";
static const char __pyx_k_Range[] = "Range";
static const char __pyx_k_START[] = "START";
static const char __pyx_k_SYNAL[] = "SYNAL";
static const char __pyx_k_SYN_2[] = "<SYN>";
static const char __pyx_k_TRANS[] = "TRANS";
static const char __pyx_k_cgtpl[] = "cgtpl";
static const char __pyx_k_chrid[] = "chrid";
static const char __pyx_k_chrom[] = "chrom";
static const char __pyx_k_cigar[] = "cigar";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cores[] = "cores";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_fetch[] = "fetch";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_flush[] = "flush";
static const char __pyx_k_force[] = "force";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_opath[] = "opath";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_pysam[] = "pysam";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_vcfin[] = "vcfin";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_HEADER[] = "HEADER";
static const char __pyx_k_N_ACGT[] = "N|[ACGT]*";
static const char __pyx_k_Pansyn[] = "Pansyn";
static const char __pyx_k_StartB[] = "StartB";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_astart[] = "astart";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_bstart[] = "bstart";
static const char __pyx_k_cgdict[] = "cgdict";
static const char __pyx_k_chrseq[] = "chrseq";
static const char __pyx_k_concat[] = "concat";
static const char __pyx_k_coords[] = "coords";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_exit_2[] = "exit";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_gzopen[] = "gzopen";
static const char __pyx_k_header[] = "header";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_inpath[] = "inpath";
static const char __pyx_k_is_inv[] = "is_inv";
static const char __pyx_k_isgzip[] = "isgzip";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_oldref[] = "oldref";
static const char __pyx_k_orient[] = "orient";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_preset[] = "preset";
static const char __pyx_k_qryorg[] = "qryorg";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reforg[] = "reforg";
static const char __pyx_k_synorg[] = "synorg";
static const char __pyx_k_to_pff[] = "to_pff";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_vcfout[] = "vcfout";
static const char __pyx_k_CORESYN[] = "<CORESYN>";
static const char __pyx_k_INVDPAL[] = "INVDPAL";
static const char __pyx_k_INVTRAL[] = "INVTRAL";
static const char __pyx_k_MERISYN[] = "MERISYN";
static const char __pyx_k_Merging[] = "Merging ";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_TRANSAL[] = "TRANSAL";
static const char __pyx_k_alleles[] = "alleles";
static const char __pyx_k_collect[] = "collect";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_contigs[] = "contigs";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_findata[] = "findata";
static const char __pyx_k_inplace[] = "inplace";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_msyd_io[] = "msyd.io";
static const char __pyx_k_outpath[] = "outpath";
static const char __pyx_k_partial[] = "partial";
static const char __pyx_k_qryname[] = "qryname";
static const char __pyx_k_readPAF[] = "readPAF";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_samples[] = "samples";
static const char __pyx_k_vartype[] = "vartype";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_CROSSSYN[] = "<CROSSSYN>";
static const char __pyx_k_Choosing[] = "! Choosing ";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Position[] = "Position";
static const char __pyx_k_add_line[] = "add_line";
static const char __pyx_k_from_VCF[] = " from VCF";
static const char __pyx_k_get_orgs[] = "get_orgs";
static const char __pyx_k_issubset[] = "issubset";
static const char __pyx_k_iterrows[] = "iterrows";
static const char __pyx_k_qry_prim[] = "qry_prim";
static const char __pyx_k_qrynames[] = "qrynames";
static const char __pyx_k_read_pff[] = "read_pff";
static const char __pyx_k_readline[] = "readline";
static const char __pyx_k_ref_prim[] = "ref_prim";
static const char __pyx_k_syri_vcf[] = ".*syri\\.vcf$";
static const char __pyx_k_CORESYN_2[] = "CORESYN{}";
static const char __pyx_k_CORESYN_3[] = "CORESYN";
static const char __pyx_k_Combining[] = "! Combining.";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_Filtering[] = "Filtering ";
static const char __pyx_k_add_cigar[] = "add_cigar";
static const char __pyx_k_ascending[] = "ascending";
static const char __pyx_k_contig_ID[] = "##contig=<ID={}>";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_dict[] = "from_dict";
static const char __pyx_k_fullmatch[] = "fullmatch";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_getlogger[] = "getlogger";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_msyd_util[] = "msyd.util";
static const char __pyx_k_msyd_vars[] = "msyd.vars";
static const char __pyx_k_readfasta[] = "readfasta";
static const char __pyx_k_to_header[] = " to header";
static const char __pyx_k_to_string[] = "to_string";
static const char __pyx_k_CROSSSYN_2[] = "CROSSSYN{}";
static const char __pyx_k_SAM_reader[] = "SAM reader";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_add_sample[] = "add_sample";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_get_degree[] = "get_degree";
static const char __pyx_k_gettmpfile[] = "gettmpfile";
static const char __pyx_k_msyd_cigar[] = "msyd.cigar";
static const char __pyx_k_new_record[] = "new_record";
static const char __pyx_k_no_complex[] = "no_complex";
static const char __pyx_k_query_name[] = "query_name";
static const char __pyx_k_rawsyriout[] = "rawsyriout";
static const char __pyx_k_readSAMBAM[] = "readSAMBAM";
static const char __pyx_k_splitlines[] = "splitlines";
static const char __pyx_k_BadGzipFile[] = "BadGzipFile";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_VariantFile[] = "VariantFile";
static const char __pyx_k_binary_repr[] = "binary_repr";
static const char __pyx_k_cigars_dict[] = "cigars_dict";
static const char __pyx_k_cigarstring[] = "cigarstring";
static const char __pyx_k_cigartuples[] = "cigartuples";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_filter_vcfs[] = "filter_vcfs";
static const char __pyx_k_force_index[] = "force_index";
static const char __pyx_k_is_repeated[] = " is repeated.";
static const char __pyx_k_msyd_coords[] = "msyd.coords";
static const char __pyx_k_ranges_dict[] = "ranges_dict";
static const char __pyx_k_readsyriout[] = "readsyriout";
static const char __pyx_k_reduce_vcfs[] = "reduce_vcfs";
static const char __pyx_k_samtocoords[] = "samtocoords";
static const char __pyx_k_save_cigars[] = "save_cigars";
static const char __pyx_k_save_to_pff[] = "save_to_pff";
static const char __pyx_k_save_to_vcf[] = "save_to_vcf";
static const char __pyx_k_scipy_stats[] = "scipy.stats";
static const char __pyx_k_sort_values[] = "sort_values";
static const char __pyx_k_tabix_index[] = "tabix_index";
static const char __pyx_k_add_identity[] = "add_identity";
static const char __pyx_k_add_syn_anns[] = "add_syn_anns";
static const char __pyx_k_get_identity[] = "get_identity";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_AlignmentFile[] = "AlignmentFile";
static const char __pyx_k_Found_samples[] = "Found samples: ";
static const char __pyx_k_IDs_were_used[] = " IDs were used";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_keep_original[] = "keep_original";
static const char __pyx_k_reference_end[] = "reference_end";
static const char __pyx_k_collapse_mesyn[] = "collapse_mesyn";
static const char __pyx_k_coords_in_info[] = "coords_in_info";
static const char __pyx_k_encountered_in[] = "' encountered in ";
static const char __pyx_k_index_filename[] = "index_filename";
static const char __pyx_k_query_sequence[] = "query_sequence";
static const char __pyx_k_reference_name[] = "reference_name";
static const char __pyx_k_subset_samples[] = "subset_samples";
static const char __pyx_k_CustomFormatter[] = "CustomFormatter";
static const char __pyx_k_Wrong_parameter[] = "Wrong parameter";
static const char __pyx_k_multiprocessing[] = "multiprocessing";
static const char __pyx_k_reference_start[] = "reference_start";
static const char __pyx_k_Duplicate_sample[] = "Duplicate sample '";
static const char __pyx_k_Invalid_GT_found[] = "Invalid GT found: ";
static const char __pyx_k_Reading_PAF_file[] = "Reading PAF file";
static const char __pyx_k_contig_ID_length[] = "##contig=<ID={},length={}>";
static const char __pyx_k_get_orgs_from_df[] = "get_orgs_from_df";
static const char __pyx_k_CHR_START_END_ANN[] = "#CHR\tSTART\tEND\tANN\t";
static const char __pyx_k_FileNotFoundError[] = "FileNotFoundError";
static const char __pyx_k_cigar_from_string[] = "cigar_from_string";
static const char __pyx_k_extract_syri_snvs[] = "extract_syri_snvs";
static const char __pyx_k_keep_nonsyn_calls[] = "keep_nonsyn_calls";
static const char __pyx_k_merge_vcfs_Adding[] = "merge_vcfs Adding ";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_copy_record_Adding[] = "copy_record Adding ";
static const char __pyx_k_id_not_matching_in[] = "id not matching in ";
static const char __pyx_k_add_syn_anns_to_vcf[] = "add_syn_anns_to_vcf";
static const char __pyx_k_Reading_BAM_SAM_file[] = "Reading BAM/SAM file";
static const char __pyx_k_extract_syri_regions[] = "extract_syri_regions";
static const char __pyx_k_msyd_pyxfiles_io_pyx[] = "msyd/pyxfiles/io.pyx";
static const char __pyx_k_Union_str_os_PathLike[] = "Union[str, os.PathLike]";
static const char __pyx_k_query_alignment_length[] = "query_alignment_length";
static const char __pyx_k_Headers_not_matching_in[] = "Headers not matching in ";
static const char __pyx_k_values_were_overwritten[] = " values were overwritten!";
static const char __pyx_k_Cannot_open_file_Exiting[] = "Cannot open {} file. Exiting";
static const char __pyx_k_merge_vcf_records_Adding[] = "merge_vcf_records Adding ";
static const char __pyx_k_Error_in_reading_SAM_file[] = "Error in reading SAM file: ";
static const char __pyx_k_extract_syntenic_from_vcf[] = "extract_syntenic_from_vcf";
static const char __pyx_k_List_Union_str_os_PathLike[] = "List[Union[str, os.PathLike]]";
static const char __pyx_k_Reading_in_Reference_Fasta[] = "Reading in Reference Fasta";
static const char __pyx_k_Conflicting_info_stored_for[] = "Conflicting info stored for ";
static const char __pyx_k_Error_in_reading_input_file[] = "Error in reading input file.";
static const char __pyx_k_Error_in_reading_PAF_Exiting[] = "Error in reading PAF: {}. Exiting";
static const char __pyx_k_Error_in_opening_BAM_SAM_file[] = "Error in opening BAM/SAM file. ";
static const char __pyx_k_Error_in_reading_BAM_SAM_file[] = "Error in reading BAM/SAM file. ";
static const char __pyx_k_extract_syri_regions_from_file[] = "extract_syri_regions_from_file";
static const char __pyx_k_to_VCF_Check_if_the_chromosome[] = " to VCF. Check if the chromosome names match!";
static const char __pyx_k_Appending_filename_to_sample_na[] = ". Appending filename to sample name.";
static const char __pyx_k_Duplicate_chromosome_IDs_are_no[] = " Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs";
static const char __pyx_k_INFO_ID_END_Number_1_Type_Integ[] = "##INFO=<ID=END,Number=1,Type=Integer,Description=\"End position on reference genome\">\n##ALT<ID=CORESYN,Description=\"Core syntenic region (syntenic between any two samples)\">\n##ALT<ID=CROSSSYN,Description=\"Cross syntenic region (syntenic between any two samples for a strict subset of the samples)>\n##INFO=<ID=PID,Number=1,Type=Integer,Description=\"Numerical part of the ID of the parent PANSYN region. If the PID of a region is 10, it's parent's ID will be CROSSSYN10 or CORESYN10 (and there will be only one of either).\">\n##FORMAT=<ID=CHR,Number=1,Type=String,Description=\"Chromosome in this sample\">\n##FORMAT=<ID=START,Number=1,Type=Integer,Description=\"Start position in this sample\">\n##FORMAT=<ID=END,Number=1,Type=Integer,Description=\"End position  in this sample\">\n##FORMAT=<ID=CG,Number=1,Type=String,Description=\"CIGAR String containing the alignment to the reference\">\n##FORMAT=<ID=AI,Number=1,Type=Integer,Description=\"Alignment Identity of the alignment of this region to the reference\">\n##FORMAT=<ID=SYN,Number=1,Type=Integer,Description=\"1 if this region is syntenic to reference, else 0\">";
static const char __pyx_k_Merging_VCFs_with_no_samples_is[] = "Merging VCFs with no samples is not supported, exiting!";
static const char __pyx_k_This_could_mean_that_the_entire[] = ". This could mean that the entire chromosome ";
static const char __pyx_k_Unexpected_error_in_opening_BAM[] = "Unexpected error in opening BAM/SAM file. ";
static const char __pyx_k_do_not_align_with_any_query_seq[] = " do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.";
static const char __pyx_k_do_not_align_with_any_reference[] = " do not align with any reference sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.";
static const char __pyx_k_is_not_a_valid_annotation_for_a[] = "{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.";
static const char __pyx_k_merge_vcf_records_locals_lambda[] = "merge_vcf_records.<locals>.<lambda>";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_CIGAR_string_is_not_present_in_P[] = "CIGAR string is not present in PAF at line {}. Exiting.";
static const char __pyx_k_ERROR_CIGAR_string_starting_with[] = "ERROR: CIGAR string starting with non-matching base";
static const char __pyx_k_Empty_VCF_encountered_Outputting[] = "Empty VCF encountered. Outputting empty VCF!";
static const char __pyx_k_Error_adding_pansyn_annotation_f[] = "Error adding pansyn annotation for region ";
static const char __pyx_k_Incomplete_input_file_syri_out_f[] = "Incomplete input file {}, syri.out file should have 11 columns.";
static const char __pyx_k_Incorrect_CIGAR_string_found_CIG[] = "Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ";
static const char __pyx_k_Incorrect_CIGAR_string_found_Cli[] = "Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: ";
static const char __pyx_k_Infiles_and_qrynames_lists_lengt[] = "Infiles and qrynames lists lengths not matching. Offending lists: ";
static const char __pyx_k_Input_VCF_contains_organisms_not[] = "Input VCF contains organisms not in PFF file! Double-Check names used in .tsv. Removing samples ";
static const char __pyx_k_No_Reference_specified_not_savin[] = "No Reference specified, not saving Ref Sequence in VCF!";
static const char __pyx_k_No_primary_alignment_found_for_q[] = "No primary alignment found for query sequence ";
static const char __pyx_k_No_primary_alignment_found_for_r[] = "No primary alignment found for reference sequence ";
static const char __pyx_k_Non_numerical_values_used_as_gen[] = "Non-numerical values used as genome coordinates in {}. Exiting";
static const char __pyx_k_There_was_conflicting_informatio[] = "There was conflicting information stored in INFO! ";
static const char __pyx_k_There_were_VCF_records_at_the_sa[] = "There were VCF records at the same position with different IDs! ";
static const char __pyx_k_Trying_to_join_records_with_diff[] = "Trying to join records with different references!";
static const char __pyx_k_extract_syri_regions_to_list_fro[] = "extract_syri_regions_to_list_from_files.<locals>.<lambda>";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_reading_coords_from_INFO_only_su[] = "reading coords from INFO only supported for VCFs with exactly one sample! Check if your SyRI installation is up to date!";
static const char __pyx_k_reduce_vcfs_called_with_empty_vc[] = "reduce_vcfs called with empty vcfs!";
static const char __pyx_k_reduce_vcfs_called_with_only_one[] = "reduce_vcfs called with only one vcf: ";
static const char __pyx_k_do_not_align_with_any_reference_2[] = " do not align with any reference chromosome and cannot be analysed";
static const char __pyx_k_extract_syri_regions_to_list_fro_2[] = "extract_syri_regions_to_list_from_files";
static const char __pyx_k_reading_coords_from_INFO_only_su_2[] = "reading coords from INFO only supported for VCFs with exactly one sample!";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_4msyd_2io_cgtpl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cg); /* proto */
static PyObject *__pyx_pf_4msyd_2io_2readfasta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f); /* proto */
static PyObject *__pyx_pf_4msyd_2io_4samtocoords(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f); /* proto */
static PyObject *__pyx_pf_4msyd_2io_6readSAMBAM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fin, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_4msyd_2io_8readPAF(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_paf); /* proto */
static PyObject *__pyx_pf_4msyd_2io_10readsyriout(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f); /* proto */
static PyObject *__pyx_pf_4msyd_2io_12extract_syri_snvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fin); /* proto */
static PyObject *__pyx_pf_4msyd_2io_14filter_vcfs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_vcfs, PyObject *__pyx_v_ref, PyObject *__pyx_v_add_syn_anns, PyObject *__pyx_v_no_complex); /* proto */
static PyObject *__pyx_pf_4msyd_2io_16extract_syntenic_from_vcf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_inpath, PyObject *__pyx_v_outpath, PyObject *__pyx_v_force_index, PyObject *__pyx_v_synorg, PyObject *__pyx_v_ref, PyObject *__pyx_v_keep_nonsyn_calls, PyObject *__pyx_v_add_syn_anns, PyObject *__pyx_v_add_cigar, PyObject *__pyx_v_add_identity, PyObject *__pyx_v_no_complex, PyObject *__pyx_v_coords_in_info); /* proto */
static PyObject *__pyx_pf_4msyd_2io_18reduce_vcfs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcfs, PyObject *__pyx_v_opath, PyObject *__pyx_v_add_syn_anns); /* proto */
static PyObject *__pyx_pf_4msyd_2io_20add_syn_anns_to_vcf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_vcfin, PyObject *__pyx_v_vcfout, PyObject *__pyx_v_ref); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_4msyd_2io_22extract_syri_regions_from_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fin, PyObject *__pyx_v_ref, PyObject *__pyx_v_anns, PyObject *__pyx_v_reforg, PyObject *__pyx_v_qryorg); /* proto */
static PyObject *__pyx_pf_4msyd_2io_24extract_syri_regions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rawsyriout, PyObject *__pyx_v_ref, PyObject *__pyx_v_anns, PyObject *__pyx_v_reforg, PyObject *__pyx_v_qryorg); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_qryname); /* proto */
static PyObject *__pyx_pf_4msyd_2io_26extract_syri_regions_to_list_from_files(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fins, PyObject *__pyx_v_qrynames, PyObject *__pyx_v_cores, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_4msyd_2io_28save_to_vcf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_outf, PyObject *__pyx_v_ref, PyObject *__pyx_v_cores, PyObject *__pyx_v_add_cigar, PyObject *__pyx_v_add_identity); /* proto */
static PyObject *__pyx_pf_4msyd_2io_30save_to_pff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_df, PyObject *__pyx_v_buf, PyObject *__pyx_v_save_cigars, PyObject *__pyx_v_collapse_mesyn); /* proto */
static PyObject *__pyx_pf_4msyd_2io_32read_pff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f); /* proto */
static PyObject *__pyx_tp_new_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records;
  PyObject *__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files;
  #endif
  PyTypeObject *__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records;
  PyTypeObject *__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files;
  PyObject *__pyx_kp_u_0;
  PyObject *__pyx_kp_u_012b;
  PyObject *__pyx_kp_u_1;
  PyObject *__pyx_kp_u_2f;
  PyObject *__pyx_n_u_AI;
  PyObject *__pyx_n_s_AlignmentFile;
  PyObject *__pyx_kp_u_Appending_filename_to_sample_na;
  PyObject *__pyx_n_u_B;
  PyObject *__pyx_n_s_BadGzipFile;
  PyObject *__pyx_n_u_CG;
  PyObject *__pyx_n_u_CHR;
  PyObject *__pyx_kp_u_CHR_START_END_ANN;
  PyObject *__pyx_kp_u_CIGAR_string_is_not_present_in_P;
  PyObject *__pyx_kp_u_CORESYN;
  PyObject *__pyx_kp_u_CORESYN_2;
  PyObject *__pyx_n_u_CORESYN_3;
  PyObject *__pyx_n_u_CPG;
  PyObject *__pyx_n_u_CPL;
  PyObject *__pyx_kp_u_CROSSSYN;
  PyObject *__pyx_kp_u_CROSSSYN_2;
  PyObject *__pyx_kp_u_Cannot_open_file_Exiting;
  PyObject *__pyx_kp_u_Choosing;
  PyObject *__pyx_n_u_ChrB;
  PyObject *__pyx_kp_u_Combining;
  PyObject *__pyx_kp_u_Conflicting_info_stored_for;
  PyObject *__pyx_n_s_CustomFormatter;
  PyObject *__pyx_n_u_D;
  PyObject *__pyx_n_u_DEL;
  PyObject *__pyx_n_u_DUP;
  PyObject *__pyx_n_u_DUPAL;
  PyObject *__pyx_kp_u_D_2;
  PyObject *__pyx_n_s_DataFrame;
  PyObject *__pyx_kp_u_Duplicate_chromosome_IDs_are_no;
  PyObject *__pyx_kp_u_Duplicate_sample;
  PyObject *__pyx_n_u_END;
  PyObject *__pyx_kp_u_ERROR_CIGAR_string_starting_with;
  PyObject *__pyx_kp_u_Empty_VCF_encountered_Outputting;
  PyObject *__pyx_n_u_EndB;
  PyObject *__pyx_kp_u_Error_adding_pansyn_annotation_f;
  PyObject *__pyx_kp_u_Error_in_opening_BAM_SAM_file;
  PyObject *__pyx_kp_u_Error_in_reading_BAM_SAM_file;
  PyObject *__pyx_kp_u_Error_in_reading_PAF_Exiting;
  PyObject *__pyx_kp_u_Error_in_reading_SAM_file;
  PyObject *__pyx_kp_u_Error_in_reading_input_file;
  PyObject *__pyx_n_s_FileNotFoundError;
  PyObject *__pyx_kp_u_Filtering;
  PyObject *__pyx_kp_u_Found_samples;
  PyObject *__pyx_n_u_GT;
  PyObject *__pyx_n_u_H;
  PyObject *__pyx_n_u_HDR;
  PyObject *__pyx_n_s_HEADER;
  PyObject *__pyx_kp_u_H_2;
  PyObject *__pyx_kp_u_Headers_not_matching_in;
  PyObject *__pyx_n_u_I;
  PyObject *__pyx_kp_u_IDs_were_used;
  PyObject *__pyx_kp_u_INFO_ID_END_Number_1_Type_Integ;
  PyObject *__pyx_n_u_INS;
  PyObject *__pyx_n_u_INV;
  PyObject *__pyx_n_u_INVAL;
  PyObject *__pyx_n_u_INVDP;
  PyObject *__pyx_n_u_INVDPAL;
  PyObject *__pyx_n_u_INVTR;
  PyObject *__pyx_n_u_INVTRAL;
  PyObject *__pyx_kp_u_I_2;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_u_Incomplete_input_file_syri_out_f;
  PyObject *__pyx_kp_u_Incorrect_CIGAR_string_found_CIG;
  PyObject *__pyx_kp_u_Incorrect_CIGAR_string_found_Cli;
  PyObject *__pyx_kp_u_Infiles_and_qrynames_lists_lengt;
  PyObject *__pyx_kp_u_Input_VCF_contains_organisms_not;
  PyObject *__pyx_kp_u_Invalid_GT_found;
  PyObject *__pyx_n_s_KeyError;
  PyObject *__pyx_n_u_LN;
  PyObject *__pyx_kp_s_List_Union_str_os_PathLike;
  PyObject *__pyx_n_u_M;
  PyObject *__pyx_n_u_MERISYN;
  PyObject *__pyx_kp_u_Merging;
  PyObject *__pyx_kp_u_Merging_VCFs_with_no_samples_is;
  PyObject *__pyx_n_u_N;
  PyObject *__pyx_n_u_NOTAL;
  PyObject *__pyx_kp_u_N_ACGT;
  PyObject *__pyx_kp_u_No_Reference_specified_not_savin;
  PyObject *__pyx_kp_u_No_primary_alignment_found_for_q;
  PyObject *__pyx_kp_u_No_primary_alignment_found_for_r;
  PyObject *__pyx_kp_u_Non_numerical_values_used_as_gen;
  PyObject *__pyx_n_s_OSError;
  PyObject *__pyx_n_s_OrderedDict;
  PyObject *__pyx_n_u_PID;
  PyObject *__pyx_n_s_Pansyn;
  PyObject *__pyx_n_s_Pool;
  PyObject *__pyx_n_s_Position;
  PyObject *__pyx_n_s_Range;
  PyObject *__pyx_kp_u_Reading_BAM_SAM_file;
  PyObject *__pyx_kp_u_Reading_PAF_file;
  PyObject *__pyx_kp_u_Reading_in_Reference_Fasta;
  PyObject *__pyx_n_u_S;
  PyObject *__pyx_kp_u_SAM_reader;
  PyObject *__pyx_n_u_SN;
  PyObject *__pyx_n_u_SNP;
  PyObject *__pyx_n_s_SNV;
  PyObject *__pyx_kp_u_SQ;
  PyObject *__pyx_n_u_START;
  PyObject *__pyx_n_u_SYN;
  PyObject *__pyx_n_u_SYNAL;
  PyObject *__pyx_kp_u_SYN_2;
  PyObject *__pyx_kp_u_S_2;
  PyObject *__pyx_n_u_StartB;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_n_u_TDM;
  PyObject *__pyx_n_u_TRANS;
  PyObject *__pyx_n_u_TRANSAL;
  PyObject *__pyx_kp_u_There_was_conflicting_informatio;
  PyObject *__pyx_kp_u_There_were_VCF_records_at_the_sa;
  PyObject *__pyx_kp_u_This_could_mean_that_the_entire;
  PyObject *__pyx_kp_u_Trying_to_join_records_with_diff;
  PyObject *__pyx_kp_u_Unexpected_error_in_opening_BAM;
  PyObject *__pyx_kp_s_Union_str_os_PathLike;
  PyObject *__pyx_n_s_VARS;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_VariantFile;
  PyObject *__pyx_kp_u_Wrong_parameter;
  PyObject *__pyx_n_u_X;
  PyObject *__pyx_kp_u_X_2;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_kp_u__13;
  PyObject *__pyx_kp_u__14;
  PyObject *__pyx_n_s__16;
  PyObject *__pyx_kp_u__16;
  PyObject *__pyx_kp_u__19;
  PyObject *__pyx_kp_u__20;
  PyObject *__pyx_kp_u__28;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_kp_u__36;
  PyObject *__pyx_n_u__37;
  PyObject *__pyx_kp_u__38;
  PyObject *__pyx_kp_u__39;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_kp_u__42;
  PyObject *__pyx_kp_u__43;
  PyObject *__pyx_kp_u__45;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_b__8;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_n_s__89;
  PyObject *__pyx_kp_b__9;
  PyObject *__pyx_kp_u__9;
  PyObject *__pyx_n_u_a;
  PyObject *__pyx_n_s_achr;
  PyObject *__pyx_n_u_achr;
  PyObject *__pyx_n_s_add;
  PyObject *__pyx_n_s_add_cigar;
  PyObject *__pyx_n_s_add_identity;
  PyObject *__pyx_n_s_add_line;
  PyObject *__pyx_n_s_add_sample;
  PyObject *__pyx_n_s_add_syn_anns;
  PyObject *__pyx_n_s_add_syn_anns_to_vcf;
  PyObject *__pyx_n_s_adir;
  PyObject *__pyx_n_u_adir;
  PyObject *__pyx_n_s_aend;
  PyObject *__pyx_n_u_aend;
  PyObject *__pyx_n_s_al;
  PyObject *__pyx_n_s_alen;
  PyObject *__pyx_n_u_alen;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_alleles;
  PyObject *__pyx_n_s_aln;
  PyObject *__pyx_kp_u_and;
  PyObject *__pyx_n_s_anns;
  PyObject *__pyx_n_s_any;
  PyObject *__pyx_n_s_append;
  PyObject *__pyx_n_s_ascending;
  PyObject *__pyx_n_s_astart;
  PyObject *__pyx_n_u_astart;
  PyObject *__pyx_n_s_astype;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_u_b;
  PyObject *__pyx_n_s_bchr;
  PyObject *__pyx_n_u_bchr;
  PyObject *__pyx_n_s_bdir;
  PyObject *__pyx_n_u_bdir;
  PyObject *__pyx_n_s_bend;
  PyObject *__pyx_n_u_bend;
  PyObject *__pyx_n_s_bf;
  PyObject *__pyx_n_s_binary_repr;
  PyObject *__pyx_n_s_blen;
  PyObject *__pyx_n_u_blen;
  PyObject *__pyx_n_s_bstart;
  PyObject *__pyx_n_u_bstart;
  PyObject *__pyx_n_s_buf;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_s_cg;
  PyObject *__pyx_n_u_cg;
  PyObject *__pyx_n_s_cgdict;
  PyObject *__pyx_n_s_cgt;
  PyObject *__pyx_n_s_cgtpl;
  PyObject *__pyx_n_s_chr;
  PyObject *__pyx_n_u_chr;
  PyObject *__pyx_n_s_chrid;
  PyObject *__pyx_n_s_chrom;
  PyObject *__pyx_n_s_chrseq;
  PyObject *__pyx_n_s_cigar;
  PyObject *__pyx_n_s_cigar_from_string;
  PyObject *__pyx_n_s_cigars_dict;
  PyObject *__pyx_n_s_cigarstring;
  PyObject *__pyx_n_s_cigartuples;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_collapse_mesyn;
  PyObject *__pyx_n_s_collect;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_n_s_columns;
  PyObject *__pyx_n_s_concat;
  PyObject *__pyx_kp_u_contig_ID;
  PyObject *__pyx_kp_u_contig_ID_length;
  PyObject *__pyx_n_s_contigs;
  PyObject *__pyx_n_s_coords;
  PyObject *__pyx_n_s_coords_in_info;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_kp_u_copy_record_Adding;
  PyObject *__pyx_n_s_cores;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_s_defaultdict;
  PyObject *__pyx_n_s_deque;
  PyObject *__pyx_n_s_df;
  PyObject *__pyx_n_s_difference;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_kp_u_do_not_align_with_any_query_seq;
  PyObject *__pyx_kp_u_do_not_align_with_any_reference;
  PyObject *__pyx_kp_u_do_not_align_with_any_reference_2;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_kp_u_encountered_in;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_u_end;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_exit_2;
  PyObject *__pyx_n_s_extract_syntenic_from_vcf;
  PyObject *__pyx_n_s_extract_syri_regions;
  PyObject *__pyx_n_s_extract_syri_regions_from_file;
  PyObject *__pyx_n_s_extract_syri_regions_to_list_fro;
  PyObject *__pyx_n_s_extract_syri_regions_to_list_fro_2;
  PyObject *__pyx_n_s_extract_syri_snvs;
  PyObject *__pyx_n_s_f;
  PyObject *__pyx_n_s_fetch;
  PyObject *__pyx_n_s_filter_vcfs;
  PyObject *__pyx_n_s_fin;
  PyObject *__pyx_n_s_findata;
  PyObject *__pyx_n_s_fins;
  PyObject *__pyx_n_s_flag;
  PyObject *__pyx_n_u_float;
  PyObject *__pyx_n_s_flush;
  PyObject *__pyx_kp_u_for;
  PyObject *__pyx_n_s_force;
  PyObject *__pyx_n_s_force_index;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_kp_u_from_VCF;
  PyObject *__pyx_n_s_from_dict;
  PyObject *__pyx_n_s_fullmatch;
  PyObject *__pyx_n_s_functools;
  PyObject *__pyx_n_s_gc;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getLogger;
  PyObject *__pyx_n_s_get_degree;
  PyObject *__pyx_n_s_get_identity;
  PyObject *__pyx_n_s_get_orgs;
  PyObject *__pyx_n_s_get_orgs_from_df;
  PyObject *__pyx_n_s_getlogger;
  PyObject *__pyx_n_s_gettmpfile;
  PyObject *__pyx_kp_u_gz;
  PyObject *__pyx_n_s_gzip;
  PyObject *__pyx_n_s_gzopen;
  PyObject *__pyx_n_s_h;
  PyObject *__pyx_n_s_header;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_kp_u_id_not_matching_in;
  PyObject *__pyx_n_s_iden;
  PyObject *__pyx_n_u_iden;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_kp_u_in;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_u_index;
  PyObject *__pyx_n_s_index_filename;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_inpath;
  PyObject *__pyx_n_s_inplace;
  PyObject *__pyx_kp_u_into;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_inv;
  PyObject *__pyx_kp_u_is_not_a_valid_annotation_for_a;
  PyObject *__pyx_kp_u_is_repeated;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isgzip;
  PyObject *__pyx_n_s_issubset;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_iterrows;
  PyObject *__pyx_n_s_j;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_keep_nonsyn_calls;
  PyObject *__pyx_n_s_keep_original;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_s_l;
  PyObject *__pyx_n_s_line;
  PyObject *__pyx_n_s_loc;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_logging;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_map;
  PyObject *__pyx_kp_u_merge_vcf_records_Adding;
  PyObject *__pyx_n_s_merge_vcf_records_locals_lambda;
  PyObject *__pyx_kp_u_merge_vcfs_Adding;
  PyObject *__pyx_n_s_msyd;
  PyObject *__pyx_n_s_msyd_cigar;
  PyObject *__pyx_n_s_msyd_coords;
  PyObject *__pyx_n_s_msyd_io;
  PyObject *__pyx_kp_s_msyd_pyxfiles_io_pyx;
  PyObject *__pyx_n_s_msyd_util;
  PyObject *__pyx_n_s_msyd_vars;
  PyObject *__pyx_n_s_multiprocessing;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_new_record;
  PyObject *__pyx_n_s_no_complex;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_oldref;
  PyObject *__pyx_n_s_opath;
  PyObject *__pyx_n_s_open;
  PyObject *__pyx_n_s_org;
  PyObject *__pyx_n_s_orient;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_out;
  PyObject *__pyx_n_s_outf;
  PyObject *__pyx_n_s_outpath;
  PyObject *__pyx_n_s_ovcf;
  PyObject *__pyx_n_s_paf;
  PyObject *__pyx_n_s_pandas;
  PyObject *__pyx_n_s_partial;
  PyObject *__pyx_n_s_pd;
  PyObject *__pyx_n_s_pool;
  PyObject *__pyx_n_s_pos;
  PyObject *__pyx_n_s_preset;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_pysam;
  PyObject *__pyx_n_s_qe;
  PyObject *__pyx_n_u_qry;
  PyObject *__pyx_n_s_qry_prim;
  PyObject *__pyx_n_s_qryname;
  PyObject *__pyx_n_s_qrynames;
  PyObject *__pyx_n_s_qryorg;
  PyObject *__pyx_n_s_qs;
  PyObject *__pyx_n_s_query_alignment_length;
  PyObject *__pyx_n_s_query_name;
  PyObject *__pyx_n_s_query_sequence;
  PyObject *__pyx_n_u_r;
  PyObject *__pyx_n_s_random;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ranges_dict;
  PyObject *__pyx_n_s_rawsyriout;
  PyObject *__pyx_n_u_rb;
  PyObject *__pyx_n_s_rc;
  PyObject *__pyx_n_s_rcs;
  PyObject *__pyx_n_s_re;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_readPAF;
  PyObject *__pyx_n_s_readSAMBAM;
  PyObject *__pyx_n_s_read_pff;
  PyObject *__pyx_n_s_readfasta;
  PyObject *__pyx_kp_u_reading_coords_from_INFO_only_su;
  PyObject *__pyx_kp_u_reading_coords_from_INFO_only_su_2;
  PyObject *__pyx_n_s_readline;
  PyObject *__pyx_n_s_readsyriout;
  PyObject *__pyx_n_u_readsyriout;
  PyObject *__pyx_n_s_reduce_vcfs;
  PyObject *__pyx_kp_u_reduce_vcfs_called_with_empty_vc;
  PyObject *__pyx_kp_u_reduce_vcfs_called_with_only_one;
  PyObject *__pyx_n_s_ref;
  PyObject *__pyx_n_u_ref;
  PyObject *__pyx_n_s_ref_prim;
  PyObject *__pyx_n_s_reference_end;
  PyObject *__pyx_n_s_reference_name;
  PyObject *__pyx_n_s_reference_start;
  PyObject *__pyx_n_s_reforg;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_n_s_round;
  PyObject *__pyx_n_s_rs;
  PyObject *__pyx_n_u_rt;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_samples;
  PyObject *__pyx_n_s_samtocoords;
  PyObject *__pyx_n_s_save_cigars;
  PyObject *__pyx_n_s_save_to_pff;
  PyObject *__pyx_n_s_save_to_vcf;
  PyObject *__pyx_n_s_scipy_stats;
  PyObject *__pyx_n_s_seed;
  PyObject *__pyx_n_s_seq;
  PyObject *__pyx_n_u_seq;
  PyObject *__pyx_n_s_sort_values;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_splitlines;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_u_start;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_strip;
  PyObject *__pyx_n_s_subset_samples;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_n_s_synorg;
  PyObject *__pyx_n_s_syns;
  PyObject *__pyx_kp_u_syri_vcf;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_tabix_index;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_kp_u_to_VCF_Check_if_the_chromosome;
  PyObject *__pyx_kp_u_to_header;
  PyObject *__pyx_n_s_to_pff;
  PyObject *__pyx_n_s_to_string;
  PyObject *__pyx_n_s_type;
  PyObject *__pyx_n_u_type;
  PyObject *__pyx_n_s_unique;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_util;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_kp_u_values_were_overwritten;
  PyObject *__pyx_n_u_vartype;
  PyObject *__pyx_n_u_vcf;
  PyObject *__pyx_n_s_vcfin;
  PyObject *__pyx_n_s_vcfout;
  PyObject *__pyx_n_s_vcfs;
  PyObject *__pyx_n_u_w;
  PyObject *__pyx_n_s_warning;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_u_x;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_6;
  PyObject *__pyx_int_7;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_9;
  PyObject *__pyx_int_10;
  PyObject *__pyx_int_12;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_256;
  PyObject *__pyx_int_99999999999;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_k__40;
  PyObject *__pyx_k__41;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_slice__5;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_slice__10;
  PyObject *__pyx_slice__11;
  PyObject *__pyx_slice__15;
  PyObject *__pyx_slice__27;
  PyObject *__pyx_slice__29;
  PyObject *__pyx_slice__30;
  PyObject *__pyx_slice__44;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__88;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records);
  Py_CLEAR(clear_module_state->__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records);
  Py_CLEAR(clear_module_state->__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files);
  Py_CLEAR(clear_module_state->__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_012b);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_2f);
  Py_CLEAR(clear_module_state->__pyx_n_u_AI);
  Py_CLEAR(clear_module_state->__pyx_n_s_AlignmentFile);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Appending_filename_to_sample_na);
  Py_CLEAR(clear_module_state->__pyx_n_u_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_BadGzipFile);
  Py_CLEAR(clear_module_state->__pyx_n_u_CG);
  Py_CLEAR(clear_module_state->__pyx_n_u_CHR);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CHR_START_END_ANN);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CIGAR_string_is_not_present_in_P);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CORESYN);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CORESYN_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_CORESYN_3);
  Py_CLEAR(clear_module_state->__pyx_n_u_CPG);
  Py_CLEAR(clear_module_state->__pyx_n_u_CPL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CROSSSYN);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CROSSSYN_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_open_file_Exiting);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Choosing);
  Py_CLEAR(clear_module_state->__pyx_n_u_ChrB);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Combining);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Conflicting_info_stored_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_CustomFormatter);
  Py_CLEAR(clear_module_state->__pyx_n_u_D);
  Py_CLEAR(clear_module_state->__pyx_n_u_DEL);
  Py_CLEAR(clear_module_state->__pyx_n_u_DUP);
  Py_CLEAR(clear_module_state->__pyx_n_u_DUPAL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_D_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Duplicate_chromosome_IDs_are_no);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Duplicate_sample);
  Py_CLEAR(clear_module_state->__pyx_n_u_END);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ERROR_CIGAR_string_starting_with);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Empty_VCF_encountered_Outputting);
  Py_CLEAR(clear_module_state->__pyx_n_u_EndB);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_adding_pansyn_annotation_f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_in_opening_BAM_SAM_file);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_in_reading_BAM_SAM_file);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_in_reading_PAF_Exiting);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_in_reading_SAM_file);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_in_reading_input_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_FileNotFoundError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Filtering);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Found_samples);
  Py_CLEAR(clear_module_state->__pyx_n_u_GT);
  Py_CLEAR(clear_module_state->__pyx_n_u_H);
  Py_CLEAR(clear_module_state->__pyx_n_u_HDR);
  Py_CLEAR(clear_module_state->__pyx_n_s_HEADER);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Headers_not_matching_in);
  Py_CLEAR(clear_module_state->__pyx_n_u_I);
  Py_CLEAR(clear_module_state->__pyx_kp_u_IDs_were_used);
  Py_CLEAR(clear_module_state->__pyx_kp_u_INFO_ID_END_Number_1_Type_Integ);
  Py_CLEAR(clear_module_state->__pyx_n_u_INS);
  Py_CLEAR(clear_module_state->__pyx_n_u_INV);
  Py_CLEAR(clear_module_state->__pyx_n_u_INVAL);
  Py_CLEAR(clear_module_state->__pyx_n_u_INVDP);
  Py_CLEAR(clear_module_state->__pyx_n_u_INVDPAL);
  Py_CLEAR(clear_module_state->__pyx_n_u_INVTR);
  Py_CLEAR(clear_module_state->__pyx_n_u_INVTRAL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_I_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Incomplete_input_file_syri_out_f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Incorrect_CIGAR_string_found_CIG);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Incorrect_CIGAR_string_found_Cli);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Infiles_and_qrynames_lists_lengt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Input_VCF_contains_organisms_not);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_GT_found);
  Py_CLEAR(clear_module_state->__pyx_n_s_KeyError);
  Py_CLEAR(clear_module_state->__pyx_n_u_LN);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_Union_str_os_PathLike);
  Py_CLEAR(clear_module_state->__pyx_n_u_M);
  Py_CLEAR(clear_module_state->__pyx_n_u_MERISYN);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Merging);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Merging_VCFs_with_no_samples_is);
  Py_CLEAR(clear_module_state->__pyx_n_u_N);
  Py_CLEAR(clear_module_state->__pyx_n_u_NOTAL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_N_ACGT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_Reference_specified_not_savin);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_primary_alignment_found_for_q);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_primary_alignment_found_for_r);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Non_numerical_values_used_as_gen);
  Py_CLEAR(clear_module_state->__pyx_n_s_OSError);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderedDict);
  Py_CLEAR(clear_module_state->__pyx_n_u_PID);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pansyn);
  Py_CLEAR(clear_module_state->__pyx_n_s_Pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_Position);
  Py_CLEAR(clear_module_state->__pyx_n_s_Range);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reading_BAM_SAM_file);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reading_PAF_file);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reading_in_Reference_Fasta);
  Py_CLEAR(clear_module_state->__pyx_n_u_S);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SAM_reader);
  Py_CLEAR(clear_module_state->__pyx_n_u_SN);
  Py_CLEAR(clear_module_state->__pyx_n_u_SNP);
  Py_CLEAR(clear_module_state->__pyx_n_s_SNV);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SQ);
  Py_CLEAR(clear_module_state->__pyx_n_u_START);
  Py_CLEAR(clear_module_state->__pyx_n_u_SYN);
  Py_CLEAR(clear_module_state->__pyx_n_u_SYNAL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_SYN_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_S_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_StartB);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_n_u_TDM);
  Py_CLEAR(clear_module_state->__pyx_n_u_TRANS);
  Py_CLEAR(clear_module_state->__pyx_n_u_TRANSAL);
  Py_CLEAR(clear_module_state->__pyx_kp_u_There_was_conflicting_informatio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_There_were_VCF_records_at_the_sa);
  Py_CLEAR(clear_module_state->__pyx_kp_u_This_could_mean_that_the_entire);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Trying_to_join_records_with_diff);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_in_opening_BAM);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Union_str_os_PathLike);
  Py_CLEAR(clear_module_state->__pyx_n_s_VARS);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_VariantFile);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Wrong_parameter);
  Py_CLEAR(clear_module_state->__pyx_n_u_X);
  Py_CLEAR(clear_module_state->__pyx_kp_u_X_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__13);
  Py_CLEAR(clear_module_state->__pyx_kp_u__14);
  Py_CLEAR(clear_module_state->__pyx_n_s__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__19);
  Py_CLEAR(clear_module_state->__pyx_kp_u__20);
  Py_CLEAR(clear_module_state->__pyx_kp_u__28);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_kp_u__36);
  Py_CLEAR(clear_module_state->__pyx_n_u__37);
  Py_CLEAR(clear_module_state->__pyx_kp_u__38);
  Py_CLEAR(clear_module_state->__pyx_kp_u__39);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_kp_u__42);
  Py_CLEAR(clear_module_state->__pyx_kp_u__43);
  Py_CLEAR(clear_module_state->__pyx_kp_u__45);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_b__8);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_n_s__89);
  Py_CLEAR(clear_module_state->__pyx_kp_b__9);
  Py_CLEAR(clear_module_state->__pyx_kp_u__9);
  Py_CLEAR(clear_module_state->__pyx_n_u_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_achr);
  Py_CLEAR(clear_module_state->__pyx_n_u_achr);
  Py_CLEAR(clear_module_state->__pyx_n_s_add);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_cigar);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_identity);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_sample);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_syn_anns);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_syn_anns_to_vcf);
  Py_CLEAR(clear_module_state->__pyx_n_s_adir);
  Py_CLEAR(clear_module_state->__pyx_n_u_adir);
  Py_CLEAR(clear_module_state->__pyx_n_s_aend);
  Py_CLEAR(clear_module_state->__pyx_n_u_aend);
  Py_CLEAR(clear_module_state->__pyx_n_s_al);
  Py_CLEAR(clear_module_state->__pyx_n_s_alen);
  Py_CLEAR(clear_module_state->__pyx_n_u_alen);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_alleles);
  Py_CLEAR(clear_module_state->__pyx_n_s_aln);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and);
  Py_CLEAR(clear_module_state->__pyx_n_s_anns);
  Py_CLEAR(clear_module_state->__pyx_n_s_any);
  Py_CLEAR(clear_module_state->__pyx_n_s_append);
  Py_CLEAR(clear_module_state->__pyx_n_s_ascending);
  Py_CLEAR(clear_module_state->__pyx_n_s_astart);
  Py_CLEAR(clear_module_state->__pyx_n_u_astart);
  Py_CLEAR(clear_module_state->__pyx_n_s_astype);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_u_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_bchr);
  Py_CLEAR(clear_module_state->__pyx_n_u_bchr);
  Py_CLEAR(clear_module_state->__pyx_n_s_bdir);
  Py_CLEAR(clear_module_state->__pyx_n_u_bdir);
  Py_CLEAR(clear_module_state->__pyx_n_s_bend);
  Py_CLEAR(clear_module_state->__pyx_n_u_bend);
  Py_CLEAR(clear_module_state->__pyx_n_s_bf);
  Py_CLEAR(clear_module_state->__pyx_n_s_binary_repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_blen);
  Py_CLEAR(clear_module_state->__pyx_n_u_blen);
  Py_CLEAR(clear_module_state->__pyx_n_s_bstart);
  Py_CLEAR(clear_module_state->__pyx_n_u_bstart);
  Py_CLEAR(clear_module_state->__pyx_n_s_buf);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_cg);
  Py_CLEAR(clear_module_state->__pyx_n_u_cg);
  Py_CLEAR(clear_module_state->__pyx_n_s_cgdict);
  Py_CLEAR(clear_module_state->__pyx_n_s_cgt);
  Py_CLEAR(clear_module_state->__pyx_n_s_cgtpl);
  Py_CLEAR(clear_module_state->__pyx_n_s_chr);
  Py_CLEAR(clear_module_state->__pyx_n_u_chr);
  Py_CLEAR(clear_module_state->__pyx_n_s_chrid);
  Py_CLEAR(clear_module_state->__pyx_n_s_chrom);
  Py_CLEAR(clear_module_state->__pyx_n_s_chrseq);
  Py_CLEAR(clear_module_state->__pyx_n_s_cigar);
  Py_CLEAR(clear_module_state->__pyx_n_s_cigar_from_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_cigars_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_cigarstring);
  Py_CLEAR(clear_module_state->__pyx_n_s_cigartuples);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_collapse_mesyn);
  Py_CLEAR(clear_module_state->__pyx_n_s_collect);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_n_s_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_concat);
  Py_CLEAR(clear_module_state->__pyx_kp_u_contig_ID);
  Py_CLEAR(clear_module_state->__pyx_kp_u_contig_ID_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_contigs);
  Py_CLEAR(clear_module_state->__pyx_n_s_coords);
  Py_CLEAR(clear_module_state->__pyx_n_s_coords_in_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_copy_record_Adding);
  Py_CLEAR(clear_module_state->__pyx_n_s_cores);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_decode);
  Py_CLEAR(clear_module_state->__pyx_n_s_defaultdict);
  Py_CLEAR(clear_module_state->__pyx_n_s_deque);
  Py_CLEAR(clear_module_state->__pyx_n_s_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_difference);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_do_not_align_with_any_query_seq);
  Py_CLEAR(clear_module_state->__pyx_kp_u_do_not_align_with_any_reference);
  Py_CLEAR(clear_module_state->__pyx_kp_u_do_not_align_with_any_reference_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_encountered_in);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_u_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_syntenic_from_vcf);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_syri_regions);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_syri_regions_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_syri_regions_to_list_fro);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_syri_regions_to_list_fro_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_extract_syri_snvs);
  Py_CLEAR(clear_module_state->__pyx_n_s_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_fetch);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter_vcfs);
  Py_CLEAR(clear_module_state->__pyx_n_s_fin);
  Py_CLEAR(clear_module_state->__pyx_n_s_findata);
  Py_CLEAR(clear_module_state->__pyx_n_s_fins);
  Py_CLEAR(clear_module_state->__pyx_n_s_flag);
  Py_CLEAR(clear_module_state->__pyx_n_u_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_flush);
  Py_CLEAR(clear_module_state->__pyx_kp_u_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_force);
  Py_CLEAR(clear_module_state->__pyx_n_s_force_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_kp_u_from_VCF);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_fullmatch);
  Py_CLEAR(clear_module_state->__pyx_n_s_functools);
  Py_CLEAR(clear_module_state->__pyx_n_s_gc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_degree);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_identity);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_orgs);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_orgs_from_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_getlogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_gettmpfile);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gz);
  Py_CLEAR(clear_module_state->__pyx_n_s_gzip);
  Py_CLEAR(clear_module_state->__pyx_n_s_gzopen);
  Py_CLEAR(clear_module_state->__pyx_n_s_h);
  Py_CLEAR(clear_module_state->__pyx_n_s_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_kp_u_id_not_matching_in);
  Py_CLEAR(clear_module_state->__pyx_n_s_iden);
  Py_CLEAR(clear_module_state->__pyx_n_u_iden);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_kp_u_in);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_u_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_index_filename);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_inpath);
  Py_CLEAR(clear_module_state->__pyx_n_s_inplace);
  Py_CLEAR(clear_module_state->__pyx_kp_u_into);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_inv);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_not_a_valid_annotation_for_a);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_repeated);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isgzip);
  Py_CLEAR(clear_module_state->__pyx_n_s_issubset);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_iterrows);
  Py_CLEAR(clear_module_state->__pyx_n_s_j);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_keep_nonsyn_calls);
  Py_CLEAR(clear_module_state->__pyx_n_s_keep_original);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_s_l);
  Py_CLEAR(clear_module_state->__pyx_n_s_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_loc);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_map);
  Py_CLEAR(clear_module_state->__pyx_kp_u_merge_vcf_records_Adding);
  Py_CLEAR(clear_module_state->__pyx_n_s_merge_vcf_records_locals_lambda);
  Py_CLEAR(clear_module_state->__pyx_kp_u_merge_vcfs_Adding);
  Py_CLEAR(clear_module_state->__pyx_n_s_msyd);
  Py_CLEAR(clear_module_state->__pyx_n_s_msyd_cigar);
  Py_CLEAR(clear_module_state->__pyx_n_s_msyd_coords);
  Py_CLEAR(clear_module_state->__pyx_n_s_msyd_io);
  Py_CLEAR(clear_module_state->__pyx_kp_s_msyd_pyxfiles_io_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_msyd_util);
  Py_CLEAR(clear_module_state->__pyx_n_s_msyd_vars);
  Py_CLEAR(clear_module_state->__pyx_n_s_multiprocessing);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_record);
  Py_CLEAR(clear_module_state->__pyx_n_s_no_complex);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_oldref);
  Py_CLEAR(clear_module_state->__pyx_n_s_opath);
  Py_CLEAR(clear_module_state->__pyx_n_s_open);
  Py_CLEAR(clear_module_state->__pyx_n_s_org);
  Py_CLEAR(clear_module_state->__pyx_n_s_orient);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_out);
  Py_CLEAR(clear_module_state->__pyx_n_s_outf);
  Py_CLEAR(clear_module_state->__pyx_n_s_outpath);
  Py_CLEAR(clear_module_state->__pyx_n_s_ovcf);
  Py_CLEAR(clear_module_state->__pyx_n_s_paf);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_partial);
  Py_CLEAR(clear_module_state->__pyx_n_s_pd);
  Py_CLEAR(clear_module_state->__pyx_n_s_pool);
  Py_CLEAR(clear_module_state->__pyx_n_s_pos);
  Py_CLEAR(clear_module_state->__pyx_n_s_preset);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_pysam);
  Py_CLEAR(clear_module_state->__pyx_n_s_qe);
  Py_CLEAR(clear_module_state->__pyx_n_u_qry);
  Py_CLEAR(clear_module_state->__pyx_n_s_qry_prim);
  Py_CLEAR(clear_module_state->__pyx_n_s_qryname);
  Py_CLEAR(clear_module_state->__pyx_n_s_qrynames);
  Py_CLEAR(clear_module_state->__pyx_n_s_qryorg);
  Py_CLEAR(clear_module_state->__pyx_n_s_qs);
  Py_CLEAR(clear_module_state->__pyx_n_s_query_alignment_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_query_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_query_sequence);
  Py_CLEAR(clear_module_state->__pyx_n_u_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_random);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ranges_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_rawsyriout);
  Py_CLEAR(clear_module_state->__pyx_n_u_rb);
  Py_CLEAR(clear_module_state->__pyx_n_s_rc);
  Py_CLEAR(clear_module_state->__pyx_n_s_rcs);
  Py_CLEAR(clear_module_state->__pyx_n_s_re);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_readPAF);
  Py_CLEAR(clear_module_state->__pyx_n_s_readSAMBAM);
  Py_CLEAR(clear_module_state->__pyx_n_s_read_pff);
  Py_CLEAR(clear_module_state->__pyx_n_s_readfasta);
  Py_CLEAR(clear_module_state->__pyx_kp_u_reading_coords_from_INFO_only_su);
  Py_CLEAR(clear_module_state->__pyx_kp_u_reading_coords_from_INFO_only_su_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_readline);
  Py_CLEAR(clear_module_state->__pyx_n_s_readsyriout);
  Py_CLEAR(clear_module_state->__pyx_n_u_readsyriout);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_vcfs);
  Py_CLEAR(clear_module_state->__pyx_kp_u_reduce_vcfs_called_with_empty_vc);
  Py_CLEAR(clear_module_state->__pyx_kp_u_reduce_vcfs_called_with_only_one);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref);
  Py_CLEAR(clear_module_state->__pyx_n_u_ref);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref_prim);
  Py_CLEAR(clear_module_state->__pyx_n_s_reference_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_reference_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_reference_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_reforg);
  Py_CLEAR(clear_module_state->__pyx_n_s_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_round);
  Py_CLEAR(clear_module_state->__pyx_n_s_rs);
  Py_CLEAR(clear_module_state->__pyx_n_u_rt);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_samples);
  Py_CLEAR(clear_module_state->__pyx_n_s_samtocoords);
  Py_CLEAR(clear_module_state->__pyx_n_s_save_cigars);
  Py_CLEAR(clear_module_state->__pyx_n_s_save_to_pff);
  Py_CLEAR(clear_module_state->__pyx_n_s_save_to_vcf);
  Py_CLEAR(clear_module_state->__pyx_n_s_scipy_stats);
  Py_CLEAR(clear_module_state->__pyx_n_s_seed);
  Py_CLEAR(clear_module_state->__pyx_n_s_seq);
  Py_CLEAR(clear_module_state->__pyx_n_u_seq);
  Py_CLEAR(clear_module_state->__pyx_n_s_sort_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_splitlines);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_u_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_strip);
  Py_CLEAR(clear_module_state->__pyx_n_s_subset_samples);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_synorg);
  Py_CLEAR(clear_module_state->__pyx_n_s_syns);
  Py_CLEAR(clear_module_state->__pyx_kp_u_syri_vcf);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_tabix_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_kp_u_to_VCF_Check_if_the_chromosome);
  Py_CLEAR(clear_module_state->__pyx_kp_u_to_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_pff);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_type);
  Py_CLEAR(clear_module_state->__pyx_n_u_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_unique);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_util);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_kp_u_values_were_overwritten);
  Py_CLEAR(clear_module_state->__pyx_n_u_vartype);
  Py_CLEAR(clear_module_state->__pyx_n_u_vcf);
  Py_CLEAR(clear_module_state->__pyx_n_s_vcfin);
  Py_CLEAR(clear_module_state->__pyx_n_s_vcfout);
  Py_CLEAR(clear_module_state->__pyx_n_s_vcfs);
  Py_CLEAR(clear_module_state->__pyx_n_u_w);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_u_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_6);
  Py_CLEAR(clear_module_state->__pyx_int_7);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_9);
  Py_CLEAR(clear_module_state->__pyx_int_10);
  Py_CLEAR(clear_module_state->__pyx_int_12);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_256);
  Py_CLEAR(clear_module_state->__pyx_int_99999999999);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_k__40);
  Py_CLEAR(clear_module_state->__pyx_k__41);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_slice__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_slice__10);
  Py_CLEAR(clear_module_state->__pyx_slice__11);
  Py_CLEAR(clear_module_state->__pyx_slice__15);
  Py_CLEAR(clear_module_state->__pyx_slice__27);
  Py_CLEAR(clear_module_state->__pyx_slice__29);
  Py_CLEAR(clear_module_state->__pyx_slice__30);
  Py_CLEAR(clear_module_state->__pyx_slice__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records);
  Py_VISIT(traverse_module_state->__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records);
  Py_VISIT(traverse_module_state->__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files);
  Py_VISIT(traverse_module_state->__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_012b);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_2f);
  Py_VISIT(traverse_module_state->__pyx_n_u_AI);
  Py_VISIT(traverse_module_state->__pyx_n_s_AlignmentFile);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Appending_filename_to_sample_na);
  Py_VISIT(traverse_module_state->__pyx_n_u_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_BadGzipFile);
  Py_VISIT(traverse_module_state->__pyx_n_u_CG);
  Py_VISIT(traverse_module_state->__pyx_n_u_CHR);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CHR_START_END_ANN);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CIGAR_string_is_not_present_in_P);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CORESYN);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CORESYN_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_CORESYN_3);
  Py_VISIT(traverse_module_state->__pyx_n_u_CPG);
  Py_VISIT(traverse_module_state->__pyx_n_u_CPL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CROSSSYN);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CROSSSYN_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_open_file_Exiting);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Choosing);
  Py_VISIT(traverse_module_state->__pyx_n_u_ChrB);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Combining);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Conflicting_info_stored_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_CustomFormatter);
  Py_VISIT(traverse_module_state->__pyx_n_u_D);
  Py_VISIT(traverse_module_state->__pyx_n_u_DEL);
  Py_VISIT(traverse_module_state->__pyx_n_u_DUP);
  Py_VISIT(traverse_module_state->__pyx_n_u_DUPAL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_D_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Duplicate_chromosome_IDs_are_no);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Duplicate_sample);
  Py_VISIT(traverse_module_state->__pyx_n_u_END);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ERROR_CIGAR_string_starting_with);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Empty_VCF_encountered_Outputting);
  Py_VISIT(traverse_module_state->__pyx_n_u_EndB);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_adding_pansyn_annotation_f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_in_opening_BAM_SAM_file);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_in_reading_BAM_SAM_file);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_in_reading_PAF_Exiting);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_in_reading_SAM_file);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_in_reading_input_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_FileNotFoundError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Filtering);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Found_samples);
  Py_VISIT(traverse_module_state->__pyx_n_u_GT);
  Py_VISIT(traverse_module_state->__pyx_n_u_H);
  Py_VISIT(traverse_module_state->__pyx_n_u_HDR);
  Py_VISIT(traverse_module_state->__pyx_n_s_HEADER);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Headers_not_matching_in);
  Py_VISIT(traverse_module_state->__pyx_n_u_I);
  Py_VISIT(traverse_module_state->__pyx_kp_u_IDs_were_used);
  Py_VISIT(traverse_module_state->__pyx_kp_u_INFO_ID_END_Number_1_Type_Integ);
  Py_VISIT(traverse_module_state->__pyx_n_u_INS);
  Py_VISIT(traverse_module_state->__pyx_n_u_INV);
  Py_VISIT(traverse_module_state->__pyx_n_u_INVAL);
  Py_VISIT(traverse_module_state->__pyx_n_u_INVDP);
  Py_VISIT(traverse_module_state->__pyx_n_u_INVDPAL);
  Py_VISIT(traverse_module_state->__pyx_n_u_INVTR);
  Py_VISIT(traverse_module_state->__pyx_n_u_INVTRAL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_I_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Incomplete_input_file_syri_out_f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Incorrect_CIGAR_string_found_CIG);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Incorrect_CIGAR_string_found_Cli);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Infiles_and_qrynames_lists_lengt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Input_VCF_contains_organisms_not);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_GT_found);
  Py_VISIT(traverse_module_state->__pyx_n_s_KeyError);
  Py_VISIT(traverse_module_state->__pyx_n_u_LN);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_Union_str_os_PathLike);
  Py_VISIT(traverse_module_state->__pyx_n_u_M);
  Py_VISIT(traverse_module_state->__pyx_n_u_MERISYN);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Merging);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Merging_VCFs_with_no_samples_is);
  Py_VISIT(traverse_module_state->__pyx_n_u_N);
  Py_VISIT(traverse_module_state->__pyx_n_u_NOTAL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_N_ACGT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_Reference_specified_not_savin);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_primary_alignment_found_for_q);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_primary_alignment_found_for_r);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Non_numerical_values_used_as_gen);
  Py_VISIT(traverse_module_state->__pyx_n_s_OSError);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderedDict);
  Py_VISIT(traverse_module_state->__pyx_n_u_PID);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pansyn);
  Py_VISIT(traverse_module_state->__pyx_n_s_Pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_Position);
  Py_VISIT(traverse_module_state->__pyx_n_s_Range);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reading_BAM_SAM_file);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reading_PAF_file);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reading_in_Reference_Fasta);
  Py_VISIT(traverse_module_state->__pyx_n_u_S);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SAM_reader);
  Py_VISIT(traverse_module_state->__pyx_n_u_SN);
  Py_VISIT(traverse_module_state->__pyx_n_u_SNP);
  Py_VISIT(traverse_module_state->__pyx_n_s_SNV);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SQ);
  Py_VISIT(traverse_module_state->__pyx_n_u_START);
  Py_VISIT(traverse_module_state->__pyx_n_u_SYN);
  Py_VISIT(traverse_module_state->__pyx_n_u_SYNAL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_SYN_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_S_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_StartB);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_n_u_TDM);
  Py_VISIT(traverse_module_state->__pyx_n_u_TRANS);
  Py_VISIT(traverse_module_state->__pyx_n_u_TRANSAL);
  Py_VISIT(traverse_module_state->__pyx_kp_u_There_was_conflicting_informatio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_There_were_VCF_records_at_the_sa);
  Py_VISIT(traverse_module_state->__pyx_kp_u_This_could_mean_that_the_entire);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Trying_to_join_records_with_diff);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_in_opening_BAM);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Union_str_os_PathLike);
  Py_VISIT(traverse_module_state->__pyx_n_s_VARS);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_VariantFile);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Wrong_parameter);
  Py_VISIT(traverse_module_state->__pyx_n_u_X);
  Py_VISIT(traverse_module_state->__pyx_kp_u_X_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__13);
  Py_VISIT(traverse_module_state->__pyx_kp_u__14);
  Py_VISIT(traverse_module_state->__pyx_n_s__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__19);
  Py_VISIT(traverse_module_state->__pyx_kp_u__20);
  Py_VISIT(traverse_module_state->__pyx_kp_u__28);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_kp_u__36);
  Py_VISIT(traverse_module_state->__pyx_n_u__37);
  Py_VISIT(traverse_module_state->__pyx_kp_u__38);
  Py_VISIT(traverse_module_state->__pyx_kp_u__39);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_kp_u__42);
  Py_VISIT(traverse_module_state->__pyx_kp_u__43);
  Py_VISIT(traverse_module_state->__pyx_kp_u__45);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_b__8);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_n_s__89);
  Py_VISIT(traverse_module_state->__pyx_kp_b__9);
  Py_VISIT(traverse_module_state->__pyx_kp_u__9);
  Py_VISIT(traverse_module_state->__pyx_n_u_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_achr);
  Py_VISIT(traverse_module_state->__pyx_n_u_achr);
  Py_VISIT(traverse_module_state->__pyx_n_s_add);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_cigar);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_identity);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_sample);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_syn_anns);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_syn_anns_to_vcf);
  Py_VISIT(traverse_module_state->__pyx_n_s_adir);
  Py_VISIT(traverse_module_state->__pyx_n_u_adir);
  Py_VISIT(traverse_module_state->__pyx_n_s_aend);
  Py_VISIT(traverse_module_state->__pyx_n_u_aend);
  Py_VISIT(traverse_module_state->__pyx_n_s_al);
  Py_VISIT(traverse_module_state->__pyx_n_s_alen);
  Py_VISIT(traverse_module_state->__pyx_n_u_alen);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_alleles);
  Py_VISIT(traverse_module_state->__pyx_n_s_aln);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and);
  Py_VISIT(traverse_module_state->__pyx_n_s_anns);
  Py_VISIT(traverse_module_state->__pyx_n_s_any);
  Py_VISIT(traverse_module_state->__pyx_n_s_append);
  Py_VISIT(traverse_module_state->__pyx_n_s_ascending);
  Py_VISIT(traverse_module_state->__pyx_n_s_astart);
  Py_VISIT(traverse_module_state->__pyx_n_u_astart);
  Py_VISIT(traverse_module_state->__pyx_n_s_astype);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_u_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_bchr);
  Py_VISIT(traverse_module_state->__pyx_n_u_bchr);
  Py_VISIT(traverse_module_state->__pyx_n_s_bdir);
  Py_VISIT(traverse_module_state->__pyx_n_u_bdir);
  Py_VISIT(traverse_module_state->__pyx_n_s_bend);
  Py_VISIT(traverse_module_state->__pyx_n_u_bend);
  Py_VISIT(traverse_module_state->__pyx_n_s_bf);
  Py_VISIT(traverse_module_state->__pyx_n_s_binary_repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_blen);
  Py_VISIT(traverse_module_state->__pyx_n_u_blen);
  Py_VISIT(traverse_module_state->__pyx_n_s_bstart);
  Py_VISIT(traverse_module_state->__pyx_n_u_bstart);
  Py_VISIT(traverse_module_state->__pyx_n_s_buf);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_cg);
  Py_VISIT(traverse_module_state->__pyx_n_u_cg);
  Py_VISIT(traverse_module_state->__pyx_n_s_cgdict);
  Py_VISIT(traverse_module_state->__pyx_n_s_cgt);
  Py_VISIT(traverse_module_state->__pyx_n_s_cgtpl);
  Py_VISIT(traverse_module_state->__pyx_n_s_chr);
  Py_VISIT(traverse_module_state->__pyx_n_u_chr);
  Py_VISIT(traverse_module_state->__pyx_n_s_chrid);
  Py_VISIT(traverse_module_state->__pyx_n_s_chrom);
  Py_VISIT(traverse_module_state->__pyx_n_s_chrseq);
  Py_VISIT(traverse_module_state->__pyx_n_s_cigar);
  Py_VISIT(traverse_module_state->__pyx_n_s_cigar_from_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_cigars_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_cigarstring);
  Py_VISIT(traverse_module_state->__pyx_n_s_cigartuples);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_collapse_mesyn);
  Py_VISIT(traverse_module_state->__pyx_n_s_collect);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_n_s_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_concat);
  Py_VISIT(traverse_module_state->__pyx_kp_u_contig_ID);
  Py_VISIT(traverse_module_state->__pyx_kp_u_contig_ID_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_contigs);
  Py_VISIT(traverse_module_state->__pyx_n_s_coords);
  Py_VISIT(traverse_module_state->__pyx_n_s_coords_in_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_copy_record_Adding);
  Py_VISIT(traverse_module_state->__pyx_n_s_cores);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_decode);
  Py_VISIT(traverse_module_state->__pyx_n_s_defaultdict);
  Py_VISIT(traverse_module_state->__pyx_n_s_deque);
  Py_VISIT(traverse_module_state->__pyx_n_s_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_difference);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_do_not_align_with_any_query_seq);
  Py_VISIT(traverse_module_state->__pyx_kp_u_do_not_align_with_any_reference);
  Py_VISIT(traverse_module_state->__pyx_kp_u_do_not_align_with_any_reference_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_encountered_in);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_u_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_syntenic_from_vcf);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_syri_regions);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_syri_regions_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_syri_regions_to_list_fro);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_syri_regions_to_list_fro_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_extract_syri_snvs);
  Py_VISIT(traverse_module_state->__pyx_n_s_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_fetch);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter_vcfs);
  Py_VISIT(traverse_module_state->__pyx_n_s_fin);
  Py_VISIT(traverse_module_state->__pyx_n_s_findata);
  Py_VISIT(traverse_module_state->__pyx_n_s_fins);
  Py_VISIT(traverse_module_state->__pyx_n_s_flag);
  Py_VISIT(traverse_module_state->__pyx_n_u_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_flush);
  Py_VISIT(traverse_module_state->__pyx_kp_u_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_force);
  Py_VISIT(traverse_module_state->__pyx_n_s_force_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_kp_u_from_VCF);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_fullmatch);
  Py_VISIT(traverse_module_state->__pyx_n_s_functools);
  Py_VISIT(traverse_module_state->__pyx_n_s_gc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_degree);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_identity);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_orgs);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_orgs_from_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_getlogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_gettmpfile);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gz);
  Py_VISIT(traverse_module_state->__pyx_n_s_gzip);
  Py_VISIT(traverse_module_state->__pyx_n_s_gzopen);
  Py_VISIT(traverse_module_state->__pyx_n_s_h);
  Py_VISIT(traverse_module_state->__pyx_n_s_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_kp_u_id_not_matching_in);
  Py_VISIT(traverse_module_state->__pyx_n_s_iden);
  Py_VISIT(traverse_module_state->__pyx_n_u_iden);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_kp_u_in);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_u_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_index_filename);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_inpath);
  Py_VISIT(traverse_module_state->__pyx_n_s_inplace);
  Py_VISIT(traverse_module_state->__pyx_kp_u_into);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_inv);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_not_a_valid_annotation_for_a);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_repeated);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isgzip);
  Py_VISIT(traverse_module_state->__pyx_n_s_issubset);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_iterrows);
  Py_VISIT(traverse_module_state->__pyx_n_s_j);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_keep_nonsyn_calls);
  Py_VISIT(traverse_module_state->__pyx_n_s_keep_original);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_s_l);
  Py_VISIT(traverse_module_state->__pyx_n_s_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_loc);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_map);
  Py_VISIT(traverse_module_state->__pyx_kp_u_merge_vcf_records_Adding);
  Py_VISIT(traverse_module_state->__pyx_n_s_merge_vcf_records_locals_lambda);
  Py_VISIT(traverse_module_state->__pyx_kp_u_merge_vcfs_Adding);
  Py_VISIT(traverse_module_state->__pyx_n_s_msyd);
  Py_VISIT(traverse_module_state->__pyx_n_s_msyd_cigar);
  Py_VISIT(traverse_module_state->__pyx_n_s_msyd_coords);
  Py_VISIT(traverse_module_state->__pyx_n_s_msyd_io);
  Py_VISIT(traverse_module_state->__pyx_kp_s_msyd_pyxfiles_io_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_msyd_util);
  Py_VISIT(traverse_module_state->__pyx_n_s_msyd_vars);
  Py_VISIT(traverse_module_state->__pyx_n_s_multiprocessing);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_record);
  Py_VISIT(traverse_module_state->__pyx_n_s_no_complex);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_oldref);
  Py_VISIT(traverse_module_state->__pyx_n_s_opath);
  Py_VISIT(traverse_module_state->__pyx_n_s_open);
  Py_VISIT(traverse_module_state->__pyx_n_s_org);
  Py_VISIT(traverse_module_state->__pyx_n_s_orient);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_out);
  Py_VISIT(traverse_module_state->__pyx_n_s_outf);
  Py_VISIT(traverse_module_state->__pyx_n_s_outpath);
  Py_VISIT(traverse_module_state->__pyx_n_s_ovcf);
  Py_VISIT(traverse_module_state->__pyx_n_s_paf);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_partial);
  Py_VISIT(traverse_module_state->__pyx_n_s_pd);
  Py_VISIT(traverse_module_state->__pyx_n_s_pool);
  Py_VISIT(traverse_module_state->__pyx_n_s_pos);
  Py_VISIT(traverse_module_state->__pyx_n_s_preset);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_pysam);
  Py_VISIT(traverse_module_state->__pyx_n_s_qe);
  Py_VISIT(traverse_module_state->__pyx_n_u_qry);
  Py_VISIT(traverse_module_state->__pyx_n_s_qry_prim);
  Py_VISIT(traverse_module_state->__pyx_n_s_qryname);
  Py_VISIT(traverse_module_state->__pyx_n_s_qrynames);
  Py_VISIT(traverse_module_state->__pyx_n_s_qryorg);
  Py_VISIT(traverse_module_state->__pyx_n_s_qs);
  Py_VISIT(traverse_module_state->__pyx_n_s_query_alignment_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_query_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_query_sequence);
  Py_VISIT(traverse_module_state->__pyx_n_u_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_random);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ranges_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_rawsyriout);
  Py_VISIT(traverse_module_state->__pyx_n_u_rb);
  Py_VISIT(traverse_module_state->__pyx_n_s_rc);
  Py_VISIT(traverse_module_state->__pyx_n_s_rcs);
  Py_VISIT(traverse_module_state->__pyx_n_s_re);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_readPAF);
  Py_VISIT(traverse_module_state->__pyx_n_s_readSAMBAM);
  Py_VISIT(traverse_module_state->__pyx_n_s_read_pff);
  Py_VISIT(traverse_module_state->__pyx_n_s_readfasta);
  Py_VISIT(traverse_module_state->__pyx_kp_u_reading_coords_from_INFO_only_su);
  Py_VISIT(traverse_module_state->__pyx_kp_u_reading_coords_from_INFO_only_su_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_readline);
  Py_VISIT(traverse_module_state->__pyx_n_s_readsyriout);
  Py_VISIT(traverse_module_state->__pyx_n_u_readsyriout);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_vcfs);
  Py_VISIT(traverse_module_state->__pyx_kp_u_reduce_vcfs_called_with_empty_vc);
  Py_VISIT(traverse_module_state->__pyx_kp_u_reduce_vcfs_called_with_only_one);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref);
  Py_VISIT(traverse_module_state->__pyx_n_u_ref);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref_prim);
  Py_VISIT(traverse_module_state->__pyx_n_s_reference_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_reference_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_reference_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_reforg);
  Py_VISIT(traverse_module_state->__pyx_n_s_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_round);
  Py_VISIT(traverse_module_state->__pyx_n_s_rs);
  Py_VISIT(traverse_module_state->__pyx_n_u_rt);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_samples);
  Py_VISIT(traverse_module_state->__pyx_n_s_samtocoords);
  Py_VISIT(traverse_module_state->__pyx_n_s_save_cigars);
  Py_VISIT(traverse_module_state->__pyx_n_s_save_to_pff);
  Py_VISIT(traverse_module_state->__pyx_n_s_save_to_vcf);
  Py_VISIT(traverse_module_state->__pyx_n_s_scipy_stats);
  Py_VISIT(traverse_module_state->__pyx_n_s_seed);
  Py_VISIT(traverse_module_state->__pyx_n_s_seq);
  Py_VISIT(traverse_module_state->__pyx_n_u_seq);
  Py_VISIT(traverse_module_state->__pyx_n_s_sort_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_splitlines);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_u_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_strip);
  Py_VISIT(traverse_module_state->__pyx_n_s_subset_samples);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_synorg);
  Py_VISIT(traverse_module_state->__pyx_n_s_syns);
  Py_VISIT(traverse_module_state->__pyx_kp_u_syri_vcf);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_tabix_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_kp_u_to_VCF_Check_if_the_chromosome);
  Py_VISIT(traverse_module_state->__pyx_kp_u_to_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_pff);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_type);
  Py_VISIT(traverse_module_state->__pyx_n_u_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_unique);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_util);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_kp_u_values_were_overwritten);
  Py_VISIT(traverse_module_state->__pyx_n_u_vartype);
  Py_VISIT(traverse_module_state->__pyx_n_u_vcf);
  Py_VISIT(traverse_module_state->__pyx_n_s_vcfin);
  Py_VISIT(traverse_module_state->__pyx_n_s_vcfout);
  Py_VISIT(traverse_module_state->__pyx_n_s_vcfs);
  Py_VISIT(traverse_module_state->__pyx_n_u_w);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_u_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_6);
  Py_VISIT(traverse_module_state->__pyx_int_7);
  Py_VISIT(traverse_module_state->__pyx_int_8);
  Py_VISIT(traverse_module_state->__pyx_int_9);
  Py_VISIT(traverse_module_state->__pyx_int_10);
  Py_VISIT(traverse_module_state->__pyx_int_12);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_256);
  Py_VISIT(traverse_module_state->__pyx_int_99999999999);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_k__40);
  Py_VISIT(traverse_module_state->__pyx_k__41);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_slice__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_slice__10);
  Py_VISIT(traverse_module_state->__pyx_slice__11);
  Py_VISIT(traverse_module_state->__pyx_slice__15);
  Py_VISIT(traverse_module_state->__pyx_slice__27);
  Py_VISIT(traverse_module_state->__pyx_slice__29);
  Py_VISIT(traverse_module_state->__pyx_slice__30);
  Py_VISIT(traverse_module_state->__pyx_slice__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records __pyx_mstate_global->__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records
#define __pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files __pyx_mstate_global->__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files
#endif
#define __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records __pyx_mstate_global->__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records
#define __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files __pyx_mstate_global->__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files
#define __pyx_kp_u_0 __pyx_mstate_global->__pyx_kp_u_0
#define __pyx_kp_u_012b __pyx_mstate_global->__pyx_kp_u_012b
#define __pyx_kp_u_1 __pyx_mstate_global->__pyx_kp_u_1
#define __pyx_kp_u_2f __pyx_mstate_global->__pyx_kp_u_2f
#define __pyx_n_u_AI __pyx_mstate_global->__pyx_n_u_AI
#define __pyx_n_s_AlignmentFile __pyx_mstate_global->__pyx_n_s_AlignmentFile
#define __pyx_kp_u_Appending_filename_to_sample_na __pyx_mstate_global->__pyx_kp_u_Appending_filename_to_sample_na
#define __pyx_n_u_B __pyx_mstate_global->__pyx_n_u_B
#define __pyx_n_s_BadGzipFile __pyx_mstate_global->__pyx_n_s_BadGzipFile
#define __pyx_n_u_CG __pyx_mstate_global->__pyx_n_u_CG
#define __pyx_n_u_CHR __pyx_mstate_global->__pyx_n_u_CHR
#define __pyx_kp_u_CHR_START_END_ANN __pyx_mstate_global->__pyx_kp_u_CHR_START_END_ANN
#define __pyx_kp_u_CIGAR_string_is_not_present_in_P __pyx_mstate_global->__pyx_kp_u_CIGAR_string_is_not_present_in_P
#define __pyx_kp_u_CORESYN __pyx_mstate_global->__pyx_kp_u_CORESYN
#define __pyx_kp_u_CORESYN_2 __pyx_mstate_global->__pyx_kp_u_CORESYN_2
#define __pyx_n_u_CORESYN_3 __pyx_mstate_global->__pyx_n_u_CORESYN_3
#define __pyx_n_u_CPG __pyx_mstate_global->__pyx_n_u_CPG
#define __pyx_n_u_CPL __pyx_mstate_global->__pyx_n_u_CPL
#define __pyx_kp_u_CROSSSYN __pyx_mstate_global->__pyx_kp_u_CROSSSYN
#define __pyx_kp_u_CROSSSYN_2 __pyx_mstate_global->__pyx_kp_u_CROSSSYN_2
#define __pyx_kp_u_Cannot_open_file_Exiting __pyx_mstate_global->__pyx_kp_u_Cannot_open_file_Exiting
#define __pyx_kp_u_Choosing __pyx_mstate_global->__pyx_kp_u_Choosing
#define __pyx_n_u_ChrB __pyx_mstate_global->__pyx_n_u_ChrB
#define __pyx_kp_u_Combining __pyx_mstate_global->__pyx_kp_u_Combining
#define __pyx_kp_u_Conflicting_info_stored_for __pyx_mstate_global->__pyx_kp_u_Conflicting_info_stored_for
#define __pyx_n_s_CustomFormatter __pyx_mstate_global->__pyx_n_s_CustomFormatter
#define __pyx_n_u_D __pyx_mstate_global->__pyx_n_u_D
#define __pyx_n_u_DEL __pyx_mstate_global->__pyx_n_u_DEL
#define __pyx_n_u_DUP __pyx_mstate_global->__pyx_n_u_DUP
#define __pyx_n_u_DUPAL __pyx_mstate_global->__pyx_n_u_DUPAL
#define __pyx_kp_u_D_2 __pyx_mstate_global->__pyx_kp_u_D_2
#define __pyx_n_s_DataFrame __pyx_mstate_global->__pyx_n_s_DataFrame
#define __pyx_kp_u_Duplicate_chromosome_IDs_are_no __pyx_mstate_global->__pyx_kp_u_Duplicate_chromosome_IDs_are_no
#define __pyx_kp_u_Duplicate_sample __pyx_mstate_global->__pyx_kp_u_Duplicate_sample
#define __pyx_n_u_END __pyx_mstate_global->__pyx_n_u_END
#define __pyx_kp_u_ERROR_CIGAR_string_starting_with __pyx_mstate_global->__pyx_kp_u_ERROR_CIGAR_string_starting_with
#define __pyx_kp_u_Empty_VCF_encountered_Outputting __pyx_mstate_global->__pyx_kp_u_Empty_VCF_encountered_Outputting
#define __pyx_n_u_EndB __pyx_mstate_global->__pyx_n_u_EndB
#define __pyx_kp_u_Error_adding_pansyn_annotation_f __pyx_mstate_global->__pyx_kp_u_Error_adding_pansyn_annotation_f
#define __pyx_kp_u_Error_in_opening_BAM_SAM_file __pyx_mstate_global->__pyx_kp_u_Error_in_opening_BAM_SAM_file
#define __pyx_kp_u_Error_in_reading_BAM_SAM_file __pyx_mstate_global->__pyx_kp_u_Error_in_reading_BAM_SAM_file
#define __pyx_kp_u_Error_in_reading_PAF_Exiting __pyx_mstate_global->__pyx_kp_u_Error_in_reading_PAF_Exiting
#define __pyx_kp_u_Error_in_reading_SAM_file __pyx_mstate_global->__pyx_kp_u_Error_in_reading_SAM_file
#define __pyx_kp_u_Error_in_reading_input_file __pyx_mstate_global->__pyx_kp_u_Error_in_reading_input_file
#define __pyx_n_s_FileNotFoundError __pyx_mstate_global->__pyx_n_s_FileNotFoundError
#define __pyx_kp_u_Filtering __pyx_mstate_global->__pyx_kp_u_Filtering
#define __pyx_kp_u_Found_samples __pyx_mstate_global->__pyx_kp_u_Found_samples
#define __pyx_n_u_GT __pyx_mstate_global->__pyx_n_u_GT
#define __pyx_n_u_H __pyx_mstate_global->__pyx_n_u_H
#define __pyx_n_u_HDR __pyx_mstate_global->__pyx_n_u_HDR
#define __pyx_n_s_HEADER __pyx_mstate_global->__pyx_n_s_HEADER
#define __pyx_kp_u_H_2 __pyx_mstate_global->__pyx_kp_u_H_2
#define __pyx_kp_u_Headers_not_matching_in __pyx_mstate_global->__pyx_kp_u_Headers_not_matching_in
#define __pyx_n_u_I __pyx_mstate_global->__pyx_n_u_I
#define __pyx_kp_u_IDs_were_used __pyx_mstate_global->__pyx_kp_u_IDs_were_used
#define __pyx_kp_u_INFO_ID_END_Number_1_Type_Integ __pyx_mstate_global->__pyx_kp_u_INFO_ID_END_Number_1_Type_Integ
#define __pyx_n_u_INS __pyx_mstate_global->__pyx_n_u_INS
#define __pyx_n_u_INV __pyx_mstate_global->__pyx_n_u_INV
#define __pyx_n_u_INVAL __pyx_mstate_global->__pyx_n_u_INVAL
#define __pyx_n_u_INVDP __pyx_mstate_global->__pyx_n_u_INVDP
#define __pyx_n_u_INVDPAL __pyx_mstate_global->__pyx_n_u_INVDPAL
#define __pyx_n_u_INVTR __pyx_mstate_global->__pyx_n_u_INVTR
#define __pyx_n_u_INVTRAL __pyx_mstate_global->__pyx_n_u_INVTRAL
#define __pyx_kp_u_I_2 __pyx_mstate_global->__pyx_kp_u_I_2
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_u_Incomplete_input_file_syri_out_f __pyx_mstate_global->__pyx_kp_u_Incomplete_input_file_syri_out_f
#define __pyx_kp_u_Incorrect_CIGAR_string_found_CIG __pyx_mstate_global->__pyx_kp_u_Incorrect_CIGAR_string_found_CIG
#define __pyx_kp_u_Incorrect_CIGAR_string_found_Cli __pyx_mstate_global->__pyx_kp_u_Incorrect_CIGAR_string_found_Cli
#define __pyx_kp_u_Infiles_and_qrynames_lists_lengt __pyx_mstate_global->__pyx_kp_u_Infiles_and_qrynames_lists_lengt
#define __pyx_kp_u_Input_VCF_contains_organisms_not __pyx_mstate_global->__pyx_kp_u_Input_VCF_contains_organisms_not
#define __pyx_kp_u_Invalid_GT_found __pyx_mstate_global->__pyx_kp_u_Invalid_GT_found
#define __pyx_n_s_KeyError __pyx_mstate_global->__pyx_n_s_KeyError
#define __pyx_n_u_LN __pyx_mstate_global->__pyx_n_u_LN
#define __pyx_kp_s_List_Union_str_os_PathLike __pyx_mstate_global->__pyx_kp_s_List_Union_str_os_PathLike
#define __pyx_n_u_M __pyx_mstate_global->__pyx_n_u_M
#define __pyx_n_u_MERISYN __pyx_mstate_global->__pyx_n_u_MERISYN
#define __pyx_kp_u_Merging __pyx_mstate_global->__pyx_kp_u_Merging
#define __pyx_kp_u_Merging_VCFs_with_no_samples_is __pyx_mstate_global->__pyx_kp_u_Merging_VCFs_with_no_samples_is
#define __pyx_n_u_N __pyx_mstate_global->__pyx_n_u_N
#define __pyx_n_u_NOTAL __pyx_mstate_global->__pyx_n_u_NOTAL
#define __pyx_kp_u_N_ACGT __pyx_mstate_global->__pyx_kp_u_N_ACGT
#define __pyx_kp_u_No_Reference_specified_not_savin __pyx_mstate_global->__pyx_kp_u_No_Reference_specified_not_savin
#define __pyx_kp_u_No_primary_alignment_found_for_q __pyx_mstate_global->__pyx_kp_u_No_primary_alignment_found_for_q
#define __pyx_kp_u_No_primary_alignment_found_for_r __pyx_mstate_global->__pyx_kp_u_No_primary_alignment_found_for_r
#define __pyx_kp_u_Non_numerical_values_used_as_gen __pyx_mstate_global->__pyx_kp_u_Non_numerical_values_used_as_gen
#define __pyx_n_s_OSError __pyx_mstate_global->__pyx_n_s_OSError
#define __pyx_n_s_OrderedDict __pyx_mstate_global->__pyx_n_s_OrderedDict
#define __pyx_n_u_PID __pyx_mstate_global->__pyx_n_u_PID
#define __pyx_n_s_Pansyn __pyx_mstate_global->__pyx_n_s_Pansyn
#define __pyx_n_s_Pool __pyx_mstate_global->__pyx_n_s_Pool
#define __pyx_n_s_Position __pyx_mstate_global->__pyx_n_s_Position
#define __pyx_n_s_Range __pyx_mstate_global->__pyx_n_s_Range
#define __pyx_kp_u_Reading_BAM_SAM_file __pyx_mstate_global->__pyx_kp_u_Reading_BAM_SAM_file
#define __pyx_kp_u_Reading_PAF_file __pyx_mstate_global->__pyx_kp_u_Reading_PAF_file
#define __pyx_kp_u_Reading_in_Reference_Fasta __pyx_mstate_global->__pyx_kp_u_Reading_in_Reference_Fasta
#define __pyx_n_u_S __pyx_mstate_global->__pyx_n_u_S
#define __pyx_kp_u_SAM_reader __pyx_mstate_global->__pyx_kp_u_SAM_reader
#define __pyx_n_u_SN __pyx_mstate_global->__pyx_n_u_SN
#define __pyx_n_u_SNP __pyx_mstate_global->__pyx_n_u_SNP
#define __pyx_n_s_SNV __pyx_mstate_global->__pyx_n_s_SNV
#define __pyx_kp_u_SQ __pyx_mstate_global->__pyx_kp_u_SQ
#define __pyx_n_u_START __pyx_mstate_global->__pyx_n_u_START
#define __pyx_n_u_SYN __pyx_mstate_global->__pyx_n_u_SYN
#define __pyx_n_u_SYNAL __pyx_mstate_global->__pyx_n_u_SYNAL
#define __pyx_kp_u_SYN_2 __pyx_mstate_global->__pyx_kp_u_SYN_2
#define __pyx_kp_u_S_2 __pyx_mstate_global->__pyx_kp_u_S_2
#define __pyx_n_u_StartB __pyx_mstate_global->__pyx_n_u_StartB
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_n_u_TDM __pyx_mstate_global->__pyx_n_u_TDM
#define __pyx_n_u_TRANS __pyx_mstate_global->__pyx_n_u_TRANS
#define __pyx_n_u_TRANSAL __pyx_mstate_global->__pyx_n_u_TRANSAL
#define __pyx_kp_u_There_was_conflicting_informatio __pyx_mstate_global->__pyx_kp_u_There_was_conflicting_informatio
#define __pyx_kp_u_There_were_VCF_records_at_the_sa __pyx_mstate_global->__pyx_kp_u_There_were_VCF_records_at_the_sa
#define __pyx_kp_u_This_could_mean_that_the_entire __pyx_mstate_global->__pyx_kp_u_This_could_mean_that_the_entire
#define __pyx_kp_u_Trying_to_join_records_with_diff __pyx_mstate_global->__pyx_kp_u_Trying_to_join_records_with_diff
#define __pyx_kp_u_Unexpected_error_in_opening_BAM __pyx_mstate_global->__pyx_kp_u_Unexpected_error_in_opening_BAM
#define __pyx_kp_s_Union_str_os_PathLike __pyx_mstate_global->__pyx_kp_s_Union_str_os_PathLike
#define __pyx_n_s_VARS __pyx_mstate_global->__pyx_n_s_VARS
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_VariantFile __pyx_mstate_global->__pyx_n_s_VariantFile
#define __pyx_kp_u_Wrong_parameter __pyx_mstate_global->__pyx_kp_u_Wrong_parameter
#define __pyx_n_u_X __pyx_mstate_global->__pyx_n_u_X
#define __pyx_kp_u_X_2 __pyx_mstate_global->__pyx_kp_u_X_2
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_kp_u__13 __pyx_mstate_global->__pyx_kp_u__13
#define __pyx_kp_u__14 __pyx_mstate_global->__pyx_kp_u__14
#define __pyx_n_s__16 __pyx_mstate_global->__pyx_n_s__16
#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16
#define __pyx_kp_u__19 __pyx_mstate_global->__pyx_kp_u__19
#define __pyx_kp_u__20 __pyx_mstate_global->__pyx_kp_u__20
#define __pyx_kp_u__28 __pyx_mstate_global->__pyx_kp_u__28
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_kp_u__36 __pyx_mstate_global->__pyx_kp_u__36
#define __pyx_n_u__37 __pyx_mstate_global->__pyx_n_u__37
#define __pyx_kp_u__38 __pyx_mstate_global->__pyx_kp_u__38
#define __pyx_kp_u__39 __pyx_mstate_global->__pyx_kp_u__39
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_kp_u__42 __pyx_mstate_global->__pyx_kp_u__42
#define __pyx_kp_u__43 __pyx_mstate_global->__pyx_kp_u__43
#define __pyx_kp_u__45 __pyx_mstate_global->__pyx_kp_u__45
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_b__8 __pyx_mstate_global->__pyx_kp_b__8
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_n_s__89 __pyx_mstate_global->__pyx_n_s__89
#define __pyx_kp_b__9 __pyx_mstate_global->__pyx_kp_b__9
#define __pyx_kp_u__9 __pyx_mstate_global->__pyx_kp_u__9
#define __pyx_n_u_a __pyx_mstate_global->__pyx_n_u_a
#define __pyx_n_s_achr __pyx_mstate_global->__pyx_n_s_achr
#define __pyx_n_u_achr __pyx_mstate_global->__pyx_n_u_achr
#define __pyx_n_s_add __pyx_mstate_global->__pyx_n_s_add
#define __pyx_n_s_add_cigar __pyx_mstate_global->__pyx_n_s_add_cigar
#define __pyx_n_s_add_identity __pyx_mstate_global->__pyx_n_s_add_identity
#define __pyx_n_s_add_line __pyx_mstate_global->__pyx_n_s_add_line
#define __pyx_n_s_add_sample __pyx_mstate_global->__pyx_n_s_add_sample
#define __pyx_n_s_add_syn_anns __pyx_mstate_global->__pyx_n_s_add_syn_anns
#define __pyx_n_s_add_syn_anns_to_vcf __pyx_mstate_global->__pyx_n_s_add_syn_anns_to_vcf
#define __pyx_n_s_adir __pyx_mstate_global->__pyx_n_s_adir
#define __pyx_n_u_adir __pyx_mstate_global->__pyx_n_u_adir
#define __pyx_n_s_aend __pyx_mstate_global->__pyx_n_s_aend
#define __pyx_n_u_aend __pyx_mstate_global->__pyx_n_u_aend
#define __pyx_n_s_al __pyx_mstate_global->__pyx_n_s_al
#define __pyx_n_s_alen __pyx_mstate_global->__pyx_n_s_alen
#define __pyx_n_u_alen __pyx_mstate_global->__pyx_n_u_alen
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_alleles __pyx_mstate_global->__pyx_n_s_alleles
#define __pyx_n_s_aln __pyx_mstate_global->__pyx_n_s_aln
#define __pyx_kp_u_and __pyx_mstate_global->__pyx_kp_u_and
#define __pyx_n_s_anns __pyx_mstate_global->__pyx_n_s_anns
#define __pyx_n_s_any __pyx_mstate_global->__pyx_n_s_any
#define __pyx_n_s_append __pyx_mstate_global->__pyx_n_s_append
#define __pyx_n_s_ascending __pyx_mstate_global->__pyx_n_s_ascending
#define __pyx_n_s_astart __pyx_mstate_global->__pyx_n_s_astart
#define __pyx_n_u_astart __pyx_mstate_global->__pyx_n_u_astart
#define __pyx_n_s_astype __pyx_mstate_global->__pyx_n_s_astype
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_u_b __pyx_mstate_global->__pyx_n_u_b
#define __pyx_n_s_bchr __pyx_mstate_global->__pyx_n_s_bchr
#define __pyx_n_u_bchr __pyx_mstate_global->__pyx_n_u_bchr
#define __pyx_n_s_bdir __pyx_mstate_global->__pyx_n_s_bdir
#define __pyx_n_u_bdir __pyx_mstate_global->__pyx_n_u_bdir
#define __pyx_n_s_bend __pyx_mstate_global->__pyx_n_s_bend
#define __pyx_n_u_bend __pyx_mstate_global->__pyx_n_u_bend
#define __pyx_n_s_bf __pyx_mstate_global->__pyx_n_s_bf
#define __pyx_n_s_binary_repr __pyx_mstate_global->__pyx_n_s_binary_repr
#define __pyx_n_s_blen __pyx_mstate_global->__pyx_n_s_blen
#define __pyx_n_u_blen __pyx_mstate_global->__pyx_n_u_blen
#define __pyx_n_s_bstart __pyx_mstate_global->__pyx_n_s_bstart
#define __pyx_n_u_bstart __pyx_mstate_global->__pyx_n_u_bstart
#define __pyx_n_s_buf __pyx_mstate_global->__pyx_n_s_buf
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_s_cg __pyx_mstate_global->__pyx_n_s_cg
#define __pyx_n_u_cg __pyx_mstate_global->__pyx_n_u_cg
#define __pyx_n_s_cgdict __pyx_mstate_global->__pyx_n_s_cgdict
#define __pyx_n_s_cgt __pyx_mstate_global->__pyx_n_s_cgt
#define __pyx_n_s_cgtpl __pyx_mstate_global->__pyx_n_s_cgtpl
#define __pyx_n_s_chr __pyx_mstate_global->__pyx_n_s_chr
#define __pyx_n_u_chr __pyx_mstate_global->__pyx_n_u_chr
#define __pyx_n_s_chrid __pyx_mstate_global->__pyx_n_s_chrid
#define __pyx_n_s_chrom __pyx_mstate_global->__pyx_n_s_chrom
#define __pyx_n_s_chrseq __pyx_mstate_global->__pyx_n_s_chrseq
#define __pyx_n_s_cigar __pyx_mstate_global->__pyx_n_s_cigar
#define __pyx_n_s_cigar_from_string __pyx_mstate_global->__pyx_n_s_cigar_from_string
#define __pyx_n_s_cigars_dict __pyx_mstate_global->__pyx_n_s_cigars_dict
#define __pyx_n_s_cigarstring __pyx_mstate_global->__pyx_n_s_cigarstring
#define __pyx_n_s_cigartuples __pyx_mstate_global->__pyx_n_s_cigartuples
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_collapse_mesyn __pyx_mstate_global->__pyx_n_s_collapse_mesyn
#define __pyx_n_s_collect __pyx_mstate_global->__pyx_n_s_collect
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_n_s_columns __pyx_mstate_global->__pyx_n_s_columns
#define __pyx_n_s_concat __pyx_mstate_global->__pyx_n_s_concat
#define __pyx_kp_u_contig_ID __pyx_mstate_global->__pyx_kp_u_contig_ID
#define __pyx_kp_u_contig_ID_length __pyx_mstate_global->__pyx_kp_u_contig_ID_length
#define __pyx_n_s_contigs __pyx_mstate_global->__pyx_n_s_contigs
#define __pyx_n_s_coords __pyx_mstate_global->__pyx_n_s_coords
#define __pyx_n_s_coords_in_info __pyx_mstate_global->__pyx_n_s_coords_in_info
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_kp_u_copy_record_Adding __pyx_mstate_global->__pyx_kp_u_copy_record_Adding
#define __pyx_n_s_cores __pyx_mstate_global->__pyx_n_s_cores
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode
#define __pyx_n_s_defaultdict __pyx_mstate_global->__pyx_n_s_defaultdict
#define __pyx_n_s_deque __pyx_mstate_global->__pyx_n_s_deque
#define __pyx_n_s_df __pyx_mstate_global->__pyx_n_s_df
#define __pyx_n_s_difference __pyx_mstate_global->__pyx_n_s_difference
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_kp_u_do_not_align_with_any_query_seq __pyx_mstate_global->__pyx_kp_u_do_not_align_with_any_query_seq
#define __pyx_kp_u_do_not_align_with_any_reference __pyx_mstate_global->__pyx_kp_u_do_not_align_with_any_reference
#define __pyx_kp_u_do_not_align_with_any_reference_2 __pyx_mstate_global->__pyx_kp_u_do_not_align_with_any_reference_2
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_kp_u_encountered_in __pyx_mstate_global->__pyx_kp_u_encountered_in
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_u_end __pyx_mstate_global->__pyx_n_u_end
#define __pyx_n_s_enter __pyx_mstate_global->__pyx_n_s_enter
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_exit __pyx_mstate_global->__pyx_n_s_exit
#define __pyx_n_s_exit_2 __pyx_mstate_global->__pyx_n_s_exit_2
#define __pyx_n_s_extract_syntenic_from_vcf __pyx_mstate_global->__pyx_n_s_extract_syntenic_from_vcf
#define __pyx_n_s_extract_syri_regions __pyx_mstate_global->__pyx_n_s_extract_syri_regions
#define __pyx_n_s_extract_syri_regions_from_file __pyx_mstate_global->__pyx_n_s_extract_syri_regions_from_file
#define __pyx_n_s_extract_syri_regions_to_list_fro __pyx_mstate_global->__pyx_n_s_extract_syri_regions_to_list_fro
#define __pyx_n_s_extract_syri_regions_to_list_fro_2 __pyx_mstate_global->__pyx_n_s_extract_syri_regions_to_list_fro_2
#define __pyx_n_s_extract_syri_snvs __pyx_mstate_global->__pyx_n_s_extract_syri_snvs
#define __pyx_n_s_f __pyx_mstate_global->__pyx_n_s_f
#define __pyx_n_s_fetch __pyx_mstate_global->__pyx_n_s_fetch
#define __pyx_n_s_filter_vcfs __pyx_mstate_global->__pyx_n_s_filter_vcfs
#define __pyx_n_s_fin __pyx_mstate_global->__pyx_n_s_fin
#define __pyx_n_s_findata __pyx_mstate_global->__pyx_n_s_findata
#define __pyx_n_s_fins __pyx_mstate_global->__pyx_n_s_fins
#define __pyx_n_s_flag __pyx_mstate_global->__pyx_n_s_flag
#define __pyx_n_u_float __pyx_mstate_global->__pyx_n_u_float
#define __pyx_n_s_flush __pyx_mstate_global->__pyx_n_s_flush
#define __pyx_kp_u_for __pyx_mstate_global->__pyx_kp_u_for
#define __pyx_n_s_force __pyx_mstate_global->__pyx_n_s_force
#define __pyx_n_s_force_index __pyx_mstate_global->__pyx_n_s_force_index
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_kp_u_from_VCF __pyx_mstate_global->__pyx_kp_u_from_VCF
#define __pyx_n_s_from_dict __pyx_mstate_global->__pyx_n_s_from_dict
#define __pyx_n_s_fullmatch __pyx_mstate_global->__pyx_n_s_fullmatch
#define __pyx_n_s_functools __pyx_mstate_global->__pyx_n_s_functools
#define __pyx_n_s_gc __pyx_mstate_global->__pyx_n_s_gc
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getLogger __pyx_mstate_global->__pyx_n_s_getLogger
#define __pyx_n_s_get_degree __pyx_mstate_global->__pyx_n_s_get_degree
#define __pyx_n_s_get_identity __pyx_mstate_global->__pyx_n_s_get_identity
#define __pyx_n_s_get_orgs __pyx_mstate_global->__pyx_n_s_get_orgs
#define __pyx_n_s_get_orgs_from_df __pyx_mstate_global->__pyx_n_s_get_orgs_from_df
#define __pyx_n_s_getlogger __pyx_mstate_global->__pyx_n_s_getlogger
#define __pyx_n_s_gettmpfile __pyx_mstate_global->__pyx_n_s_gettmpfile
#define __pyx_kp_u_gz __pyx_mstate_global->__pyx_kp_u_gz
#define __pyx_n_s_gzip __pyx_mstate_global->__pyx_n_s_gzip
#define __pyx_n_s_gzopen __pyx_mstate_global->__pyx_n_s_gzopen
#define __pyx_n_s_h __pyx_mstate_global->__pyx_n_s_h
#define __pyx_n_s_header __pyx_mstate_global->__pyx_n_s_header
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_kp_u_id_not_matching_in __pyx_mstate_global->__pyx_kp_u_id_not_matching_in
#define __pyx_n_s_iden __pyx_mstate_global->__pyx_n_s_iden
#define __pyx_n_u_iden __pyx_mstate_global->__pyx_n_u_iden
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_kp_u_in __pyx_mstate_global->__pyx_kp_u_in
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_u_index __pyx_mstate_global->__pyx_n_u_index
#define __pyx_n_s_index_filename __pyx_mstate_global->__pyx_n_s_index_filename
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_inpath __pyx_mstate_global->__pyx_n_s_inpath
#define __pyx_n_s_inplace __pyx_mstate_global->__pyx_n_s_inplace
#define __pyx_kp_u_into __pyx_mstate_global->__pyx_kp_u_into
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_inv __pyx_mstate_global->__pyx_n_s_is_inv
#define __pyx_kp_u_is_not_a_valid_annotation_for_a __pyx_mstate_global->__pyx_kp_u_is_not_a_valid_annotation_for_a
#define __pyx_kp_u_is_repeated __pyx_mstate_global->__pyx_kp_u_is_repeated
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isgzip __pyx_mstate_global->__pyx_n_s_isgzip
#define __pyx_n_s_issubset __pyx_mstate_global->__pyx_n_s_issubset
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_iterrows __pyx_mstate_global->__pyx_n_s_iterrows
#define __pyx_n_s_j __pyx_mstate_global->__pyx_n_s_j
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_keep_nonsyn_calls __pyx_mstate_global->__pyx_n_s_keep_nonsyn_calls
#define __pyx_n_s_keep_original __pyx_mstate_global->__pyx_n_s_keep_original
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_s_l __pyx_mstate_global->__pyx_n_s_l
#define __pyx_n_s_line __pyx_mstate_global->__pyx_n_s_line
#define __pyx_n_s_loc __pyx_mstate_global->__pyx_n_s_loc
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_logging __pyx_mstate_global->__pyx_n_s_logging
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_map __pyx_mstate_global->__pyx_n_s_map
#define __pyx_kp_u_merge_vcf_records_Adding __pyx_mstate_global->__pyx_kp_u_merge_vcf_records_Adding
#define __pyx_n_s_merge_vcf_records_locals_lambda __pyx_mstate_global->__pyx_n_s_merge_vcf_records_locals_lambda
#define __pyx_kp_u_merge_vcfs_Adding __pyx_mstate_global->__pyx_kp_u_merge_vcfs_Adding
#define __pyx_n_s_msyd __pyx_mstate_global->__pyx_n_s_msyd
#define __pyx_n_s_msyd_cigar __pyx_mstate_global->__pyx_n_s_msyd_cigar
#define __pyx_n_s_msyd_coords __pyx_mstate_global->__pyx_n_s_msyd_coords
#define __pyx_n_s_msyd_io __pyx_mstate_global->__pyx_n_s_msyd_io
#define __pyx_kp_s_msyd_pyxfiles_io_pyx __pyx_mstate_global->__pyx_kp_s_msyd_pyxfiles_io_pyx
#define __pyx_n_s_msyd_util __pyx_mstate_global->__pyx_n_s_msyd_util
#define __pyx_n_s_msyd_vars __pyx_mstate_global->__pyx_n_s_msyd_vars
#define __pyx_n_s_multiprocessing __pyx_mstate_global->__pyx_n_s_multiprocessing
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_new_record __pyx_mstate_global->__pyx_n_s_new_record
#define __pyx_n_s_no_complex __pyx_mstate_global->__pyx_n_s_no_complex
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_oldref __pyx_mstate_global->__pyx_n_s_oldref
#define __pyx_n_s_opath __pyx_mstate_global->__pyx_n_s_opath
#define __pyx_n_s_open __pyx_mstate_global->__pyx_n_s_open
#define __pyx_n_s_org __pyx_mstate_global->__pyx_n_s_org
#define __pyx_n_s_orient __pyx_mstate_global->__pyx_n_s_orient
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_out __pyx_mstate_global->__pyx_n_s_out
#define __pyx_n_s_outf __pyx_mstate_global->__pyx_n_s_outf
#define __pyx_n_s_outpath __pyx_mstate_global->__pyx_n_s_outpath
#define __pyx_n_s_ovcf __pyx_mstate_global->__pyx_n_s_ovcf
#define __pyx_n_s_paf __pyx_mstate_global->__pyx_n_s_paf
#define __pyx_n_s_pandas __pyx_mstate_global->__pyx_n_s_pandas
#define __pyx_n_s_partial __pyx_mstate_global->__pyx_n_s_partial
#define __pyx_n_s_pd __pyx_mstate_global->__pyx_n_s_pd
#define __pyx_n_s_pool __pyx_mstate_global->__pyx_n_s_pool
#define __pyx_n_s_pos __pyx_mstate_global->__pyx_n_s_pos
#define __pyx_n_s_preset __pyx_mstate_global->__pyx_n_s_preset
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_pysam __pyx_mstate_global->__pyx_n_s_pysam
#define __pyx_n_s_qe __pyx_mstate_global->__pyx_n_s_qe
#define __pyx_n_u_qry __pyx_mstate_global->__pyx_n_u_qry
#define __pyx_n_s_qry_prim __pyx_mstate_global->__pyx_n_s_qry_prim
#define __pyx_n_s_qryname __pyx_mstate_global->__pyx_n_s_qryname
#define __pyx_n_s_qrynames __pyx_mstate_global->__pyx_n_s_qrynames
#define __pyx_n_s_qryorg __pyx_mstate_global->__pyx_n_s_qryorg
#define __pyx_n_s_qs __pyx_mstate_global->__pyx_n_s_qs
#define __pyx_n_s_query_alignment_length __pyx_mstate_global->__pyx_n_s_query_alignment_length
#define __pyx_n_s_query_name __pyx_mstate_global->__pyx_n_s_query_name
#define __pyx_n_s_query_sequence __pyx_mstate_global->__pyx_n_s_query_sequence
#define __pyx_n_u_r __pyx_mstate_global->__pyx_n_u_r
#define __pyx_n_s_random __pyx_mstate_global->__pyx_n_s_random
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ranges_dict __pyx_mstate_global->__pyx_n_s_ranges_dict
#define __pyx_n_s_rawsyriout __pyx_mstate_global->__pyx_n_s_rawsyriout
#define __pyx_n_u_rb __pyx_mstate_global->__pyx_n_u_rb
#define __pyx_n_s_rc __pyx_mstate_global->__pyx_n_s_rc
#define __pyx_n_s_rcs __pyx_mstate_global->__pyx_n_s_rcs
#define __pyx_n_s_re __pyx_mstate_global->__pyx_n_s_re
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_readPAF __pyx_mstate_global->__pyx_n_s_readPAF
#define __pyx_n_s_readSAMBAM __pyx_mstate_global->__pyx_n_s_readSAMBAM
#define __pyx_n_s_read_pff __pyx_mstate_global->__pyx_n_s_read_pff
#define __pyx_n_s_readfasta __pyx_mstate_global->__pyx_n_s_readfasta
#define __pyx_kp_u_reading_coords_from_INFO_only_su __pyx_mstate_global->__pyx_kp_u_reading_coords_from_INFO_only_su
#define __pyx_kp_u_reading_coords_from_INFO_only_su_2 __pyx_mstate_global->__pyx_kp_u_reading_coords_from_INFO_only_su_2
#define __pyx_n_s_readline __pyx_mstate_global->__pyx_n_s_readline
#define __pyx_n_s_readsyriout __pyx_mstate_global->__pyx_n_s_readsyriout
#define __pyx_n_u_readsyriout __pyx_mstate_global->__pyx_n_u_readsyriout
#define __pyx_n_s_reduce_vcfs __pyx_mstate_global->__pyx_n_s_reduce_vcfs
#define __pyx_kp_u_reduce_vcfs_called_with_empty_vc __pyx_mstate_global->__pyx_kp_u_reduce_vcfs_called_with_empty_vc
#define __pyx_kp_u_reduce_vcfs_called_with_only_one __pyx_mstate_global->__pyx_kp_u_reduce_vcfs_called_with_only_one
#define __pyx_n_s_ref __pyx_mstate_global->__pyx_n_s_ref
#define __pyx_n_u_ref __pyx_mstate_global->__pyx_n_u_ref
#define __pyx_n_s_ref_prim __pyx_mstate_global->__pyx_n_s_ref_prim
#define __pyx_n_s_reference_end __pyx_mstate_global->__pyx_n_s_reference_end
#define __pyx_n_s_reference_name __pyx_mstate_global->__pyx_n_s_reference_name
#define __pyx_n_s_reference_start __pyx_mstate_global->__pyx_n_s_reference_start
#define __pyx_n_s_reforg __pyx_mstate_global->__pyx_n_s_reforg
#define __pyx_n_s_replace __pyx_mstate_global->__pyx_n_s_replace
#define __pyx_n_s_round __pyx_mstate_global->__pyx_n_s_round
#define __pyx_n_s_rs __pyx_mstate_global->__pyx_n_s_rs
#define __pyx_n_u_rt __pyx_mstate_global->__pyx_n_u_rt
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_samples __pyx_mstate_global->__pyx_n_s_samples
#define __pyx_n_s_samtocoords __pyx_mstate_global->__pyx_n_s_samtocoords
#define __pyx_n_s_save_cigars __pyx_mstate_global->__pyx_n_s_save_cigars
#define __pyx_n_s_save_to_pff __pyx_mstate_global->__pyx_n_s_save_to_pff
#define __pyx_n_s_save_to_vcf __pyx_mstate_global->__pyx_n_s_save_to_vcf
#define __pyx_n_s_scipy_stats __pyx_mstate_global->__pyx_n_s_scipy_stats
#define __pyx_n_s_seed __pyx_mstate_global->__pyx_n_s_seed
#define __pyx_n_s_seq __pyx_mstate_global->__pyx_n_s_seq
#define __pyx_n_u_seq __pyx_mstate_global->__pyx_n_u_seq
#define __pyx_n_s_sort_values __pyx_mstate_global->__pyx_n_s_sort_values
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_split __pyx_mstate_global->__pyx_n_s_split
#define __pyx_n_s_splitlines __pyx_mstate_global->__pyx_n_s_splitlines
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_u_start __pyx_mstate_global->__pyx_n_u_start
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_strip __pyx_mstate_global->__pyx_n_s_strip
#define __pyx_n_s_subset_samples __pyx_mstate_global->__pyx_n_s_subset_samples
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_n_s_synorg __pyx_mstate_global->__pyx_n_s_synorg
#define __pyx_n_s_syns __pyx_mstate_global->__pyx_n_s_syns
#define __pyx_kp_u_syri_vcf __pyx_mstate_global->__pyx_kp_u_syri_vcf
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_tabix_index __pyx_mstate_global->__pyx_n_s_tabix_index
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_kp_u_to_VCF_Check_if_the_chromosome __pyx_mstate_global->__pyx_kp_u_to_VCF_Check_if_the_chromosome
#define __pyx_kp_u_to_header __pyx_mstate_global->__pyx_kp_u_to_header
#define __pyx_n_s_to_pff __pyx_mstate_global->__pyx_n_s_to_pff
#define __pyx_n_s_to_string __pyx_mstate_global->__pyx_n_s_to_string
#define __pyx_n_s_type __pyx_mstate_global->__pyx_n_s_type
#define __pyx_n_u_type __pyx_mstate_global->__pyx_n_u_type
#define __pyx_n_s_unique __pyx_mstate_global->__pyx_n_s_unique
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_util __pyx_mstate_global->__pyx_n_s_util
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_kp_u_values_were_overwritten __pyx_mstate_global->__pyx_kp_u_values_were_overwritten
#define __pyx_n_u_vartype __pyx_mstate_global->__pyx_n_u_vartype
#define __pyx_n_u_vcf __pyx_mstate_global->__pyx_n_u_vcf
#define __pyx_n_s_vcfin __pyx_mstate_global->__pyx_n_s_vcfin
#define __pyx_n_s_vcfout __pyx_mstate_global->__pyx_n_s_vcfout
#define __pyx_n_s_vcfs __pyx_mstate_global->__pyx_n_s_vcfs
#define __pyx_n_u_w __pyx_mstate_global->__pyx_n_u_w
#define __pyx_n_s_warning __pyx_mstate_global->__pyx_n_s_warning
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_u_x __pyx_mstate_global->__pyx_n_u_x
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_6 __pyx_mstate_global->__pyx_int_6
#define __pyx_int_7 __pyx_mstate_global->__pyx_int_7
#define __pyx_int_8 __pyx_mstate_global->__pyx_int_8
#define __pyx_int_9 __pyx_mstate_global->__pyx_int_9
#define __pyx_int_10 __pyx_mstate_global->__pyx_int_10
#define __pyx_int_12 __pyx_mstate_global->__pyx_int_12
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_256 __pyx_mstate_global->__pyx_int_256
#define __pyx_int_99999999999 __pyx_mstate_global->__pyx_int_99999999999
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_k__40 __pyx_mstate_global->__pyx_k__40
#define __pyx_k__41 __pyx_mstate_global->__pyx_k__41
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_slice__5 __pyx_mstate_global->__pyx_slice__5
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_slice__10 __pyx_mstate_global->__pyx_slice__10
#define __pyx_slice__11 __pyx_mstate_global->__pyx_slice__11
#define __pyx_slice__15 __pyx_mstate_global->__pyx_slice__15
#define __pyx_slice__27 __pyx_mstate_global->__pyx_slice__27
#define __pyx_slice__29 __pyx_mstate_global->__pyx_slice__29
#define __pyx_slice__30 __pyx_mstate_global->__pyx_slice__30
#define __pyx_slice__44 __pyx_mstate_global->__pyx_slice__44
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
/* #### Code section: module_code ### */

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":248
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":245
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":254
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":251
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":260
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":268
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":263
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":275
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":271
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":281
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":278
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":290
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":284
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":793
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":795
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":970
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":971
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":972
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":970
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":974
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":975
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":976
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":977
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":976
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":978
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":974
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":982
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":983
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":984
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 984, __pyx_L3_error)

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":983
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":985
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 985, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":986
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 986, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 986, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":983
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":982
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":988
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":989
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":990
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 990, __pyx_L3_error)

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":989
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":991
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 991, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":992
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 992, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 992, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":989
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":988
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":994
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":996
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 996, __pyx_L3_error)

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":997
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 997, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":998
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 998, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 998, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":994
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1001
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1013
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1001
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1016
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1028
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1016
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1031
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1038
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1031
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1041
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1045
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1041
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1048
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1052
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":1048
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":38
 * ## copied over from func
 * 
 * def cgtpl(cg):             # <<<<<<<<<<<<<<
 *     """
 *     Takes a cigar string as input and returns a cigar tuple
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_1cgtpl(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_cgtpl, "\n    Takes a cigar string as input and returns a cigar tuple\n    ");
static PyMethodDef __pyx_mdef_4msyd_2io_1cgtpl = {"cgtpl", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_1cgtpl, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_cgtpl};
static PyObject *__pyx_pw_4msyd_2io_1cgtpl(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cgtpl (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cg,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cg)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cgtpl") < 0)) __PYX_ERR(0, 38, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cg = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cgtpl", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 38, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.cgtpl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_cgtpl(__pyx_self, __pyx_v_cg);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_cgtpl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cg) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_7genexpr__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned char const *__pyx_t_1;
  unsigned char const *__pyx_t_2;
  unsigned char const *__pyx_t_3;
  unsigned char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cgtpl", 0);
  __Pyx_INCREF(__pyx_v_cg);

  /* "msyd/pyxfiles/io.pyx":42
 *     Takes a cigar string as input and returns a cigar tuple
 *     """
 *     for i in "MIDNSHPX=":             # <<<<<<<<<<<<<<
 *         cg = cg.replace(i, ';'+i+',')
 *     return [i.split(';') for i in cg.split(',')[:-1]]
 */
  __pyx_t_2 = ((unsigned char const *)((char const *)"MIDNSHPX="));
  __pyx_t_3 = (__pyx_t_2 + 9);
  for (__pyx_t_4 = __pyx_t_2; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyUnicode_FromOrdinal((*__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":43
 *     """
 *     for i in "MIDNSHPX=":
 *         cg = cg.replace(i, ';'+i+',')             # <<<<<<<<<<<<<<
 *     return [i.split(';') for i in cg.split(',')[:-1]]
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_replace); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyNumber_Add(__pyx_kp_u__3, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_u__4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_v_i, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_cg, __pyx_t_5);
    __pyx_t_5 = 0;
  }

  /* "msyd/pyxfiles/io.pyx":44
 *     for i in "MIDNSHPX=":
 *         cg = cg.replace(i, ';'+i+',')
 *     return [i.split(';') for i in cg.split(',')[:-1]]             # <<<<<<<<<<<<<<
 * 
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u__4};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 44, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_t_6, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
      __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 44, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 44, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 44, __pyx_L7_error)
            #endif
            if (__pyx_t_10 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 44, __pyx_L7_error)
          #else
          __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 44, __pyx_L7_error)
            #endif
            if (__pyx_t_10 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 44, __pyx_L7_error)
          #else
          __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_11(__pyx_t_6);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 44, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_i, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 44, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_kp_u__3};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 44, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":38
 * ## copied over from func
 * 
 * def cgtpl(cg):             # <<<<<<<<<<<<<<
 *     """
 *     Takes a cigar string as input and returns a cigar tuple
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("msyd.io.cgtpl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":47
 * 
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 * def readfasta(f):             # <<<<<<<<<<<<<<
 *     out = {}
 *     chrid = ''
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_3readfasta(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_3readfasta = {"readfasta", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_3readfasta, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_3readfasta(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_f = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readfasta (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_f)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "readfasta") < 0)) __PYX_ERR(0, 47, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_f = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readfasta", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 47, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_2readfasta(__pyx_self, __pyx_v_f);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_2readfasta(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {
  PyObject *__pyx_v_out = NULL;
  PyObject *__pyx_v_chrid = NULL;
  PyObject *__pyx_v_chrseq = NULL;
  PyObject *__pyx_v_fin = NULL;
  int __pyx_v_isgzip;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  char const *__pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readfasta", 1);

  /* "msyd/pyxfiles/io.pyx":48
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 * def readfasta(f):
 *     out = {}             # <<<<<<<<<<<<<<
 *     chrid = ''
 *     chrseq = deque()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":49
 * def readfasta(f):
 *     out = {}
 *     chrid = ''             # <<<<<<<<<<<<<<
 *     chrseq = deque()
 * 
 */
  __Pyx_INCREF(__pyx_kp_u__6);
  __pyx_v_chrid = __pyx_kp_u__6;

  /* "msyd/pyxfiles/io.pyx":50
 *     out = {}
 *     chrid = ''
 *     chrseq = deque()             # <<<<<<<<<<<<<<
 * 
 *     # Test if the file is Gzipped or not
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_chrseq = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":53
 * 
 *     # Test if the file is Gzipped or not
 *     with gzopen(f, 'rb') as fin:             # <<<<<<<<<<<<<<
 *         try:
 *             fin.read(1)
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_gzopen); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_f, __pyx_n_u_rb};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_fin = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":54
 *     # Test if the file is Gzipped or not
 *     with gzopen(f, 'rb') as fin:
 *         try:             # <<<<<<<<<<<<<<
 *             fin.read(1)
 *             isgzip = True
 */
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_10);
            __Pyx_XGOTREF(__pyx_t_11);
            __Pyx_XGOTREF(__pyx_t_12);
            /*try:*/ {

              /* "msyd/pyxfiles/io.pyx":55
 *     with gzopen(f, 'rb') as fin:
 *         try:
 *             fin.read(1)             # <<<<<<<<<<<<<<
 *             isgzip = True
 *         except BadGzipFile:
 */
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fin, __pyx_n_s_read); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = NULL;
              __pyx_t_4 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_2)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_2);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                  __pyx_t_4 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_int_1};
                __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "msyd/pyxfiles/io.pyx":56
 *         try:
 *             fin.read(1)
 *             isgzip = True             # <<<<<<<<<<<<<<
 *         except BadGzipFile:
 *             isgzip = False
 */
              __pyx_v_isgzip = 1;

              /* "msyd/pyxfiles/io.pyx":54
 *     # Test if the file is Gzipped or not
 *     with gzopen(f, 'rb') as fin:
 *         try:             # <<<<<<<<<<<<<<
 *             fin.read(1)
 *             isgzip = True
 */
            }
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L18_try_end;
            __pyx_L13_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "msyd/pyxfiles/io.pyx":57
 *             fin.read(1)
 *             isgzip = True
 *         except BadGzipFile:             # <<<<<<<<<<<<<<
 *             isgzip = False
 * 
 */
            __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2);
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BadGzipFile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 57, __pyx_L15_except_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_4 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_3, __pyx_t_6);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_ErrRestore(__pyx_t_3, __pyx_t_1, __pyx_t_2);
            __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_2 = 0;
            if (__pyx_t_4) {
              __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 57, __pyx_L15_except_error)
              __Pyx_XGOTREF(__pyx_t_2);
              __Pyx_XGOTREF(__pyx_t_1);
              __Pyx_XGOTREF(__pyx_t_3);

              /* "msyd/pyxfiles/io.pyx":58
 *             isgzip = True
 *         except BadGzipFile:
 *             isgzip = False             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
              __pyx_v_isgzip = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              goto __pyx_L14_exception_handled;
            }
            goto __pyx_L15_except_error;

            /* "msyd/pyxfiles/io.pyx":54
 *     # Test if the file is Gzipped or not
 *     with gzopen(f, 'rb') as fin:
 *         try:             # <<<<<<<<<<<<<<
 *             fin.read(1)
 *             isgzip = True
 */
            __pyx_L15_except_error:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            goto __pyx_L7_error;
            __pyx_L14_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            __pyx_L18_try_end:;
          }

          /* "msyd/pyxfiles/io.pyx":53
 * 
 *     # Test if the file is Gzipped or not
 *     with gzopen(f, 'rb') as fin:             # <<<<<<<<<<<<<<
 *         try:
 *             fin.read(1)
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_3);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_6 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 53, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 53, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 53, __pyx_L9_except_error)
          __pyx_t_14 = (!__pyx_t_13);
          if (unlikely(__pyx_t_14)) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_2);
            __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_2 = 0; 
            __PYX_ERR(0, 53, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_5) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__7, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L24;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L1_error;
    __pyx_L24:;
  }

  /* "msyd/pyxfiles/io.pyx":60
 *             isgzip = False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_9, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":61
 * 
 *     try:
 *         if isgzip:             # <<<<<<<<<<<<<<
 *             with gzopen(f, 'rb') as fin:
 *                 for line in fin:
 */
      if (__pyx_v_isgzip) {

        /* "msyd/pyxfiles/io.pyx":62
 *     try:
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:             # <<<<<<<<<<<<<<
 *                 for line in fin:
 *                     if b'>' in line:
 */
        /*with:*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gzopen); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_f, __pyx_n_u_rb};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 62, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_3 = __pyx_t_1;
          __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          /*try:*/ {
            {
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
              __Pyx_XGOTREF(__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_11);
              __Pyx_XGOTREF(__pyx_t_10);
              /*try:*/ {
                __Pyx_XDECREF_SET(__pyx_v_fin, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":63
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:
 *                 for line in fin:             # <<<<<<<<<<<<<<
 *                     if b'>' in line:
 *                         if chrid != '':
 */
                if (likely(PyList_CheckExact(__pyx_v_fin)) || PyTuple_CheckExact(__pyx_v_fin)) {
                  __pyx_t_3 = __pyx_v_fin; __Pyx_INCREF(__pyx_t_3);
                  __pyx_t_15 = 0;
                  __pyx_t_16 = NULL;
                } else {
                  __pyx_t_15 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_fin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L36_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 63, __pyx_L36_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_16)) {
                    if (likely(PyList_CheckExact(__pyx_t_3))) {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 63, __pyx_L36_error)
                        #endif
                        if (__pyx_t_15 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 63, __pyx_L36_error)
                      #else
                      __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      #endif
                    } else {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 63, __pyx_L36_error)
                        #endif
                        if (__pyx_t_15 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 63, __pyx_L36_error)
                      #else
                      __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      #endif
                    }
                  } else {
                    __pyx_t_2 = __pyx_t_16(__pyx_t_3);
                    if (unlikely(!__pyx_t_2)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(0, 63, __pyx_L36_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_2);
                  }
                  __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_2);
                  __pyx_t_2 = 0;

                  /* "msyd/pyxfiles/io.pyx":64
 *             with gzopen(f, 'rb') as fin:
 *                 for line in fin:
 *                     if b'>' in line:             # <<<<<<<<<<<<<<
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)
 */
                  __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_kp_b__8, __pyx_v_line, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 64, __pyx_L36_error)
                  if (__pyx_t_14) {

                    /* "msyd/pyxfiles/io.pyx":65
 *                 for line in fin:
 *                     if b'>' in line:
 *                         if chrid != '':             # <<<<<<<<<<<<<<
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 */
                    __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_chrid, __pyx_kp_u__6, Py_NE)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 65, __pyx_L36_error)
                    if (__pyx_t_14) {

                      /* "msyd/pyxfiles/io.pyx":66
 *                     if b'>' in line:
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)             # <<<<<<<<<<<<<<
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 *                             chrseq = deque()
 */
                      __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__6, __pyx_v_chrseq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      if (unlikely((PyDict_SetItem(__pyx_v_out, __pyx_v_chrid, __pyx_t_2) < 0))) __PYX_ERR(0, 66, __pyx_L36_error)
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                      /* "msyd/pyxfiles/io.pyx":67
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()             # <<<<<<<<<<<<<<
 *                             chrseq = deque()
 *                         else:
 */
                      __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 67, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_18);
                      __pyx_t_19 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_18))) {
                        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
                        if (likely(__pyx_t_19)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                          __Pyx_INCREF(__pyx_t_19);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_18, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_19, NULL};
                        __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                        if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 67, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_17);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      }
                      __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_split); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 67, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_18);
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_18))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_18);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_18, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_kp_b__8};
                        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_6);
                        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      }
                      __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 67, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_18);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      __pyx_t_18 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_18)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_18);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_kp_b__9};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      }
                      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_decode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_6 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_6)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_6);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      }
                      __Pyx_DECREF_SET(__pyx_v_chrid, __pyx_t_2);
                      __pyx_t_2 = 0;

                      /* "msyd/pyxfiles/io.pyx":68
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 *                             chrseq = deque()             # <<<<<<<<<<<<<<
 *                         else:
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 */
                      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_6 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (unlikely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_6)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_6);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      }
                      __Pyx_DECREF_SET(__pyx_v_chrseq, __pyx_t_2);
                      __pyx_t_2 = 0;

                      /* "msyd/pyxfiles/io.pyx":65
 *                 for line in fin:
 *                     if b'>' in line:
 *                         if chrid != '':             # <<<<<<<<<<<<<<
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 */
                      goto __pyx_L45;
                    }

                    /* "msyd/pyxfiles/io.pyx":70
 *                             chrseq = deque()
 *                         else:
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()             # <<<<<<<<<<<<<<
 *                         if chrid in out.keys():
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 */
                    /*else*/ {
                      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 70, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __pyx_t_19 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_17))) {
                        __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_17);
                        if (likely(__pyx_t_19)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                          __Pyx_INCREF(__pyx_t_19);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_17, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_19, NULL};
                        __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                        if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 70, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_18);
                        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      }
                      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 70, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      __pyx_t_18 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_17))) {
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
                        if (likely(__pyx_t_18)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                          __Pyx_INCREF(__pyx_t_18);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_17, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_kp_b__8};
                        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_6);
                        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      }
                      __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 70, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_kp_b__9};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      }
                      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_decode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_6 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_6)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_6);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      }
                      __Pyx_DECREF_SET(__pyx_v_chrid, __pyx_t_2);
                      __pyx_t_2 = 0;
                    }
                    __pyx_L45:;

                    /* "msyd/pyxfiles/io.pyx":71
 *                         else:
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 *                         if chrid in out.keys():             # <<<<<<<<<<<<<<
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 *                             raise ValueError()
 */
                    __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_out); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_14 = (__Pyx_PySequence_ContainsTF(__pyx_v_chrid, __pyx_t_2, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 71, __pyx_L36_error)
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    if (unlikely(__pyx_t_14)) {

                      /* "msyd/pyxfiles/io.pyx":72
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 *                         if chrid in out.keys():
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))             # <<<<<<<<<<<<<<
 *                             raise ValueError()
 *                     else:
 */
                      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 72, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Duplicate_chromosome_IDs_are_no, __pyx_n_s_format); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 72, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __pyx_t_18 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_17))) {
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
                        if (likely(__pyx_t_18)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                          __Pyx_INCREF(__pyx_t_18);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_17, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_v_chrid};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      }
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_1};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      }
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                      /* "msyd/pyxfiles/io.pyx":73
 *                         if chrid in out.keys():
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 *                             raise ValueError()             # <<<<<<<<<<<<<<
 *                     else:
 *                         chrseq.append(line.strip().decode())
 */
                      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __PYX_ERR(0, 73, __pyx_L36_error)

                      /* "msyd/pyxfiles/io.pyx":71
 *                         else:
 *                             chrid = line.strip().split(b'>')[1].split(b' ')[0].decode()
 *                         if chrid in out.keys():             # <<<<<<<<<<<<<<
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 *                             raise ValueError()
 */
                    }

                    /* "msyd/pyxfiles/io.pyx":64
 *             with gzopen(f, 'rb') as fin:
 *                 for line in fin:
 *                     if b'>' in line:             # <<<<<<<<<<<<<<
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)
 */
                    goto __pyx_L44;
                  }

                  /* "msyd/pyxfiles/io.pyx":75
 *                             raise ValueError()
 *                     else:
 *                         chrseq.append(line.strip().decode())             # <<<<<<<<<<<<<<
 *         else:
 *             with open(f, 'r') as fin:
 */
                  /*else*/ {
                    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_17 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_1))) {
                      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
                      if (likely(__pyx_t_17)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                        __Pyx_INCREF(__pyx_t_17);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_1, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_17, NULL};
                      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_decode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                    __pyx_t_6 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_1))) {
                      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
                      if (likely(__pyx_t_6)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                        __Pyx_INCREF(__pyx_t_6);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_1, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
                      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                    __pyx_t_20 = __Pyx_PyObject_Append(__pyx_v_chrseq, __pyx_t_2); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 75, __pyx_L36_error)
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  }
                  __pyx_L44:;

                  /* "msyd/pyxfiles/io.pyx":63
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:
 *                 for line in fin:             # <<<<<<<<<<<<<<
 *                     if b'>' in line:
 *                         if chrid != '':
 */
                }
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":62
 *     try:
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:             # <<<<<<<<<<<<<<
 *                 for line in fin:
 *                     if b'>' in line:
 */
              }
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              goto __pyx_L41_try_end;
              __pyx_L36_error:;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              /*except:*/ {
                __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L38_except_error)
                __Pyx_XGOTREF(__pyx_t_3);
                __Pyx_XGOTREF(__pyx_t_2);
                __Pyx_XGOTREF(__pyx_t_1);
                __pyx_t_6 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L38_except_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 62, __pyx_L38_except_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_21);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                if (__pyx_t_14 < 0) __PYX_ERR(0, 62, __pyx_L38_except_error)
                __pyx_t_13 = (!__pyx_t_14);
                if (unlikely(__pyx_t_13)) {
                  __Pyx_GIVEREF(__pyx_t_3);
                  __Pyx_GIVEREF(__pyx_t_2);
                  __Pyx_XGIVEREF(__pyx_t_1);
                  __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_2, __pyx_t_1);
                  __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; 
                  __PYX_ERR(0, 62, __pyx_L38_except_error)
                }
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                goto __pyx_L37_exception_handled;
              }
              __pyx_L38_except_error:;
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
              goto __pyx_L25_error;
              __pyx_L37_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_11, __pyx_t_10);
              __pyx_L41_try_end:;
            }
          }
          /*finally:*/ {
            /*normal exit:*/{
              if (__pyx_t_7) {
                __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__7, NULL);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 62, __pyx_L25_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              }
              goto __pyx_L35;
            }
            __pyx_L35:;
          }
          goto __pyx_L51;
          __pyx_L32_error:;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L25_error;
          __pyx_L51:;
        }

        /* "msyd/pyxfiles/io.pyx":61
 * 
 *     try:
 *         if isgzip:             # <<<<<<<<<<<<<<
 *             with gzopen(f, 'rb') as fin:
 *                 for line in fin:
 */
        goto __pyx_L31;
      }

      /* "msyd/pyxfiles/io.pyx":77
 *                         chrseq.append(line.strip().decode())
 *         else:
 *             with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *                 for line in fin:
 *                     if '>' in line:
 */
      /*else*/ {
        /*with:*/ {
          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_v_f);
          __Pyx_GIVEREF(__pyx_v_f);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_f)) __PYX_ERR(0, 77, __pyx_L25_error);
          __Pyx_INCREF(__pyx_n_u_r);
          __Pyx_GIVEREF(__pyx_n_u_r);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_r)) __PYX_ERR(0, 77, __pyx_L25_error);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 77, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L52_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L52_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_3 = __pyx_t_1;
          __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          /*try:*/ {
            {
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
              __Pyx_XGOTREF(__pyx_t_10);
              __Pyx_XGOTREF(__pyx_t_11);
              __Pyx_XGOTREF(__pyx_t_12);
              /*try:*/ {
                __Pyx_XDECREF_SET(__pyx_v_fin, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":78
 *         else:
 *             with open(f, 'r') as fin:
 *                 for line in fin:             # <<<<<<<<<<<<<<
 *                     if '>' in line:
 *                         if chrid != '':
 */
                if (likely(PyList_CheckExact(__pyx_v_fin)) || PyTuple_CheckExact(__pyx_v_fin)) {
                  __pyx_t_3 = __pyx_v_fin; __Pyx_INCREF(__pyx_t_3);
                  __pyx_t_15 = 0;
                  __pyx_t_16 = NULL;
                } else {
                  __pyx_t_15 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_fin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L56_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_16 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 78, __pyx_L56_error)
                }
                for (;;) {
                  if (likely(!__pyx_t_16)) {
                    if (likely(PyList_CheckExact(__pyx_t_3))) {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 78, __pyx_L56_error)
                        #endif
                        if (__pyx_t_15 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 78, __pyx_L56_error)
                      #else
                      __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      #endif
                    } else {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 78, __pyx_L56_error)
                        #endif
                        if (__pyx_t_15 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely((0 < 0))) __PYX_ERR(0, 78, __pyx_L56_error)
                      #else
                      __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      #endif
                    }
                  } else {
                    __pyx_t_2 = __pyx_t_16(__pyx_t_3);
                    if (unlikely(!__pyx_t_2)) {
                      PyObject* exc_type = PyErr_Occurred();
                      if (exc_type) {
                        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                        else __PYX_ERR(0, 78, __pyx_L56_error)
                      }
                      break;
                    }
                    __Pyx_GOTREF(__pyx_t_2);
                  }
                  __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_2);
                  __pyx_t_2 = 0;

                  /* "msyd/pyxfiles/io.pyx":79
 *             with open(f, 'r') as fin:
 *                 for line in fin:
 *                     if '>' in line:             # <<<<<<<<<<<<<<
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)
 */
                  __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u__8, __pyx_v_line, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 79, __pyx_L56_error)
                  if (__pyx_t_13) {

                    /* "msyd/pyxfiles/io.pyx":80
 *                 for line in fin:
 *                     if '>' in line:
 *                         if chrid != '':             # <<<<<<<<<<<<<<
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 */
                    __pyx_t_13 = (__Pyx_PyUnicode_Equals(__pyx_v_chrid, __pyx_kp_u__6, Py_NE)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 80, __pyx_L56_error)
                    if (__pyx_t_13) {

                      /* "msyd/pyxfiles/io.pyx":81
 *                     if '>' in line:
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)             # <<<<<<<<<<<<<<
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 *                             chrseq = deque()
 */
                      __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__6, __pyx_v_chrseq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      if (unlikely((PyDict_SetItem(__pyx_v_out, __pyx_v_chrid, __pyx_t_2) < 0))) __PYX_ERR(0, 81, __pyx_L56_error)
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                      /* "msyd/pyxfiles/io.pyx":82
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split('>')[1].split(' ')[0]             # <<<<<<<<<<<<<<
 *                             chrseq = deque()
 *                         else:
 */
                      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 82, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __pyx_t_18 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_17))) {
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
                        if (likely(__pyx_t_18)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                          __Pyx_INCREF(__pyx_t_18);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_17, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_18, NULL};
                        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 82, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_6);
                        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      }
                      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 82, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_6 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_17))) {
                        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_17);
                        if (likely(__pyx_t_6)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                          __Pyx_INCREF(__pyx_t_6);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_17, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__8};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      }
                      __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 82, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_1))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_1, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_kp_u__9};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      }
                      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __Pyx_DECREF_SET(__pyx_v_chrid, __pyx_t_1);
                      __pyx_t_1 = 0;

                      /* "msyd/pyxfiles/io.pyx":83
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 *                             chrseq = deque()             # <<<<<<<<<<<<<<
 *                         else:
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 */
                      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (unlikely(PyMethod_Check(__pyx_t_2))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_2);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_2, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, NULL};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      }
                      __Pyx_DECREF_SET(__pyx_v_chrseq, __pyx_t_1);
                      __pyx_t_1 = 0;

                      /* "msyd/pyxfiles/io.pyx":80
 *                 for line in fin:
 *                     if '>' in line:
 *                         if chrid != '':             # <<<<<<<<<<<<<<
 *                             out[chrid] = ''.join(chrseq)
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 */
                      goto __pyx_L65;
                    }

                    /* "msyd/pyxfiles/io.pyx":85
 *                             chrseq = deque()
 *                         else:
 *                             chrid = line.strip().split('>')[1].split(' ')[0]             # <<<<<<<<<<<<<<
 *                         if chrid in out.keys():
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 */
                    /*else*/ {
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 85, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __pyx_t_18 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_18)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_18);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_18, NULL};
                        __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 85, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_17);
                        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      }
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 85, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_kp_u__8};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      }
                      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 85, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_t_6 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_2))) {
                        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
                        if (likely(__pyx_t_6)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                          __Pyx_INCREF(__pyx_t_6);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_2, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__9};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      }
                      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF_SET(__pyx_v_chrid, __pyx_t_2);
                      __pyx_t_2 = 0;
                    }
                    __pyx_L65:;

                    /* "msyd/pyxfiles/io.pyx":86
 *                         else:
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 *                         if chrid in out.keys():             # <<<<<<<<<<<<<<
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 *                             raise ValueError()
 */
                    __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_out); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L56_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_v_chrid, __pyx_t_2, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 86, __pyx_L56_error)
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    if (unlikely(__pyx_t_13)) {

                      /* "msyd/pyxfiles/io.pyx":87
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 *                         if chrid in out.keys():
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))             # <<<<<<<<<<<<<<
 *                             raise ValueError()
 *                     else:
 */
                      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Duplicate_chromosome_IDs_are_no, __pyx_n_s_format); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 87, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __pyx_t_18 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_17))) {
                        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
                        if (likely(__pyx_t_18)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                          __Pyx_INCREF(__pyx_t_18);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_17, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_v_chrid};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      }
                      __pyx_t_17 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_17)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_17);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_1};
                        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L56_error)
                        __Pyx_GOTREF(__pyx_t_2);
                        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      }
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                      /* "msyd/pyxfiles/io.pyx":88
 *                         if chrid in out.keys():
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 *                             raise ValueError()             # <<<<<<<<<<<<<<
 *                     else:
 *                         chrseq.append(line.strip())
 */
                      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __PYX_ERR(0, 88, __pyx_L56_error)

                      /* "msyd/pyxfiles/io.pyx":86
 *                         else:
 *                             chrid = line.strip().split('>')[1].split(' ')[0]
 *                         if chrid in out.keys():             # <<<<<<<<<<<<<<
 *                             logger.error(" Duplicate chromosome IDs are not accepted. Chromosome ID {} is duplicated. Provided chromosome with unique IDs".format(chrid))
 *                             raise ValueError()
 */
                    }

                    /* "msyd/pyxfiles/io.pyx":79
 *             with open(f, 'r') as fin:
 *                 for line in fin:
 *                     if '>' in line:             # <<<<<<<<<<<<<<
 *                         if chrid != '':
 *                             out[chrid] = ''.join(chrseq)
 */
                    goto __pyx_L64;
                  }

                  /* "msyd/pyxfiles/io.pyx":90
 *                             raise ValueError()
 *                     else:
 *                         chrseq.append(line.strip())             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         raise Exception(e)
 */
                  /*else*/ {
                    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 90, __pyx_L56_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    __pyx_t_1 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_6))) {
                      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
                      if (likely(__pyx_t_1)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                        __Pyx_INCREF(__pyx_t_1);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_6, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
                      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                    }
                    __pyx_t_20 = __Pyx_PyObject_Append(__pyx_v_chrseq, __pyx_t_2); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 90, __pyx_L56_error)
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  }
                  __pyx_L64:;

                  /* "msyd/pyxfiles/io.pyx":78
 *         else:
 *             with open(f, 'r') as fin:
 *                 for line in fin:             # <<<<<<<<<<<<<<
 *                     if '>' in line:
 *                         if chrid != '':
 */
                }
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":77
 *                         chrseq.append(line.strip().decode())
 *         else:
 *             with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *                 for line in fin:
 *                     if '>' in line:
 */
              }
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              goto __pyx_L61_try_end;
              __pyx_L56_error:;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              /*except:*/ {
                __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_6) < 0) __PYX_ERR(0, 77, __pyx_L58_except_error)
                __Pyx_XGOTREF(__pyx_t_3);
                __Pyx_XGOTREF(__pyx_t_2);
                __Pyx_XGOTREF(__pyx_t_6);
                __pyx_t_1 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L58_except_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 77, __pyx_L58_except_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_21);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                if (__pyx_t_13 < 0) __PYX_ERR(0, 77, __pyx_L58_except_error)
                __pyx_t_14 = (!__pyx_t_13);
                if (unlikely(__pyx_t_14)) {
                  __Pyx_GIVEREF(__pyx_t_3);
                  __Pyx_GIVEREF(__pyx_t_2);
                  __Pyx_XGIVEREF(__pyx_t_6);
                  __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_2, __pyx_t_6);
                  __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_6 = 0; 
                  __PYX_ERR(0, 77, __pyx_L58_except_error)
                }
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                goto __pyx_L57_exception_handled;
              }
              __pyx_L58_except_error:;
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
              goto __pyx_L25_error;
              __pyx_L57_exception_handled:;
              __Pyx_XGIVEREF(__pyx_t_10);
              __Pyx_XGIVEREF(__pyx_t_11);
              __Pyx_XGIVEREF(__pyx_t_12);
              __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
              __pyx_L61_try_end:;
            }
          }
          /*finally:*/ {
            /*normal exit:*/{
              if (__pyx_t_7) {
                __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__7, NULL);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 77, __pyx_L25_error)
                __Pyx_GOTREF(__pyx_t_12);
                __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              }
              goto __pyx_L55;
            }
            __pyx_L55:;
          }
          goto __pyx_L71;
          __pyx_L52_error:;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L25_error;
          __pyx_L71:;
        }
      }
      __pyx_L31:;

      /* "msyd/pyxfiles/io.pyx":60
 *             isgzip = False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L30_try_end;
    __pyx_L25_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":91
 *                     else:
 *                         chrseq.append(line.strip())
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise Exception(e)
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 91, __pyx_L27_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_e = __pyx_t_2;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":92
 *                         chrseq.append(line.strip())
 *     except Exception as e:
 *         raise Exception(e)             # <<<<<<<<<<<<<<
 * 
 *     if chrid != '':
 */
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_v_e); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L77_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 92, __pyx_L77_error)
      }

      /* "msyd/pyxfiles/io.pyx":91
 *                     else:
 *                         chrseq.append(line.strip())
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise Exception(e)
 * 
 */
      /*finally:*/ {
        __pyx_L77_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_7 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_21 = 0; __pyx_t_24 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_21, &__pyx_t_24);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_12, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_7);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_24);
          __pyx_t_4 = __pyx_lineno; __pyx_t_22 = __pyx_clineno; __pyx_t_23 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_21, __pyx_t_24);
          }
          __Pyx_XGIVEREF(__pyx_t_7);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ErrRestore(__pyx_t_7, __pyx_t_12, __pyx_t_11);
          __pyx_t_7 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_21 = 0; __pyx_t_24 = 0;
          __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_22; __pyx_filename = __pyx_t_23;
          goto __pyx_L27_except_error;
        }
      }
    }
    goto __pyx_L27_except_error;

    /* "msyd/pyxfiles/io.pyx":60
 *             isgzip = False
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if isgzip:
 *             with gzopen(f, 'rb') as fin:
 */
    __pyx_L27_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_9, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L30_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":94
 *         raise Exception(e)
 * 
 *     if chrid != '':             # <<<<<<<<<<<<<<
 *         out[chrid] = ''.join(chrseq)
 *     # TODO: add check for the validation of input fasta files
 */
  __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_chrid, __pyx_kp_u__6, Py_NE)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 94, __pyx_L1_error)
  if (__pyx_t_14) {

    /* "msyd/pyxfiles/io.pyx":95
 * 
 *     if chrid != '':
 *         out[chrid] = ''.join(chrseq)             # <<<<<<<<<<<<<<
 *     # TODO: add check for the validation of input fasta files
 *     return out
 */
    __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__6, __pyx_v_chrseq); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyDict_SetItem(__pyx_v_out, __pyx_v_chrid, __pyx_t_3) < 0))) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":94
 *         raise Exception(e)
 * 
 *     if chrid != '':             # <<<<<<<<<<<<<<
 *         out[chrid] = ''.join(chrseq)
 *     # TODO: add check for the validation of input fasta files
 */
  }

  /* "msyd/pyxfiles/io.pyx":97
 *         out[chrid] = ''.join(chrseq)
 *     # TODO: add check for the validation of input fasta files
 *     return out             # <<<<<<<<<<<<<<
 * 
 * ### END func SECTION
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":47
 * 
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 * def readfasta(f):             # <<<<<<<<<<<<<<
 *     out = {}
 *     chrid = ''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("msyd.io.readfasta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_chrid);
  __Pyx_XDECREF(__pyx_v_chrseq);
  __Pyx_XDECREF(__pyx_v_fin);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":102
 * 
 * 
 * def samtocoords(f):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('SAM reader')
 *     rc = {}        # Referece chromosomes
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_5samtocoords(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_5samtocoords = {"samtocoords", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_5samtocoords, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_5samtocoords(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_f = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("samtocoords (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_f)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "samtocoords") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_f = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("samtocoords", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.samtocoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_4samtocoords(__pyx_self, __pyx_v_f);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_4samtocoords(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {
  PyObject *__pyx_v_logger = NULL;
  PyObject *__pyx_v_rc = NULL;
  PyObject *__pyx_v_rcs = NULL;
  PyObject *__pyx_v_al = NULL;
  PyObject *__pyx_v_fin = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_cgt = NULL;
  PyObject *__pyx_v_bf = NULL;
  PyObject *__pyx_v_rs = NULL;
  PyObject *__pyx_v_re = NULL;
  PyObject *__pyx_v_qs = NULL;
  PyObject *__pyx_v_qe = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_j = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr9__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_t_29;
  int __pyx_t_30;
  char const *__pyx_t_31;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("samtocoords", 1);

  /* "msyd/pyxfiles/io.pyx":103
 * 
 * def samtocoords(f):
 *     logger = logging.getLogger('SAM reader')             # <<<<<<<<<<<<<<
 *     rc = {}        # Referece chromosomes
 *     rcs = {}        # Selected chromosomes
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_SAM_reader};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_logger = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":104
 * def samtocoords(f):
 *     logger = logging.getLogger('SAM reader')
 *     rc = {}        # Referece chromosomes             # <<<<<<<<<<<<<<
 *     rcs = {}        # Selected chromosomes
 *     al = deque()    # Individual alignment
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":105
 *     logger = logging.getLogger('SAM reader')
 *     rc = {}        # Referece chromosomes
 *     rcs = {}        # Selected chromosomes             # <<<<<<<<<<<<<<
 *     al = deque()    # Individual alignment
 *     try:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rcs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":106
 *     rc = {}        # Referece chromosomes
 *     rcs = {}        # Selected chromosomes
 *     al = deque()    # Individual alignment             # <<<<<<<<<<<<<<
 *     try:
 *         with open(f, 'r') as fin:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_deque); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_al = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":107
 *     rcs = {}        # Selected chromosomes
 *     al = deque()    # Individual alignment
 *     try:             # <<<<<<<<<<<<<<
 *         with open(f, 'r') as fin:
 *             for l in fin:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":108
 *     al = deque()    # Individual alignment
 *     try:
 *         with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *             for l in fin:
 *                 if l[:3] == '@SQ':
 */
      /*with:*/ {
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_f);
        __Pyx_GIVEREF(__pyx_v_f);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_f)) __PYX_ERR(0, 108, __pyx_L3_error);
        __Pyx_INCREF(__pyx_n_u_r);
        __Pyx_GIVEREF(__pyx_n_u_r);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_r)) __PYX_ERR(0, 108, __pyx_L3_error);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 108, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_10);
            __Pyx_XGOTREF(__pyx_t_11);
            __Pyx_XGOTREF(__pyx_t_12);
            /*try:*/ {
              __pyx_v_fin = __pyx_t_2;
              __pyx_t_2 = 0;

              /* "msyd/pyxfiles/io.pyx":109
 *     try:
 *         with open(f, 'r') as fin:
 *             for l in fin:             # <<<<<<<<<<<<<<
 *                 if l[:3] == '@SQ':
 *                     c, s = 0, 0
 */
              if (likely(PyList_CheckExact(__pyx_v_fin)) || PyTuple_CheckExact(__pyx_v_fin)) {
                __pyx_t_2 = __pyx_v_fin; __Pyx_INCREF(__pyx_t_2);
                __pyx_t_13 = 0;
                __pyx_t_14 = NULL;
              } else {
                __pyx_t_13 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_fin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 109, __pyx_L13_error)
              }
              for (;;) {
                if (likely(!__pyx_t_14)) {
                  if (likely(PyList_CheckExact(__pyx_t_2))) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 109, __pyx_L13_error)
                      #endif
                      if (__pyx_t_13 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 109, __pyx_L13_error)
                    #else
                    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    #endif
                  } else {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 109, __pyx_L13_error)
                      #endif
                      if (__pyx_t_13 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 109, __pyx_L13_error)
                    #else
                    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    #endif
                  }
                } else {
                  __pyx_t_3 = __pyx_t_14(__pyx_t_2);
                  if (unlikely(!__pyx_t_3)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 109, __pyx_L13_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_3);
                }
                __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":110
 *         with open(f, 'r') as fin:
 *             for l in fin:
 *                 if l[:3] == '@SQ':             # <<<<<<<<<<<<<<
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:
 */
                __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_l, 0, 3, NULL, NULL, &__pyx_slice__10, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 110, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_kp_u_SQ, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 110, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_15) {

                  /* "msyd/pyxfiles/io.pyx":111
 *             for l in fin:
 *                 if l[:3] == '@SQ':
 *                     c, s = 0, 0             # <<<<<<<<<<<<<<
 *                     for h in l.strip().split()[1:]:
 *                         h = h.split(':')
 */
                  __pyx_t_3 = __pyx_int_0;
                  __Pyx_INCREF(__pyx_t_3);
                  __pyx_t_1 = __pyx_int_0;
                  __Pyx_INCREF(__pyx_t_1);
                  __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
                  __pyx_t_3 = 0;
                  __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
                  __pyx_t_1 = 0;

                  /* "msyd/pyxfiles/io.pyx":112
 *                 if l[:3] == '@SQ':
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:             # <<<<<<<<<<<<<<
 *                         h = h.split(':')
 *                         if h[0] == 'SN': c = h[1]
 */
                  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_l, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 112, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_16 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_9))) {
                    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_9);
                    if (likely(__pyx_t_16)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                      __Pyx_INCREF(__pyx_t_16);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_9, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  }
                  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 112, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_3 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_9))) {
                    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                    if (likely(__pyx_t_3)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                      __Pyx_INCREF(__pyx_t_3);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_9, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
                    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  }
                  __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_t_1, 1, 0, NULL, NULL, &__pyx_slice__11, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 112, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
                    __pyx_t_1 = __pyx_t_9; __Pyx_INCREF(__pyx_t_1);
                    __pyx_t_17 = 0;
                    __pyx_t_18 = NULL;
                  } else {
                    __pyx_t_17 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 112, __pyx_L13_error)
                  }
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_18)) {
                      if (likely(PyList_CheckExact(__pyx_t_1))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 112, __pyx_L13_error)
                          #endif
                          if (__pyx_t_17 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_9); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 112, __pyx_L13_error)
                        #else
                        __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 112, __pyx_L13_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 112, __pyx_L13_error)
                          #endif
                          if (__pyx_t_17 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_9); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 112, __pyx_L13_error)
                        #else
                        __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 112, __pyx_L13_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        #endif
                      }
                    } else {
                      __pyx_t_9 = __pyx_t_18(__pyx_t_1);
                      if (unlikely(!__pyx_t_9)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 112, __pyx_L13_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_9);
                    }
                    __Pyx_XDECREF_SET(__pyx_v_h, __pyx_t_9);
                    __pyx_t_9 = 0;

                    /* "msyd/pyxfiles/io.pyx":113
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:
 *                         h = h.split(':')             # <<<<<<<<<<<<<<
 *                         if h[0] == 'SN': c = h[1]
 *                         if h[0] == 'LN': s = int(h[1])
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_h, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_16 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_3))) {
                      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_3);
                      if (likely(__pyx_t_16)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                        __Pyx_INCREF(__pyx_t_16);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_3, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_kp_u__12};
                      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 113, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    }
                    __Pyx_DECREF_SET(__pyx_v_h, __pyx_t_9);
                    __pyx_t_9 = 0;

                    /* "msyd/pyxfiles/io.pyx":114
 *                     for h in l.strip().split()[1:]:
 *                         h = h.split(':')
 *                         if h[0] == 'SN': c = h[1]             # <<<<<<<<<<<<<<
 *                         if h[0] == 'LN': s = int(h[1])
 *                     rcs[c] = s
 */
                    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_h, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 114, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_SN, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 114, __pyx_L13_error)
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    if (__pyx_t_15) {
                      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_h, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 114, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __Pyx_DECREF_SET(__pyx_v_c, __pyx_t_9);
                      __pyx_t_9 = 0;
                    }

                    /* "msyd/pyxfiles/io.pyx":115
 *                         h = h.split(':')
 *                         if h[0] == 'SN': c = h[1]
 *                         if h[0] == 'LN': s = int(h[1])             # <<<<<<<<<<<<<<
 *                     rcs[c] = s
 *                     continue
 */
                    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_h, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 115, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_LN, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 115, __pyx_L13_error)
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    if (__pyx_t_15) {
                      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_h, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 115, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
                      __pyx_t_3 = 0;
                    }

                    /* "msyd/pyxfiles/io.pyx":112
 *                 if l[:3] == '@SQ':
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:             # <<<<<<<<<<<<<<
 *                         h = h.split(':')
 *                         if h[0] == 'SN': c = h[1]
 */
                  }
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                  /* "msyd/pyxfiles/io.pyx":116
 *                         if h[0] == 'SN': c = h[1]
 *                         if h[0] == 'LN': s = int(h[1])
 *                     rcs[c] = s             # <<<<<<<<<<<<<<
 *                     continue
 *                 elif l[0] == '@': continue
 */
                  if (unlikely((PyObject_SetItem(__pyx_v_rcs, __pyx_v_c, __pyx_v_s) < 0))) __PYX_ERR(0, 116, __pyx_L13_error)

                  /* "msyd/pyxfiles/io.pyx":117
 *                         if h[0] == 'LN': s = int(h[1])
 *                     rcs[c] = s
 *                     continue             # <<<<<<<<<<<<<<
 *                 elif l[0] == '@': continue
 * 
 */
                  goto __pyx_L19_continue;

                  /* "msyd/pyxfiles/io.pyx":110
 *         with open(f, 'r') as fin:
 *             for l in fin:
 *                 if l[:3] == '@SQ':             # <<<<<<<<<<<<<<
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:
 */
                }

                /* "msyd/pyxfiles/io.pyx":118
 *                     rcs[c] = s
 *                     continue
 *                 elif l[0] == '@': continue             # <<<<<<<<<<<<<<
 * 
 *                 l = l.split('\t')[:6]
 */
                __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__13, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 118, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (__pyx_t_15) {
                  goto __pyx_L19_continue;
                }

                /* "msyd/pyxfiles/io.pyx":120
 *                 elif l[0] == '@': continue
 * 
 *                 l = l.split('\t')[:6]             # <<<<<<<<<<<<<<
 *                 # if l[1] == '2064': break
 *                 if l[2] == '*':
 */
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_l, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_9 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_9)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_9);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_kp_u__14};
                  __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }
                __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 6, NULL, NULL, &__pyx_slice__15, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 120, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF_SET(__pyx_v_l, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":122
 *                 l = l.split('\t')[:6]
 *                 # if l[1] == '2064': break
 *                 if l[2] == '*':             # <<<<<<<<<<<<<<
 *                     logger.warning(l[0]+ ' do not align with any reference sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')  # Skip rows corresponding to non-mapping sequences (contigs/scaffolds)
 *                     continue
 */
                __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_l, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_kp_u__16, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 122, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_15) {

                  /* "msyd/pyxfiles/io.pyx":123
 *                 # if l[1] == '2064': break
 *                 if l[2] == '*':
 *                     logger.warning(l[0]+ ' do not align with any reference sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')  # Skip rows corresponding to non-mapping sequences (contigs/scaffolds)             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
                  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 123, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_16 = PyNumber_Add(__pyx_t_9, __pyx_kp_u_do_not_align_with_any_reference); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 123, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __pyx_t_9 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_1))) {
                    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
                    if (likely(__pyx_t_9)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                      __Pyx_INCREF(__pyx_t_9);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_1, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_16};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                  /* "msyd/pyxfiles/io.pyx":124
 *                 if l[2] == '*':
 *                     logger.warning(l[0]+ ' do not align with any reference sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')  # Skip rows corresponding to non-mapping sequences (contigs/scaffolds)
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if 'M' in l[5]:
 */
                  goto __pyx_L19_continue;

                  /* "msyd/pyxfiles/io.pyx":122
 *                 l = l.split('\t')[:6]
 *                 # if l[1] == '2064': break
 *                 if l[2] == '*':             # <<<<<<<<<<<<<<
 *                     logger.warning(l[0]+ ' do not align with any reference sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')  # Skip rows corresponding to non-mapping sequences (contigs/scaffolds)
 *                     continue
 */
                }

                /* "msyd/pyxfiles/io.pyx":126
 *                     continue
 * 
 *                 if 'M' in l[5]:             # <<<<<<<<<<<<<<
 *                     logger.error('Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ' + l[5])
 *                     sys.exit()
 */
                __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_l, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_M, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 126, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_15) {

                  /* "msyd/pyxfiles/io.pyx":127
 * 
 *                 if 'M' in l[5]:
 *                     logger.error('Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ' + l[5])             # <<<<<<<<<<<<<<
 *                     sys.exit()
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]
 */
                  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_l, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 127, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_t_9 = PyNumber_Add(__pyx_kp_u_Incorrect_CIGAR_string_found_CIG, __pyx_t_16); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 127, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __pyx_t_16 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_1))) {
                    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
                    if (likely(__pyx_t_16)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                      __Pyx_INCREF(__pyx_t_16);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_1, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_9};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                  /* "msyd/pyxfiles/io.pyx":128
 *                 if 'M' in l[5]:
 *                     logger.error('Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ' + l[5])
 *                     sys.exit()             # <<<<<<<<<<<<<<
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]
 *                 if len(cgt) > 2:
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 128, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_1 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_9))) {
                    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
                    if (likely(__pyx_t_1)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                      __Pyx_INCREF(__pyx_t_1);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_9, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                  /* "msyd/pyxfiles/io.pyx":126
 *                     continue
 * 
 *                 if 'M' in l[5]:             # <<<<<<<<<<<<<<
 *                     logger.error('Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ' + l[5])
 *                     sys.exit()
 */
                }

                /* "msyd/pyxfiles/io.pyx":129
 *                     logger.error('Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ' + l[5])
 *                     sys.exit()
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]             # <<<<<<<<<<<<<<
 *                 if len(cgt) > 2:
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:
 */
                { /* enter inner scope */
                  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L31_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  { /* enter inner scope */
                    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_l, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_replace); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_replace); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_replace); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_replace); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_replace); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_replace); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_split); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_19))) {
                      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_19);
                      if (likely(__pyx_t_16)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
                        __Pyx_INCREF(__pyx_t_16);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_19, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_kp_u__4};
                      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    }
                    __pyx_t_19 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (likely(PyList_CheckExact(__pyx_t_19)) || PyTuple_CheckExact(__pyx_t_19)) {
                      __pyx_t_1 = __pyx_t_19; __Pyx_INCREF(__pyx_t_1);
                      __pyx_t_17 = 0;
                      __pyx_t_18 = NULL;
                    } else {
                      __pyx_t_17 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_19); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_18 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 129, __pyx_L36_error)
                    }
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    for (;;) {
                      if (likely(!__pyx_t_18)) {
                        if (likely(PyList_CheckExact(__pyx_t_1))) {
                          {
                            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
                            #if !CYTHON_ASSUME_SAFE_MACROS
                            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 129, __pyx_L36_error)
                            #endif
                            if (__pyx_t_17 >= __pyx_temp) break;
                          }
                          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                          __pyx_t_19 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 129, __pyx_L36_error)
                          #else
                          __pyx_t_19 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                          __Pyx_GOTREF(__pyx_t_19);
                          #endif
                        } else {
                          {
                            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
                            #if !CYTHON_ASSUME_SAFE_MACROS
                            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 129, __pyx_L36_error)
                            #endif
                            if (__pyx_t_17 >= __pyx_temp) break;
                          }
                          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                          __pyx_t_19 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 129, __pyx_L36_error)
                          #else
                          __pyx_t_19 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                          __Pyx_GOTREF(__pyx_t_19);
                          #endif
                        }
                      } else {
                        __pyx_t_19 = __pyx_t_18(__pyx_t_1);
                        if (unlikely(!__pyx_t_19)) {
                          PyObject* exc_type = PyErr_Occurred();
                          if (exc_type) {
                            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                            else __PYX_ERR(0, 129, __pyx_L36_error)
                          }
                          break;
                        }
                        __Pyx_GOTREF(__pyx_t_19);
                      }
                      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_i, __pyx_t_19);
                      __pyx_t_19 = 0;
                      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_i, __pyx_n_s_split); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L36_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_20 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_16))) {
                        __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_16);
                        if (likely(__pyx_t_20)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                          __Pyx_INCREF(__pyx_t_20);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_16, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_kp_u__3};
                        __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                        if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L36_error)
                        __Pyx_GOTREF(__pyx_t_19);
                        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      }
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_19))) __PYX_ERR(0, 129, __pyx_L36_error)
                      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
                    goto __pyx_L40_exit_scope;
                    __pyx_L36_error:;
                    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i); __pyx_8genexpr2__pyx_v_i = 0;
                    goto __pyx_L31_error;
                    __pyx_L40_exit_scope:;
                  } /* exit inner scope */
                  __pyx_t_1 = __pyx_t_9; __Pyx_INCREF(__pyx_t_1);
                  __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  for (;;) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 129, __pyx_L31_error)
                      #endif
                      if (__pyx_t_17 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_9); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 129, __pyx_L31_error)
                    #else
                    __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 129, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    #endif
                    __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_j, __pyx_t_9);
                    __pyx_t_9 = 0;
                    __pyx_t_9 = __Pyx_GetItemInt(__pyx_8genexpr1__pyx_v_j, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 129, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_19 = __Pyx_PyNumber_Int(__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 129, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __pyx_t_9 = __Pyx_GetItemInt(__pyx_8genexpr1__pyx_v_j, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 129, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_16 = PyList_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 129, __pyx_L31_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_GIVEREF(__pyx_t_19);
                    if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_19)) __PYX_ERR(0, 129, __pyx_L31_error);
                    __Pyx_GIVEREF(__pyx_t_9);
                    if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_9)) __PYX_ERR(0, 129, __pyx_L31_error);
                    __pyx_t_19 = 0;
                    __pyx_t_9 = 0;
                    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 129, __pyx_L31_error)
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j); __pyx_8genexpr1__pyx_v_j = 0;
                  goto __pyx_L42_exit_scope;
                  __pyx_L31_error:;
                  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j); __pyx_8genexpr1__pyx_v_j = 0;
                  goto __pyx_L13_error;
                  __pyx_L42_exit_scope:;
                } /* exit inner scope */
                __Pyx_XDECREF_SET(__pyx_v_cgt, ((PyObject*)__pyx_t_3));
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":130
 *                     sys.exit()
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]
 *                 if len(cgt) > 2:             # <<<<<<<<<<<<<<
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 */
                __pyx_t_17 = __Pyx_PyList_GET_SIZE(__pyx_v_cgt); if (unlikely(__pyx_t_17 == ((Py_ssize_t)-1))) __PYX_ERR(0, 130, __pyx_L13_error)
                __pyx_t_15 = (__pyx_t_17 > 2);
                if (__pyx_t_15) {

                  /* "msyd/pyxfiles/io.pyx":131
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]
 *                 if len(cgt) > 2:
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:             # <<<<<<<<<<<<<<
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                         sys.exit()
 */
                  { /* enter inner scope */
                    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_cgt, 1, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L47_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_16 = __pyx_t_1; __Pyx_INCREF(__pyx_t_16);
                    __pyx_t_17 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    for (;;) {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 131, __pyx_L47_error)
                        #endif
                        if (__pyx_t_17 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_1); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 131, __pyx_L47_error)
                      #else
                      __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L47_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      #endif
                      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_i, __pyx_t_1);
                      __pyx_t_1 = 0;
                      __pyx_t_9 = __Pyx_GetItemInt(__pyx_8genexpr3__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 131, __pyx_L47_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_S, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 131, __pyx_L47_error)
                      if (!__pyx_t_21) {
                      } else {
                        __pyx_t_15 = __pyx_t_21;
                        goto __pyx_L50_bool_binop_done;
                      }
                      __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_H, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 131, __pyx_L47_error)
                      __pyx_t_15 = __pyx_t_21;
                      __pyx_L50_bool_binop_done:;
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      __pyx_t_21 = __pyx_t_15;
                      if (__pyx_t_21) {
                        __Pyx_INCREF(Py_True);
                        __pyx_t_1 = Py_True;
                      } else {
                        __Pyx_INCREF(Py_False);
                        __pyx_t_1 = Py_False;
                      }
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 131, __pyx_L47_error)
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
                    goto __pyx_L53_exit_scope;
                    __pyx_L47_error:;
                    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
                    goto __pyx_L13_error;
                    __pyx_L53_exit_scope:;
                  } /* exit inner scope */
                  __pyx_t_21 = (__Pyx_PySequence_ContainsTF(Py_True, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 131, __pyx_L13_error)
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (__pyx_t_21) {

                    /* "msyd/pyxfiles/io.pyx":132
 *                 if len(cgt) > 2:
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)             # <<<<<<<<<<<<<<
 *                         sys.exit()
 * 
 */
                    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 132, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_aln); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cigarstring); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 132, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Incorrect_CIGAR_string_found_Cli, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __pyx_t_9 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_16))) {
                      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_16);
                      if (likely(__pyx_t_9)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                        __Pyx_INCREF(__pyx_t_9);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_16, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_1};
                      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                    /* "msyd/pyxfiles/io.pyx":133
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                         sys.exit()             # <<<<<<<<<<<<<<
 * 
 *                 bf = '{:012b}'.format(int(l[1]))
 */
                    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_sys); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 133, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_16 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (unlikely(PyMethod_Check(__pyx_t_1))) {
                      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
                      if (likely(__pyx_t_16)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                        __Pyx_INCREF(__pyx_t_16);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_1, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};
                      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_3);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                    /* "msyd/pyxfiles/io.pyx":131
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]
 *                 if len(cgt) > 2:
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:             # <<<<<<<<<<<<<<
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                         sys.exit()
 */
                  }

                  /* "msyd/pyxfiles/io.pyx":130
 *                     sys.exit()
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]
 *                 if len(cgt) > 2:             # <<<<<<<<<<<<<<
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 */
                }

                /* "msyd/pyxfiles/io.pyx":135
 *                         sys.exit()
 * 
 *                 bf = '{:012b}'.format(int(l[1]))             # <<<<<<<<<<<<<<
 * 
 *                 rs = int(l[3])
 */
                __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_012b, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_l, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 135, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_16);
                __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_16); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 135, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __pyx_t_16 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_16)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_16);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_9};
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                }
                __Pyx_XDECREF_SET(__pyx_v_bf, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":137
 *                 bf = '{:012b}'.format(int(l[1]))
 * 
 *                 rs = int(l[3])             # <<<<<<<<<<<<<<
 *                 re = rs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'D']])
 * 
 */
                __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_l, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF_SET(__pyx_v_rs, __pyx_t_1);
                __pyx_t_1 = 0;

                /* "msyd/pyxfiles/io.pyx":138
 * 
 *                 rs = int(l[3])
 *                 re = rs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'D']])             # <<<<<<<<<<<<<<
 * 
 *                 if bf[7] == '0':    # forward alignment
 */
                __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_v_rs, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                { /* enter inner scope */
                  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L56_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_9 = __pyx_v_cgt; __Pyx_INCREF(__pyx_t_9);
                  __pyx_t_17 = 0;
                  for (;;) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_9);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 138, __pyx_L56_error)
                      #endif
                      if (__pyx_t_17 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_16 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_17); __Pyx_INCREF(__pyx_t_16); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 138, __pyx_L56_error)
                    #else
                    __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 138, __pyx_L56_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    #endif
                    __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_i, __pyx_t_16);
                    __pyx_t_16 = 0;
                    __pyx_t_16 = __Pyx_GetItemInt(__pyx_8genexpr4__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 138, __pyx_L56_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 138, __pyx_L56_error)
                    if (!__pyx_t_15) {
                    } else {
                      __pyx_t_21 = __pyx_t_15;
                      goto __pyx_L60_bool_binop_done;
                    }
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 138, __pyx_L56_error)
                    if (!__pyx_t_15) {
                    } else {
                      __pyx_t_21 = __pyx_t_15;
                      goto __pyx_L60_bool_binop_done;
                    }
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_D, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 138, __pyx_L56_error)
                    __pyx_t_21 = __pyx_t_15;
                    __pyx_L60_bool_binop_done:;
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __pyx_t_15 = __pyx_t_21;
                    if (__pyx_t_15) {
                      __pyx_t_16 = __Pyx_GetItemInt(__pyx_8genexpr4__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 138, __pyx_L56_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 138, __pyx_L56_error)
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_i); __pyx_8genexpr4__pyx_v_i = 0;
                  goto __pyx_L64_exit_scope;
                  __pyx_L56_error:;
                  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_i); __pyx_8genexpr4__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L64_exit_scope:;
                } /* exit inner scope */
                __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 138, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_re, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":140
 *                 re = rs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'D']])
 * 
 *                 if bf[7] == '0':    # forward alignment             # <<<<<<<<<<<<<<
 *                     if cgt[0][1] == '=':
 *                         qs = 1
 */
                __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bf, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_kp_u_0, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 140, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_15) {

                  /* "msyd/pyxfiles/io.pyx":141
 * 
 *                 if bf[7] == '0':    # forward alignment
 *                     if cgt[0][1] == '=':             # <<<<<<<<<<<<<<
 *                         qs = 1
 *                     elif cgt[0][1] in ['S', 'H']:
 */
                  __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_cgt, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 141, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 141, __pyx_L13_error)
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  if (__pyx_t_15) {

                    /* "msyd/pyxfiles/io.pyx":142
 *                 if bf[7] == '0':    # forward alignment
 *                     if cgt[0][1] == '=':
 *                         qs = 1             # <<<<<<<<<<<<<<
 *                     elif cgt[0][1] in ['S', 'H']:
 *                         qs = cgt[0][0] + 1
 */
                    __Pyx_INCREF(__pyx_int_1);
                    __Pyx_XDECREF_SET(__pyx_v_qs, __pyx_int_1);

                    /* "msyd/pyxfiles/io.pyx":141
 * 
 *                 if bf[7] == '0':    # forward alignment
 *                     if cgt[0][1] == '=':             # <<<<<<<<<<<<<<
 *                         qs = 1
 *                     elif cgt[0][1] in ['S', 'H']:
 */
                    goto __pyx_L66;
                  }

                  /* "msyd/pyxfiles/io.pyx":143
 *                     if cgt[0][1] == '=':
 *                         qs = 1
 *                     elif cgt[0][1] in ['S', 'H']:             # <<<<<<<<<<<<<<
 *                         qs = cgt[0][0] + 1
 *                     else:
 */
                  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_cgt, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 143, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_S, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 143, __pyx_L13_error)
                  if (!__pyx_t_21) {
                  } else {
                    __pyx_t_15 = __pyx_t_21;
                    goto __pyx_L67_bool_binop_done;
                  }
                  __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_H, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 143, __pyx_L13_error)
                  __pyx_t_15 = __pyx_t_21;
                  __pyx_L67_bool_binop_done:;
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_21 = __pyx_t_15;
                  if (__pyx_t_21) {

                    /* "msyd/pyxfiles/io.pyx":144
 *                         qs = 1
 *                     elif cgt[0][1] in ['S', 'H']:
 *                         qs = cgt[0][0] + 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')
 */
                    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_cgt, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 144, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __Pyx_XDECREF_SET(__pyx_v_qs, __pyx_t_3);
                    __pyx_t_3 = 0;

                    /* "msyd/pyxfiles/io.pyx":143
 *                     if cgt[0][1] == '=':
 *                         qs = 1
 *                     elif cgt[0][1] in ['S', 'H']:             # <<<<<<<<<<<<<<
 *                         qs = cgt[0][0] + 1
 *                     else:
 */
                    goto __pyx_L66;
                  }

                  /* "msyd/pyxfiles/io.pyx":146
 *                         qs = cgt[0][0] + 1
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')             # <<<<<<<<<<<<<<
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                 elif bf[7] == '1':  # inverted alignment
 */
                  /*else*/ {
                    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  }
                  __pyx_L66:;

                  /* "msyd/pyxfiles/io.pyx":147
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])             # <<<<<<<<<<<<<<
 *                 elif bf[7] == '1':  # inverted alignment
 *                     if cgt[-1][1] == '=':
 */
                  if (unlikely(!__pyx_v_qs)) { __Pyx_RaiseUnboundLocalError("qs"); __PYX_ERR(0, 147, __pyx_L13_error) }
                  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_qs, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  { /* enter inner scope */
                    __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L71_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_1 = __pyx_v_cgt; __Pyx_INCREF(__pyx_t_1);
                    __pyx_t_17 = 0;
                    for (;;) {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 147, __pyx_L71_error)
                        #endif
                        if (__pyx_t_17 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_16 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_17); __Pyx_INCREF(__pyx_t_16); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 147, __pyx_L71_error)
                      #else
                      __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 147, __pyx_L71_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      #endif
                      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_i, __pyx_t_16);
                      __pyx_t_16 = 0;
                      __pyx_t_16 = __Pyx_GetItemInt(__pyx_8genexpr5__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 147, __pyx_L71_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 147, __pyx_L71_error)
                      if (!__pyx_t_15) {
                      } else {
                        __pyx_t_21 = __pyx_t_15;
                        goto __pyx_L75_bool_binop_done;
                      }
                      __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 147, __pyx_L71_error)
                      if (!__pyx_t_15) {
                      } else {
                        __pyx_t_21 = __pyx_t_15;
                        goto __pyx_L75_bool_binop_done;
                      }
                      __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_I, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 147, __pyx_L71_error)
                      __pyx_t_21 = __pyx_t_15;
                      __pyx_L75_bool_binop_done:;
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_15 = __pyx_t_21;
                      if (__pyx_t_15) {
                        __pyx_t_16 = __Pyx_GetItemInt(__pyx_8genexpr5__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 147, __pyx_L71_error)
                        __Pyx_GOTREF(__pyx_t_16);
                        if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 147, __pyx_L71_error)
                        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      }
                    }
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_i); __pyx_8genexpr5__pyx_v_i = 0;
                    goto __pyx_L79_exit_scope;
                    __pyx_L71_error:;
                    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_i); __pyx_8genexpr5__pyx_v_i = 0;
                    goto __pyx_L13_error;
                    __pyx_L79_exit_scope:;
                  } /* exit inner scope */
                  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 147, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_XDECREF_SET(__pyx_v_qe, __pyx_t_9);
                  __pyx_t_9 = 0;

                  /* "msyd/pyxfiles/io.pyx":140
 *                 re = rs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'D']])
 * 
 *                 if bf[7] == '0':    # forward alignment             # <<<<<<<<<<<<<<
 *                     if cgt[0][1] == '=':
 *                         qs = 1
 */
                  goto __pyx_L65;
                }

                /* "msyd/pyxfiles/io.pyx":148
 *                         print('ERROR: CIGAR string starting with non-matching base')
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                 elif bf[7] == '1':  # inverted alignment             # <<<<<<<<<<<<<<
 *                     if cgt[-1][1] == '=':
 *                         qs = 1
 */
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_bf, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 148, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_kp_u_1, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 148, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                if (__pyx_t_15) {

                  /* "msyd/pyxfiles/io.pyx":149
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                 elif bf[7] == '1':  # inverted alignment
 *                     if cgt[-1][1] == '=':             # <<<<<<<<<<<<<<
 *                         qs = 1
 *                     elif cgt[-1][1] in ['S', 'H']:
 */
                  __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_cgt, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 149, __pyx_L13_error)
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (__pyx_t_15) {

                    /* "msyd/pyxfiles/io.pyx":150
 *                 elif bf[7] == '1':  # inverted alignment
 *                     if cgt[-1][1] == '=':
 *                         qs = 1             # <<<<<<<<<<<<<<
 *                     elif cgt[-1][1] in ['S', 'H']:
 *                         qs = cgt[-1][0] + 1
 */
                    __Pyx_INCREF(__pyx_int_1);
                    __Pyx_XDECREF_SET(__pyx_v_qs, __pyx_int_1);

                    /* "msyd/pyxfiles/io.pyx":149
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                 elif bf[7] == '1':  # inverted alignment
 *                     if cgt[-1][1] == '=':             # <<<<<<<<<<<<<<
 *                         qs = 1
 *                     elif cgt[-1][1] in ['S', 'H']:
 */
                    goto __pyx_L80;
                  }

                  /* "msyd/pyxfiles/io.pyx":151
 *                     if cgt[-1][1] == '=':
 *                         qs = 1
 *                     elif cgt[-1][1] in ['S', 'H']:             # <<<<<<<<<<<<<<
 *                         qs = cgt[-1][0] + 1
 *                     else:
 */
                  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_cgt, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 151, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_S, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 151, __pyx_L13_error)
                  if (!__pyx_t_21) {
                  } else {
                    __pyx_t_15 = __pyx_t_21;
                    goto __pyx_L81_bool_binop_done;
                  }
                  __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_H, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 151, __pyx_L13_error)
                  __pyx_t_15 = __pyx_t_21;
                  __pyx_L81_bool_binop_done:;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __pyx_t_21 = __pyx_t_15;
                  if (__pyx_t_21) {

                    /* "msyd/pyxfiles/io.pyx":152
 *                         qs = 1
 *                     elif cgt[-1][1] in ['S', 'H']:
 *                         qs = cgt[-1][0] + 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')
 */
                    __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_cgt, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 152, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 152, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_XDECREF_SET(__pyx_v_qs, __pyx_t_9);
                    __pyx_t_9 = 0;

                    /* "msyd/pyxfiles/io.pyx":151
 *                     if cgt[-1][1] == '=':
 *                         qs = 1
 *                     elif cgt[-1][1] in ['S', 'H']:             # <<<<<<<<<<<<<<
 *                         qs = cgt[-1][0] + 1
 *                     else:
 */
                    goto __pyx_L80;
                  }

                  /* "msyd/pyxfiles/io.pyx":154
 *                         qs = cgt[-1][0] + 1
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')             # <<<<<<<<<<<<<<
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                     qs, qe = qe, qs
 */
                  /*else*/ {
                    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 154, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  }
                  __pyx_L80:;

                  /* "msyd/pyxfiles/io.pyx":155
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])             # <<<<<<<<<<<<<<
 *                     qs, qe = qe, qs
 * 
 */
                  if (unlikely(!__pyx_v_qs)) { __Pyx_RaiseUnboundLocalError("qs"); __PYX_ERR(0, 155, __pyx_L13_error) }
                  __pyx_t_9 = __Pyx_PyInt_SubtractObjC(__pyx_v_qs, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 155, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  { /* enter inner scope */
                    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L85_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_3 = __pyx_v_cgt; __Pyx_INCREF(__pyx_t_3);
                    __pyx_t_17 = 0;
                    for (;;) {
                      {
                        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                        #if !CYTHON_ASSUME_SAFE_MACROS
                        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 155, __pyx_L85_error)
                        #endif
                        if (__pyx_t_17 >= __pyx_temp) break;
                      }
                      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                      __pyx_t_16 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_17); __Pyx_INCREF(__pyx_t_16); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 155, __pyx_L85_error)
                      #else
                      __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 155, __pyx_L85_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      #endif
                      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_i, __pyx_t_16);
                      __pyx_t_16 = 0;
                      __pyx_t_16 = __Pyx_GetItemInt(__pyx_8genexpr6__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 155, __pyx_L85_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 155, __pyx_L85_error)
                      if (!__pyx_t_15) {
                      } else {
                        __pyx_t_21 = __pyx_t_15;
                        goto __pyx_L89_bool_binop_done;
                      }
                      __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 155, __pyx_L85_error)
                      if (!__pyx_t_15) {
                      } else {
                        __pyx_t_21 = __pyx_t_15;
                        goto __pyx_L89_bool_binop_done;
                      }
                      __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_I, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 155, __pyx_L85_error)
                      __pyx_t_21 = __pyx_t_15;
                      __pyx_L89_bool_binop_done:;
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __pyx_t_15 = __pyx_t_21;
                      if (__pyx_t_15) {
                        __pyx_t_16 = __Pyx_GetItemInt(__pyx_8genexpr6__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 155, __pyx_L85_error)
                        __Pyx_GOTREF(__pyx_t_16);
                        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 155, __pyx_L85_error)
                        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      }
                    }
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_i); __pyx_8genexpr6__pyx_v_i = 0;
                    goto __pyx_L93_exit_scope;
                    __pyx_L85_error:;
                    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_i); __pyx_8genexpr6__pyx_v_i = 0;
                    goto __pyx_L13_error;
                    __pyx_L93_exit_scope:;
                  } /* exit inner scope */
                  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_1 = PyNumber_Add(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_XDECREF_SET(__pyx_v_qe, __pyx_t_1);
                  __pyx_t_1 = 0;

                  /* "msyd/pyxfiles/io.pyx":156
 *                         print('ERROR: CIGAR string starting with non-matching base')
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                     qs, qe = qe, qs             # <<<<<<<<<<<<<<
 * 
 *                 al.append([
 */
                  __pyx_t_22 = __pyx_v_qe;
                  if (unlikely(!__pyx_v_qs)) { __Pyx_RaiseUnboundLocalError("qs"); __PYX_ERR(0, 156, __pyx_L13_error) }
                  __pyx_t_23 = __pyx_v_qs;
                  __pyx_v_qs = __pyx_t_22;
                  __pyx_t_22 = 0;
                  __pyx_v_qe = __pyx_t_23;
                  __pyx_t_23 = 0;

                  /* "msyd/pyxfiles/io.pyx":148
 *                         print('ERROR: CIGAR string starting with non-matching base')
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                 elif bf[7] == '1':  # inverted alignment             # <<<<<<<<<<<<<<
 *                     if cgt[-1][1] == '=':
 *                         qs = 1
 */
                }
                __pyx_L65:;

                /* "msyd/pyxfiles/io.pyx":161
 *                     rs,
 *                     re,
 *                     qs,             # <<<<<<<<<<<<<<
 *                     qe,
 *                     abs(re-rs) + 1,
 */
                if (unlikely(!__pyx_v_qs)) { __Pyx_RaiseUnboundLocalError("qs"); __PYX_ERR(0, 161, __pyx_L13_error) }

                /* "msyd/pyxfiles/io.pyx":162
 *                     re,
 *                     qs,
 *                     qe,             # <<<<<<<<<<<<<<
 *                     abs(re-rs) + 1,
 *                     abs(qs-qe) + 1,
 */
                if (unlikely(!__pyx_v_qe)) { __Pyx_RaiseUnboundLocalError("qe"); __PYX_ERR(0, 162, __pyx_L13_error) }

                /* "msyd/pyxfiles/io.pyx":163
 *                     qs,
 *                     qe,
 *                     abs(re-rs) + 1,             # <<<<<<<<<<<<<<
 *                     abs(qs-qe) + 1,
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(
 */
                __pyx_t_1 = PyNumber_Subtract(__pyx_v_re, __pyx_v_rs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":164
 *                     qe,
 *                     abs(re-rs) + 1,
 *                     abs(qs-qe) + 1,             # <<<<<<<<<<<<<<
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),
 */
                if (unlikely(!__pyx_v_qs)) { __Pyx_RaiseUnboundLocalError("qs"); __PYX_ERR(0, 164, __pyx_L13_error) }
                if (unlikely(!__pyx_v_qe)) { __Pyx_RaiseUnboundLocalError("qe"); __PYX_ERR(0, 164, __pyx_L13_error) }
                __pyx_t_3 = PyNumber_Subtract(__pyx_v_qs, __pyx_v_qe); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 164, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":165
 *                     abs(re-rs) + 1,
 *                     abs(qs-qe) + 1,
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(             # <<<<<<<<<<<<<<
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),
 *                     1,
 */
                { /* enter inner scope */
                  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 165, __pyx_L96_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_16 = __pyx_v_cgt; __Pyx_INCREF(__pyx_t_16);
                  __pyx_t_17 = 0;
                  for (;;) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 165, __pyx_L96_error)
                      #endif
                      if (__pyx_t_17 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_19 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_17); __Pyx_INCREF(__pyx_t_19); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 165, __pyx_L96_error)
                    #else
                    __pyx_t_19 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 165, __pyx_L96_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    #endif
                    __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_i, __pyx_t_19);
                    __pyx_t_19 = 0;
                    __pyx_t_19 = __Pyx_GetItemInt(__pyx_8genexpr7__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 165, __pyx_L96_error)
                    __Pyx_GOTREF(__pyx_t_19);
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_19, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 165, __pyx_L96_error)
                    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    if (__pyx_t_15) {
                      __pyx_t_19 = __Pyx_GetItemInt(__pyx_8genexpr7__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 165, __pyx_L96_error)
                      __Pyx_GOTREF(__pyx_t_19);
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_19))) __PYX_ERR(0, 165, __pyx_L96_error)
                      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_i); __pyx_8genexpr7__pyx_v_i = 0;
                  goto __pyx_L101_exit_scope;
                  __pyx_L96_error:;
                  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_i); __pyx_8genexpr7__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L101_exit_scope:;
                } /* exit inner scope */
                __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 165, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_16);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                { /* enter inner scope */

                  /* "msyd/pyxfiles/io.pyx":166
 *                     abs(qs-qe) + 1,
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),             # <<<<<<<<<<<<<<
 *                     1,
 *                     1 if bf[7] == '0' else -1,
 */
                  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 166, __pyx_L104_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_19 = __pyx_v_cgt; __Pyx_INCREF(__pyx_t_19);
                  __pyx_t_17 = 0;
                  for (;;) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_19);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 166, __pyx_L104_error)
                      #endif
                      if (__pyx_t_17 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_20 = PyList_GET_ITEM(__pyx_t_19, __pyx_t_17); __Pyx_INCREF(__pyx_t_20); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 166, __pyx_L104_error)
                    #else
                    __pyx_t_20 = __Pyx_PySequence_ITEM(__pyx_t_19, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 166, __pyx_L104_error)
                    __Pyx_GOTREF(__pyx_t_20);
                    #endif
                    __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_i, __pyx_t_20);
                    __pyx_t_20 = 0;
                    __pyx_t_20 = __Pyx_GetItemInt(__pyx_8genexpr8__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 166, __pyx_L104_error)
                    __Pyx_GOTREF(__pyx_t_20);
                    __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_20, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 166, __pyx_L104_error)
                    if (!__pyx_t_21) {
                    } else {
                      __pyx_t_15 = __pyx_t_21;
                      goto __pyx_L108_bool_binop_done;
                    }
                    __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_20, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 166, __pyx_L104_error)
                    if (!__pyx_t_21) {
                    } else {
                      __pyx_t_15 = __pyx_t_21;
                      goto __pyx_L108_bool_binop_done;
                    }
                    __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_20, __pyx_n_u_I, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 166, __pyx_L104_error)
                    if (!__pyx_t_21) {
                    } else {
                      __pyx_t_15 = __pyx_t_21;
                      goto __pyx_L108_bool_binop_done;
                    }
                    __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_20, __pyx_n_u_D, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 166, __pyx_L104_error)
                    __pyx_t_15 = __pyx_t_21;
                    __pyx_L108_bool_binop_done:;
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __pyx_t_21 = __pyx_t_15;
                    if (__pyx_t_21) {
                      __pyx_t_20 = __Pyx_GetItemInt(__pyx_8genexpr8__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 166, __pyx_L104_error)
                      __Pyx_GOTREF(__pyx_t_20);
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_20))) __PYX_ERR(0, 166, __pyx_L104_error)
                      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_i); __pyx_8genexpr8__pyx_v_i = 0;
                  goto __pyx_L113_exit_scope;
                  __pyx_L104_error:;
                  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_i); __pyx_8genexpr8__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L113_exit_scope:;
                } /* exit inner scope */

                /* "msyd/pyxfiles/io.pyx":165
 *                     abs(re-rs) + 1,
 *                     abs(qs-qe) + 1,
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(             # <<<<<<<<<<<<<<
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),
 *                     1,
 */
                __pyx_t_19 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 165, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_19);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_16, __pyx_t_19); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 165, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

                /* "msyd/pyxfiles/io.pyx":166
 *                     abs(qs-qe) + 1,
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),             # <<<<<<<<<<<<<<
 *                     1,
 *                     1 if bf[7] == '0' else -1,
 */
                __pyx_t_19 = __Pyx_PyInt_MultiplyObjC(__pyx_t_9, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 166, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_19);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":165
 *                     abs(re-rs) + 1,
 *                     abs(qs-qe) + 1,
 *                     format((sum([i[0] for i in cgt if i[1] == '=']) / sum(             # <<<<<<<<<<<<<<
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),
 *                     1,
 */
                __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 165, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_19);
                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_19)) __PYX_ERR(0, 165, __pyx_L13_error);
                __Pyx_INCREF(__pyx_kp_u_2f);
                __Pyx_GIVEREF(__pyx_kp_u_2f);
                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_kp_u_2f)) __PYX_ERR(0, 165, __pyx_L13_error);
                __pyx_t_19 = 0;
                __pyx_t_19 = __Pyx_PyObject_Call(__pyx_builtin_format, __pyx_t_9, NULL); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 165, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_19);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":168
 *                         [i[0] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])) * 100, '.2f'),
 *                     1,
 *                     1 if bf[7] == '0' else -1,             # <<<<<<<<<<<<<<
 *                     l[2],
 *                     l[0],
 */
                __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_bf, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 168, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_16);
                __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_kp_u_0, Py_EQ)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 168, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                if (__pyx_t_21) {
                  __Pyx_INCREF(__pyx_int_1);
                  __pyx_t_9 = __pyx_int_1;
                } else {
                  __Pyx_INCREF(__pyx_int_neg_1);
                  __pyx_t_9 = __pyx_int_neg_1;
                }

                /* "msyd/pyxfiles/io.pyx":169
 *                     1,
 *                     1 if bf[7] == '0' else -1,
 *                     l[2],             # <<<<<<<<<<<<<<
 *                     l[0],
 *                     "".join([str(i[0])+i[1] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])
 */
                __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_l, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 169, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_16);

                /* "msyd/pyxfiles/io.pyx":170
 *                     1 if bf[7] == '0' else -1,
 *                     l[2],
 *                     l[0],             # <<<<<<<<<<<<<<
 *                     "".join([str(i[0])+i[1] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])
 *                 ])
 */
                __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 170, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_20);

                /* "msyd/pyxfiles/io.pyx":171
 *                     l[2],
 *                     l[0],
 *                     "".join([str(i[0])+i[1] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])             # <<<<<<<<<<<<<<
 *                 ])
 *                 rcs[l[2]] = 1
 */
                { /* enter inner scope */
                  __pyx_t_24 = PyList_New(0); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 171, __pyx_L116_error)
                  __Pyx_GOTREF(__pyx_t_24);
                  __pyx_t_25 = __pyx_v_cgt; __Pyx_INCREF(__pyx_t_25);
                  __pyx_t_17 = 0;
                  for (;;) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_25);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 171, __pyx_L116_error)
                      #endif
                      if (__pyx_t_17 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_26 = PyList_GET_ITEM(__pyx_t_25, __pyx_t_17); __Pyx_INCREF(__pyx_t_26); __pyx_t_17++; if (unlikely((0 < 0))) __PYX_ERR(0, 171, __pyx_L116_error)
                    #else
                    __pyx_t_26 = __Pyx_PySequence_ITEM(__pyx_t_25, __pyx_t_17); __pyx_t_17++; if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 171, __pyx_L116_error)
                    __Pyx_GOTREF(__pyx_t_26);
                    #endif
                    __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_i, __pyx_t_26);
                    __pyx_t_26 = 0;
                    __pyx_t_26 = __Pyx_GetItemInt(__pyx_8genexpr9__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 171, __pyx_L116_error)
                    __Pyx_GOTREF(__pyx_t_26);
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_26, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 171, __pyx_L116_error)
                    if (!__pyx_t_15) {
                    } else {
                      __pyx_t_21 = __pyx_t_15;
                      goto __pyx_L120_bool_binop_done;
                    }
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_26, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 171, __pyx_L116_error)
                    if (!__pyx_t_15) {
                    } else {
                      __pyx_t_21 = __pyx_t_15;
                      goto __pyx_L120_bool_binop_done;
                    }
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_26, __pyx_n_u_I, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 171, __pyx_L116_error)
                    if (!__pyx_t_15) {
                    } else {
                      __pyx_t_21 = __pyx_t_15;
                      goto __pyx_L120_bool_binop_done;
                    }
                    __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_26, __pyx_n_u_D, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 171, __pyx_L116_error)
                    __pyx_t_21 = __pyx_t_15;
                    __pyx_L120_bool_binop_done:;
                    __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                    __pyx_t_15 = __pyx_t_21;
                    if (__pyx_t_15) {
                      __pyx_t_26 = __Pyx_GetItemInt(__pyx_8genexpr9__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 171, __pyx_L116_error)
                      __Pyx_GOTREF(__pyx_t_26);
                      __pyx_t_27 = __Pyx_PyObject_Str(__pyx_t_26); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 171, __pyx_L116_error)
                      __Pyx_GOTREF(__pyx_t_27);
                      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                      __pyx_t_26 = __Pyx_GetItemInt(__pyx_8genexpr9__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 171, __pyx_L116_error)
                      __Pyx_GOTREF(__pyx_t_26);
                      __pyx_t_28 = PyNumber_Add(__pyx_t_27, __pyx_t_26); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 171, __pyx_L116_error)
                      __Pyx_GOTREF(__pyx_t_28);
                      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_24, (PyObject*)__pyx_t_28))) __PYX_ERR(0, 171, __pyx_L116_error)
                      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_i); __pyx_8genexpr9__pyx_v_i = 0;
                  goto __pyx_L125_exit_scope;
                  __pyx_L116_error:;
                  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_i); __pyx_8genexpr9__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L125_exit_scope:;
                } /* exit inner scope */
                __pyx_t_25 = PyUnicode_Join(__pyx_kp_u__6, __pyx_t_24); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 171, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_25);
                __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

                /* "msyd/pyxfiles/io.pyx":158
 *                     qs, qe = qe, qs
 * 
 *                 al.append([             # <<<<<<<<<<<<<<
 *                     rs,
 *                     re,
 */
                __pyx_t_24 = PyList_New(12); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 158, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_24);
                __Pyx_INCREF(__pyx_v_rs);
                __Pyx_GIVEREF(__pyx_v_rs);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_v_rs)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_re);
                __Pyx_GIVEREF(__pyx_v_re);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_v_re)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_qs);
                __Pyx_GIVEREF(__pyx_v_qs);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_v_qs)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_qe);
                __Pyx_GIVEREF(__pyx_v_qe);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 3, __pyx_v_qe)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_1);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 4, __pyx_t_1)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_3);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 5, __pyx_t_3)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_19);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 6, __pyx_t_19)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_INCREF(__pyx_int_1);
                __Pyx_GIVEREF(__pyx_int_1);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 7, __pyx_int_1)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_9);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 8, __pyx_t_9)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_16);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 9, __pyx_t_16)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_20);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 10, __pyx_t_20)) __PYX_ERR(0, 158, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_25);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 11, __pyx_t_25)) __PYX_ERR(0, 158, __pyx_L13_error);
                __pyx_t_1 = 0;
                __pyx_t_3 = 0;
                __pyx_t_19 = 0;
                __pyx_t_9 = 0;
                __pyx_t_16 = 0;
                __pyx_t_20 = 0;
                __pyx_t_25 = 0;
                __pyx_t_29 = __Pyx_PyObject_Append(__pyx_v_al, __pyx_t_24); if (unlikely(__pyx_t_29 == ((int)-1))) __PYX_ERR(0, 158, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

                /* "msyd/pyxfiles/io.pyx":173
 *                     "".join([str(i[0])+i[1] for i in cgt if i[1] in ['=', 'X', 'I', 'D']])
 *                 ])
 *                 rcs[l[2]] = 1             # <<<<<<<<<<<<<<
 *             rcs = list(rcs.keys())
 *             for k in list(rc.keys()):
 */
                __pyx_t_24 = __Pyx_GetItemInt(__pyx_v_l, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 173, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_24);
                if (unlikely((PyObject_SetItem(__pyx_v_rcs, __pyx_t_24, __pyx_int_1) < 0))) __PYX_ERR(0, 173, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

                /* "msyd/pyxfiles/io.pyx":109
 *     try:
 *         with open(f, 'r') as fin:
 *             for l in fin:             # <<<<<<<<<<<<<<
 *                 if l[:3] == '@SQ':
 *                     c, s = 0, 0
 */
                __pyx_L19_continue:;
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "msyd/pyxfiles/io.pyx":174
 *                 ])
 *                 rcs[l[2]] = 1
 *             rcs = list(rcs.keys())             # <<<<<<<<<<<<<<
 *             for k in list(rc.keys()):
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')
 */
              __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_v_rcs, __pyx_n_s_keys); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 174, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_24);
              __pyx_t_25 = NULL;
              __pyx_t_4 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_24))) {
                __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_24);
                if (likely(__pyx_t_25)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
                  __Pyx_INCREF(__pyx_t_25);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_24, function);
                  __pyx_t_4 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_25, NULL};
                __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_24, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
              }
              __pyx_t_24 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 174, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_24);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF_SET(__pyx_v_rcs, __pyx_t_24);
              __pyx_t_24 = 0;

              /* "msyd/pyxfiles/io.pyx":175
 *                 rcs[l[2]] = 1
 *             rcs = list(rcs.keys())
 *             for k in list(rc.keys()):             # <<<<<<<<<<<<<<
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')
 *     except Exception as e:
 */
              __pyx_t_24 = __Pyx_PyDict_Keys(__pyx_v_rc); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 175, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_24);
              __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_24); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
              __pyx_t_24 = __pyx_t_2; __Pyx_INCREF(__pyx_t_24);
              __pyx_t_13 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              for (;;) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_24);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 175, __pyx_L13_error)
                  #endif
                  if (__pyx_t_13 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyList_GET_ITEM(__pyx_t_24, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 175, __pyx_L13_error)
                #else
                __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_24, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
                __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_2);
                __pyx_t_2 = 0;

                /* "msyd/pyxfiles/io.pyx":176
 *             rcs = list(rcs.keys())
 *             for k in list(rc.keys()):
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error('Error in reading SAM file: ' + str(e))
 */
                __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_v_k, __pyx_v_rcs, Py_NE)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 176, __pyx_L13_error)
                if (__pyx_t_15) {
                  __pyx_t_25 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_warning); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 176, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_25);
                  if (unlikely(!__pyx_v_l)) { __Pyx_RaiseUnboundLocalError("l"); __PYX_ERR(0, 176, __pyx_L13_error) }
                  __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 176, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_16 = PyNumber_Add(__pyx_t_20, __pyx_kp_u_do_not_align_with_any_query_seq); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 176, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_20 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_25))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_25);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_25);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_25, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_t_16};
                    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_25, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_2);
                    __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                }

                /* "msyd/pyxfiles/io.pyx":175
 *                 rcs[l[2]] = 1
 *             rcs = list(rcs.keys())
 *             for k in list(rc.keys()):             # <<<<<<<<<<<<<<
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')
 *     except Exception as e:
 */
              }
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

              /* "msyd/pyxfiles/io.pyx":108
 *     al = deque()    # Individual alignment
 *     try:
 *         with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *             for l in fin:
 *                 if l[:3] == '@SQ':
 */
            }
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L18_try_end;
            __pyx_L13_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
            __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
            __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
            __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("msyd.io.samtocoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_24, &__pyx_t_2, &__pyx_t_25) < 0) __PYX_ERR(0, 108, __pyx_L15_except_error)
              __Pyx_XGOTREF(__pyx_t_24);
              __Pyx_XGOTREF(__pyx_t_2);
              __Pyx_XGOTREF(__pyx_t_25);
              __pyx_t_16 = PyTuple_Pack(3, __pyx_t_24, __pyx_t_2, __pyx_t_25); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 108, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_16, NULL);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 108, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_23);
              __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_23);
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              if (__pyx_t_15 < 0) __PYX_ERR(0, 108, __pyx_L15_except_error)
              __pyx_t_21 = (!__pyx_t_15);
              if (unlikely(__pyx_t_21)) {
                __Pyx_GIVEREF(__pyx_t_24);
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_XGIVEREF(__pyx_t_25);
                __Pyx_ErrRestoreWithState(__pyx_t_24, __pyx_t_2, __pyx_t_25);
                __pyx_t_24 = 0; __pyx_t_2 = 0; __pyx_t_25 = 0; 
                __PYX_ERR(0, 108, __pyx_L15_except_error)
              }
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
              goto __pyx_L14_exception_handled;
            }
            __pyx_L15_except_error:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            goto __pyx_L3_error;
            __pyx_L14_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            __pyx_L18_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_8) {
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__7, NULL);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 108, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
            goto __pyx_L12;
          }
          __pyx_L12:;
        }
        goto __pyx_L134;
        __pyx_L9_error:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L3_error;
        __pyx_L134:;
      }

      /* "msyd/pyxfiles/io.pyx":107
 *     rcs = {}        # Selected chromosomes
 *     al = deque()    # Individual alignment
 *     try:             # <<<<<<<<<<<<<<
 *         with open(f, 'r') as fin:
 *             for l in fin:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
    __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
    __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
    __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
    __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "msyd/pyxfiles/io.pyx":177
 *             for k in list(rc.keys()):
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error('Error in reading SAM file: ' + str(e))
 *         sys.exit()
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.samtocoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_25, &__pyx_t_2, &__pyx_t_24) < 0) __PYX_ERR(0, 177, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_25);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_24);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_e = __pyx_t_2;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":178
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')
 *     except Exception as e:
 *         logger.error('Error in reading SAM file: ' + str(e))             # <<<<<<<<<<<<<<
 *         sys.exit()
 *     al = DataFrame(list(al))
 */
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 178, __pyx_L140_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_9 = __Pyx_PyObject_Str(__pyx_v_e); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 178, __pyx_L140_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_19 = PyNumber_Add(__pyx_kp_u_Error_in_reading_SAM_file, __pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 178, __pyx_L140_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_19};
          __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 178, __pyx_L140_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "msyd/pyxfiles/io.pyx":179
 *     except Exception as e:
 *         logger.error('Error in reading SAM file: ' + str(e))
 *         sys.exit()             # <<<<<<<<<<<<<<
 *     al = DataFrame(list(al))
 *     al[6] = al[6].astype('float')
 */
        __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_sys); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 179, __pyx_L140_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 179, __pyx_L140_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_20)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_20, NULL};
          __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 179, __pyx_L140_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }

      /* "msyd/pyxfiles/io.pyx":177
 *             for k in list(rc.keys()):
 *                 if k not in rcs: logger.warning(l[0]+ ' do not align with any query sequence and cannot be analysed. Remove all unplaced scaffolds and contigs from the assemblies.')
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error('Error in reading SAM file: ' + str(e))
 *         sys.exit()
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L141;
        }
        __pyx_L140_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_8 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
          __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
          __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_23, &__pyx_t_22);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_12, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_22);
          __pyx_t_4 = __pyx_lineno; __pyx_t_30 = __pyx_clineno; __pyx_t_31 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_23, __pyx_t_22);
          }
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ErrRestore(__pyx_t_8, __pyx_t_12, __pyx_t_11);
          __pyx_t_8 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0;
          __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_30; __pyx_filename = __pyx_t_31;
          goto __pyx_L5_except_error;
        }
        __pyx_L141:;
      }
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "msyd/pyxfiles/io.pyx":107
 *     rcs = {}        # Selected chromosomes
 *     al = deque()    # Individual alignment
 *     try:             # <<<<<<<<<<<<<<
 *         with open(f, 'r') as fin:
 *             for l in fin:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L8_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":180
 *         logger.error('Error in reading SAM file: ' + str(e))
 *         sys.exit()
 *     al = DataFrame(list(al))             # <<<<<<<<<<<<<<
 *     al[6] = al[6].astype('float')
 *     al.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_25 = PySequence_List(__pyx_v_al); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __pyx_t_16 = NULL;
  __pyx_t_30 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_30 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_25};
    __pyx_t_24 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_30, 1+__pyx_t_30);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
    if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_al, __pyx_t_24);
  __pyx_t_24 = 0;

  /* "msyd/pyxfiles/io.pyx":181
 *         sys.exit()
 *     al = DataFrame(list(al))
 *     al[6] = al[6].astype('float')             # <<<<<<<<<<<<<<
 *     al.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *     al.index = range(len(al.index))
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_al, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_25 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_astype); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_30 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_25))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_25);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_25);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_25, function);
      __pyx_t_30 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_float};
    __pyx_t_24 = __Pyx_PyObject_FastCall(__pyx_t_25, __pyx_callargs+1-__pyx_t_30, 1+__pyx_t_30);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  }
  if (unlikely((__Pyx_SetItemInt(__pyx_v_al, 6, __pyx_t_24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0))) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

  /* "msyd/pyxfiles/io.pyx":182
 *     al = DataFrame(list(al))
 *     al[6] = al[6].astype('float')
 *     al.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)             # <<<<<<<<<<<<<<
 *     al.index = range(len(al.index))
 *     return al
 */
  __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_v_al, __pyx_n_s_sort_values); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = PyList_New(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_int_9);
  __Pyx_GIVEREF(__pyx_int_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_int_9)) __PYX_ERR(0, 182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_int_0)) __PYX_ERR(0, 182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_int_1)) __PYX_ERR(0, 182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 3, __pyx_int_2)) __PYX_ERR(0, 182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 4, __pyx_int_3)) __PYX_ERR(0, 182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_10);
  __Pyx_GIVEREF(__pyx_int_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 5, __pyx_int_10)) __PYX_ERR(0, 182, __pyx_L1_error);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_25)) __PYX_ERR(0, 182, __pyx_L1_error);
  __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  if (PyDict_SetItem(__pyx_t_25, __pyx_n_s_inplace, Py_True) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_25, __pyx_n_s_ascending, Py_True) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_24, __pyx_t_2, __pyx_t_25); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "msyd/pyxfiles/io.pyx":183
 *     al[6] = al[6].astype('float')
 *     al.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *     al.index = range(len(al.index))             # <<<<<<<<<<<<<<
 *     return al
 * # END
 */
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_al, __pyx_n_s_index); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_13 = PyObject_Length(__pyx_t_16); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_25 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_16); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_al, __pyx_n_s_index, __pyx_t_25) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

  /* "msyd/pyxfiles/io.pyx":184
 *     al.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *     al.index = range(len(al.index))
 *     return al             # <<<<<<<<<<<<<<
 * # END
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_al);
  __pyx_r = __pyx_v_al;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":102
 * 
 * 
 * def samtocoords(f):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('SAM reader')
 *     rc = {}        # Referece chromosomes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("msyd.io.samtocoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_logger);
  __Pyx_XDECREF(__pyx_v_rc);
  __Pyx_XDECREF(__pyx_v_rcs);
  __Pyx_XDECREF(__pyx_v_al);
  __Pyx_XDECREF(__pyx_v_fin);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_cgt);
  __Pyx_XDECREF(__pyx_v_bf);
  __Pyx_XDECREF(__pyx_v_rs);
  __Pyx_XDECREF(__pyx_v_re);
  __Pyx_XDECREF(__pyx_v_qs);
  __Pyx_XDECREF(__pyx_v_qe);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":187
 * # END
 * 
 * def readSAMBAM(fin, type='B'):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_7readSAMBAM(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_7readSAMBAM = {"readSAMBAM", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_7readSAMBAM, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_7readSAMBAM(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fin = 0;
  PyObject *__pyx_v_type = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readSAMBAM (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fin,&__pyx_n_s_type,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_n_u_B)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_type);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 187, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "readSAMBAM") < 0)) __PYX_ERR(0, 187, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fin = values[0];
    __pyx_v_type = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readSAMBAM", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 187, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.readSAMBAM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_6readSAMBAM(__pyx_self, __pyx_v_fin, __pyx_v_type);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_6readSAMBAM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fin, PyObject *__pyx_v_type) {
  PyObject *__pyx_v_logger = NULL;
  PyObject *__pyx_v_findata = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_v_qry_prim = NULL;
  PyObject *__pyx_v_ref_prim = NULL;
  PyObject *__pyx_v_cgdict = NULL;
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_v_aln = NULL;
  PyObject *__pyx_v_astart = NULL;
  PyObject *__pyx_v_aend = NULL;
  int __pyx_v_is_inv;
  PyObject *__pyx_v_bstart = NULL;
  PyObject *__pyx_v_bend = NULL;
  PyObject *__pyx_v_alen = NULL;
  PyObject *__pyx_v_blen = NULL;
  PyObject *__pyx_v_iden = NULL;
  long __pyx_v_adir;
  long __pyx_v_bdir;
  PyObject *__pyx_v_achr = NULL;
  PyObject *__pyx_v_bchr = NULL;
  PyObject *__pyx_v_seq = NULL;
  PyObject *__pyx_v_cg = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_9genexpr10__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr11__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr12__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr13__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr14__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  char const *__pyx_t_21;
  char const *__pyx_t_22;
  Py_ssize_t __pyx_t_23;
  PyObject *(*__pyx_t_24)(PyObject *);
  int __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  PyObject *(*__pyx_t_27)(PyObject *);
  long __pyx_t_28;
  char const *__pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readSAMBAM", 1);

  /* "msyd/pyxfiles/io.pyx":188
 * 
 * def readSAMBAM(fin, type='B'):
 *     logger = logging.getLogger('Reading BAM/SAM file')             # <<<<<<<<<<<<<<
 *     try:
 *         if type == 'B':
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_Reading_BAM_SAM_file};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_logger = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":189
 * def readSAMBAM(fin, type='B'):
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:             # <<<<<<<<<<<<<<
 *         if type == 'B':
 *             findata = pysam.AlignmentFile(fin,'rb')
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":190
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:
 *         if type == 'B':             # <<<<<<<<<<<<<<
 *             findata = pysam.AlignmentFile(fin,'rb')
 *         elif type == 'S':
 */
      __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_type, __pyx_n_u_B, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 190, __pyx_L3_error)
      if (__pyx_t_8) {

        /* "msyd/pyxfiles/io.pyx":191
 *     try:
 *         if type == 'B':
 *             findata = pysam.AlignmentFile(fin,'rb')             # <<<<<<<<<<<<<<
 *         elif type == 'S':
 *             return samtocoords(fin)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_AlignmentFile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_fin, __pyx_n_u_rb};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_v_findata = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":190
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:
 *         if type == 'B':             # <<<<<<<<<<<<<<
 *             findata = pysam.AlignmentFile(fin,'rb')
 *         elif type == 'S':
 */
        goto __pyx_L9;
      }

      /* "msyd/pyxfiles/io.pyx":192
 *         if type == 'B':
 *             findata = pysam.AlignmentFile(fin,'rb')
 *         elif type == 'S':             # <<<<<<<<<<<<<<
 *             return samtocoords(fin)
 *         else:
 */
      __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_type, __pyx_n_u_S, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 192, __pyx_L3_error)
      if (likely(__pyx_t_8)) {

        /* "msyd/pyxfiles/io.pyx":193
 *             findata = pysam.AlignmentFile(fin,'rb')
 *         elif type == 'S':
 *             return samtocoords(fin)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Wrong parameter")
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_samtocoords); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_fin};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L7_try_return;

        /* "msyd/pyxfiles/io.pyx":192
 *         if type == 'B':
 *             findata = pysam.AlignmentFile(fin,'rb')
 *         elif type == 'S':             # <<<<<<<<<<<<<<
 *             return samtocoords(fin)
 *         else:
 */
      }

      /* "msyd/pyxfiles/io.pyx":195
 *             return samtocoords(fin)
 *         else:
 *             raise ValueError("Wrong parameter")             # <<<<<<<<<<<<<<
 *     except ValueError as e:
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 195, __pyx_L3_error)
      }
      __pyx_L9:;

      /* "msyd/pyxfiles/io.pyx":189
 * def readSAMBAM(fin, type='B'):
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:             # <<<<<<<<<<<<<<
 *         if type == 'B':
 *             findata = pysam.AlignmentFile(fin,'rb')
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":196
 *         else:
 *             raise ValueError("Wrong parameter")
 *     except ValueError as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 *         sys.exit()
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readSAMBAM", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 196, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_e = __pyx_t_2;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":197
 *             raise ValueError("Wrong parameter")
 *     except ValueError as e:
 *         logger.error("Error in opening BAM/SAM file. " + str(e))             # <<<<<<<<<<<<<<
 *         sys.exit()
 *     except OSError as e:
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 197, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_Str(__pyx_v_e); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 197, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyNumber_Add(__pyx_kp_u_Error_in_opening_BAM_SAM_file, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 197, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_12};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 197, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "msyd/pyxfiles/io.pyx":198
 *     except ValueError as e:
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 *         sys.exit()             # <<<<<<<<<<<<<<
 *     except OSError as e:
 *         logger.error("Error in reading input file." + str(e))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_sys); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 198, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 198, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 198, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "msyd/pyxfiles/io.pyx":196
 *         else:
 *             raise ValueError("Wrong parameter")
 *     except ValueError as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 *         sys.exit()
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L16;
        }
        __pyx_L15_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_4 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
          goto __pyx_L5_except_error;
        }
        __pyx_L16:;
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_exception_handled;
    }

    /* "msyd/pyxfiles/io.pyx":199
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 *         sys.exit()
 *     except OSError as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in reading input file." + str(e))
 *         sys.exit()
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OSError);
    if (__pyx_t_13) {
      __Pyx_AddTraceback("msyd.io.readSAMBAM", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 199, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_e = __pyx_t_2;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":200
 *         sys.exit()
 *     except OSError as e:
 *         logger.error("Error in reading input file." + str(e))             # <<<<<<<<<<<<<<
 *         sys.exit()
 *     except Exception as e:
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 200, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_PyObject_Str(__pyx_v_e); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 200, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = PyNumber_Add(__pyx_kp_u_Error_in_reading_input_file, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 200, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_11};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "msyd/pyxfiles/io.pyx":201
 *     except OSError as e:
 *         logger.error("Error in reading input file." + str(e))
 *         sys.exit()             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error("Unexpected error in opening BAM/SAM file. " + str(e))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_sys); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 201, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 201, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 201, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "msyd/pyxfiles/io.pyx":199
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 *         sys.exit()
 *     except OSError as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in reading input file." + str(e))
 *         sys.exit()
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L27;
        }
        __pyx_L26_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_15);
          __pyx_t_13 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_21 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_16, __pyx_t_15);
          }
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
          __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_21;
          goto __pyx_L5_except_error;
        }
        __pyx_L27:;
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }

    /* "msyd/pyxfiles/io.pyx":202
 *         logger.error("Error in reading input file." + str(e))
 *         sys.exit()
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error("Unexpected error in opening BAM/SAM file. " + str(e))
 *         sys.exit()
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readSAMBAM", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 202, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __pyx_v_e = __pyx_t_2;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":203
 *         sys.exit()
 *     except Exception as e:
 *         logger.error("Unexpected error in opening BAM/SAM file. " + str(e))             # <<<<<<<<<<<<<<
 *         sys.exit()
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 203, __pyx_L37_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_Str(__pyx_v_e); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 203, __pyx_L37_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = PyNumber_Add(__pyx_kp_u_Unexpected_error_in_opening_BAM, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 203, __pyx_L37_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_10};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "msyd/pyxfiles/io.pyx":204
 *     except Exception as e:
 *         logger.error("Unexpected error in opening BAM/SAM file. " + str(e))
 *         sys.exit()             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_sys); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 204, __pyx_L37_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 204, __pyx_L37_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 204, __pyx_L37_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "msyd/pyxfiles/io.pyx":202
 *         logger.error("Error in reading input file." + str(e))
 *         sys.exit()
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error("Unexpected error in opening BAM/SAM file. " + str(e))
 *         sys.exit()
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L38;
        }
        __pyx_L37_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_4 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_22;
          goto __pyx_L5_except_error;
        }
        __pyx_L38:;
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "msyd/pyxfiles/io.pyx":189
 * def readSAMBAM(fin, type='B'):
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:             # <<<<<<<<<<<<<<
 *         if type == 'B':
 *             findata = pysam.AlignmentFile(fin,'rb')
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L8_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":206
 *         sys.exit()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         qry_prim = {}
 *         ref_prim = {}
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_6, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":207
 * 
 *     try:
 *         qry_prim = {}             # <<<<<<<<<<<<<<
 *         ref_prim = {}
 *         cgdict = {1:'I', 2:'D', 7:'=', 8:'X'}
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_qry_prim = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":208
 *     try:
 *         qry_prim = {}
 *         ref_prim = {}             # <<<<<<<<<<<<<<
 *         cgdict = {1:'I', 2:'D', 7:'=', 8:'X'}
 *         coords = {}
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_ref_prim = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":209
 *         qry_prim = {}
 *         ref_prim = {}
 *         cgdict = {1:'I', 2:'D', 7:'=', 8:'X'}             # <<<<<<<<<<<<<<
 *         coords = {}
 *         index = 0
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_int_1, __pyx_n_u_I) < 0) __PYX_ERR(0, 209, __pyx_L43_error)
      if (PyDict_SetItem(__pyx_t_3, __pyx_int_2, __pyx_n_u_D) < 0) __PYX_ERR(0, 209, __pyx_L43_error)
      if (PyDict_SetItem(__pyx_t_3, __pyx_int_7, __pyx_kp_u__19) < 0) __PYX_ERR(0, 209, __pyx_L43_error)
      if (PyDict_SetItem(__pyx_t_3, __pyx_int_8, __pyx_n_u_X) < 0) __PYX_ERR(0, 209, __pyx_L43_error)
      __pyx_v_cgdict = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":210
 *         ref_prim = {}
 *         cgdict = {1:'I', 2:'D', 7:'=', 8:'X'}
 *         coords = {}             # <<<<<<<<<<<<<<
 *         index = 0
 *         for aln in findata:
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_coords = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":211
 *         cgdict = {1:'I', 2:'D', 7:'=', 8:'X'}
 *         coords = {}
 *         index = 0             # <<<<<<<<<<<<<<
 *         for aln in findata:
 *             index += 1
 */
      __Pyx_INCREF(__pyx_int_0);
      __pyx_v_index = __pyx_int_0;

      /* "msyd/pyxfiles/io.pyx":212
 *         coords = {}
 *         index = 0
 *         for aln in findata:             # <<<<<<<<<<<<<<
 *             index += 1
 *             ## Check whether every sequence has at least one primary alignment
 */
      if (unlikely(!__pyx_v_findata)) { __Pyx_RaiseUnboundLocalError("findata"); __PYX_ERR(0, 212, __pyx_L43_error) }
      if (likely(PyList_CheckExact(__pyx_v_findata)) || PyTuple_CheckExact(__pyx_v_findata)) {
        __pyx_t_3 = __pyx_v_findata; __Pyx_INCREF(__pyx_t_3);
        __pyx_t_23 = 0;
        __pyx_t_24 = NULL;
      } else {
        __pyx_t_23 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_findata); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 212, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_24 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 212, __pyx_L43_error)
      }
      for (;;) {
        if (likely(!__pyx_t_24)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 212, __pyx_L43_error)
              #endif
              if (__pyx_t_23 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_23); __Pyx_INCREF(__pyx_t_2); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 212, __pyx_L43_error)
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 212, __pyx_L43_error)
              #endif
              if (__pyx_t_23 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_23); __Pyx_INCREF(__pyx_t_2); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 212, __pyx_L43_error)
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_24(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 212, __pyx_L43_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_aln, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":213
 *         index = 0
 *         for aln in findata:
 *             index += 1             # <<<<<<<<<<<<<<
 *             ## Check whether every sequence has at least one primary alignment
 *             if aln.reference_name is not None:
 */
        __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":215
 *             index += 1
 *             ## Check whether every sequence has at least one primary alignment
 *             if aln.reference_name is not None:             # <<<<<<<<<<<<<<
 *                 if aln.reference_name not in ref_prim.keys():
 *                     ref_prim[aln.reference_name] = False
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 215, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = (__pyx_t_2 != Py_None);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":216
 *             ## Check whether every sequence has at least one primary alignment
 *             if aln.reference_name is not None:
 *                 if aln.reference_name not in ref_prim.keys():             # <<<<<<<<<<<<<<
 *                     ref_prim[aln.reference_name] = False
 *             if aln.query_name not in qry_prim.keys():
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_v_ref_prim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 216, __pyx_L43_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_8) {

            /* "msyd/pyxfiles/io.pyx":217
 *             if aln.reference_name is not None:
 *                 if aln.reference_name not in ref_prim.keys():
 *                     ref_prim[aln.reference_name] = False             # <<<<<<<<<<<<<<
 *             if aln.query_name not in qry_prim.keys():
 *                 qry_prim[aln.query_name] = False
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            if (unlikely((PyDict_SetItem(__pyx_v_ref_prim, __pyx_t_1, Py_False) < 0))) __PYX_ERR(0, 217, __pyx_L43_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

            /* "msyd/pyxfiles/io.pyx":216
 *             ## Check whether every sequence has at least one primary alignment
 *             if aln.reference_name is not None:
 *                 if aln.reference_name not in ref_prim.keys():             # <<<<<<<<<<<<<<
 *                     ref_prim[aln.reference_name] = False
 *             if aln.query_name not in qry_prim.keys():
 */
          }

          /* "msyd/pyxfiles/io.pyx":215
 *             index += 1
 *             ## Check whether every sequence has at least one primary alignment
 *             if aln.reference_name is not None:             # <<<<<<<<<<<<<<
 *                 if aln.reference_name not in ref_prim.keys():
 *                     ref_prim[aln.reference_name] = False
 */
        }

        /* "msyd/pyxfiles/io.pyx":218
 *                 if aln.reference_name not in ref_prim.keys():
 *                     ref_prim[aln.reference_name] = False
 *             if aln.query_name not in qry_prim.keys():             # <<<<<<<<<<<<<<
 *                 qry_prim[aln.query_name] = False
 *             if aln.reference_name is not None:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyDict_Keys(__pyx_v_qry_prim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_2, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 218, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":219
 *                     ref_prim[aln.reference_name] = False
 *             if aln.query_name not in qry_prim.keys():
 *                 qry_prim[aln.query_name] = False             # <<<<<<<<<<<<<<
 *             if aln.reference_name is not None:
 *                 if not ref_prim[aln.reference_name]:
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (unlikely((PyDict_SetItem(__pyx_v_qry_prim, __pyx_t_2, Py_False) < 0))) __PYX_ERR(0, 219, __pyx_L43_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "msyd/pyxfiles/io.pyx":218
 *                 if aln.reference_name not in ref_prim.keys():
 *                     ref_prim[aln.reference_name] = False
 *             if aln.query_name not in qry_prim.keys():             # <<<<<<<<<<<<<<
 *                 qry_prim[aln.query_name] = False
 *             if aln.reference_name is not None:
 */
        }

        /* "msyd/pyxfiles/io.pyx":220
 *             if aln.query_name not in qry_prim.keys():
 *                 qry_prim[aln.query_name] = False
 *             if aln.reference_name is not None:             # <<<<<<<<<<<<<<
 *                 if not ref_prim[aln.reference_name]:
 *                     if aln.flag < 256:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = (__pyx_t_2 != Py_None);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":221
 *                 qry_prim[aln.query_name] = False
 *             if aln.reference_name is not None:
 *                 if not ref_prim[aln.reference_name]:             # <<<<<<<<<<<<<<
 *                     if aln.flag < 256:
 *                         ref_prim[aln.reference_name] = True
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_ref_prim, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 221, __pyx_L43_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_25 = (!__pyx_t_8);
          if (__pyx_t_25) {

            /* "msyd/pyxfiles/io.pyx":222
 *             if aln.reference_name is not None:
 *                 if not ref_prim[aln.reference_name]:
 *                     if aln.flag < 256:             # <<<<<<<<<<<<<<
 *                         ref_prim[aln.reference_name] = True
 *             if not qry_prim[aln.query_name]:
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_256, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L43_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 222, __pyx_L43_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_25) {

              /* "msyd/pyxfiles/io.pyx":223
 *                 if not ref_prim[aln.reference_name]:
 *                     if aln.flag < 256:
 *                         ref_prim[aln.reference_name] = True             # <<<<<<<<<<<<<<
 *             if not qry_prim[aln.query_name]:
 *                 if aln.flag < 256:
 */
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L43_error)
              __Pyx_GOTREF(__pyx_t_2);
              if (unlikely((PyDict_SetItem(__pyx_v_ref_prim, __pyx_t_2, Py_True) < 0))) __PYX_ERR(0, 223, __pyx_L43_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "msyd/pyxfiles/io.pyx":222
 *             if aln.reference_name is not None:
 *                 if not ref_prim[aln.reference_name]:
 *                     if aln.flag < 256:             # <<<<<<<<<<<<<<
 *                         ref_prim[aln.reference_name] = True
 *             if not qry_prim[aln.query_name]:
 */
            }

            /* "msyd/pyxfiles/io.pyx":221
 *                 qry_prim[aln.query_name] = False
 *             if aln.reference_name is not None:
 *                 if not ref_prim[aln.reference_name]:             # <<<<<<<<<<<<<<
 *                     if aln.flag < 256:
 *                         ref_prim[aln.reference_name] = True
 */
          }

          /* "msyd/pyxfiles/io.pyx":220
 *             if aln.query_name not in qry_prim.keys():
 *                 qry_prim[aln.query_name] = False
 *             if aln.reference_name is not None:             # <<<<<<<<<<<<<<
 *                 if not ref_prim[aln.reference_name]:
 *                     if aln.flag < 256:
 */
        }

        /* "msyd/pyxfiles/io.pyx":224
 *                     if aln.flag < 256:
 *                         ref_prim[aln.reference_name] = True
 *             if not qry_prim[aln.query_name]:             # <<<<<<<<<<<<<<
 *                 if aln.flag < 256:
 *                     qry_prim[aln.query_name] = True
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_qry_prim, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 224, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = (!__pyx_t_25);
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":225
 *                         ref_prim[aln.reference_name] = True
 *             if not qry_prim[aln.query_name]:
 *                 if aln.flag < 256:             # <<<<<<<<<<<<<<
 *                     qry_prim[aln.query_name] = True
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_flag); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_256, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L43_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 225, __pyx_L43_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__pyx_t_8) {

            /* "msyd/pyxfiles/io.pyx":226
 *             if not qry_prim[aln.query_name]:
 *                 if aln.flag < 256:
 *                     qry_prim[aln.query_name] = True             # <<<<<<<<<<<<<<
 * 
 *             ## Pass non-alinging chromosomes
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_2);
            if (unlikely((PyDict_SetItem(__pyx_v_qry_prim, __pyx_t_2, Py_True) < 0))) __PYX_ERR(0, 226, __pyx_L43_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "msyd/pyxfiles/io.pyx":225
 *                         ref_prim[aln.reference_name] = True
 *             if not qry_prim[aln.query_name]:
 *                 if aln.flag < 256:             # <<<<<<<<<<<<<<
 *                     qry_prim[aln.query_name] = True
 * 
 */
          }

          /* "msyd/pyxfiles/io.pyx":224
 *                     if aln.flag < 256:
 *                         ref_prim[aln.reference_name] = True
 *             if not qry_prim[aln.query_name]:             # <<<<<<<<<<<<<<
 *                 if aln.flag < 256:
 *                     qry_prim[aln.query_name] = True
 */
        }

        /* "msyd/pyxfiles/io.pyx":229
 * 
 *             ## Pass non-alinging chromosomes
 *             if aln.cigarstring is None:             # <<<<<<<<<<<<<<
 *                 logger.warning(aln.query_name + ' do not align with any reference chromosome and cannot be analysed')
 *                 continue
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigarstring); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = (__pyx_t_2 == Py_None);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":230
 *             ## Pass non-alinging chromosomes
 *             if aln.cigarstring is None:
 *                 logger.warning(aln.query_name + ' do not align with any reference chromosome and cannot be analysed')             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_name); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 230, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = PyNumber_Add(__pyx_t_9, __pyx_kp_u_do_not_align_with_any_reference_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 230, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          __pyx_t_13 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_13 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "msyd/pyxfiles/io.pyx":231
 *             if aln.cigarstring is None:
 *                 logger.warning(aln.query_name + ' do not align with any reference chromosome and cannot be analysed')
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             ## Check CIGAR:
 */
          goto __pyx_L49_continue;

          /* "msyd/pyxfiles/io.pyx":229
 * 
 *             ## Pass non-alinging chromosomes
 *             if aln.cigarstring is None:             # <<<<<<<<<<<<<<
 *                 logger.warning(aln.query_name + ' do not align with any reference chromosome and cannot be analysed')
 *                 continue
 */
        }

        /* "msyd/pyxfiles/io.pyx":234
 * 
 *             ## Check CIGAR:
 *             if False in [False if i[0] not in [1,2,4,5,7,8] else True for i in aln.cigartuples]:             # <<<<<<<<<<<<<<
 *                 logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(aln.cigarstring))
 *                 sys.exit()
 */
        { /* enter inner scope */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L63_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L63_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_10 = __pyx_t_1; __Pyx_INCREF(__pyx_t_10);
            __pyx_t_26 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_26 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 234, __pyx_L63_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 234, __pyx_L63_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_10))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_26); __Pyx_INCREF(__pyx_t_1); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
                #else
                __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L63_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_26); __Pyx_INCREF(__pyx_t_1); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
                #else
                __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L63_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_27(__pyx_t_10);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 234, __pyx_L63_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_i, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_9genexpr10__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 234, __pyx_L63_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_25 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_9, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
            if (__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L66_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_9, __pyx_int_2, 2, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
            if (__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L66_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_9, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
            if (__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L66_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_9, __pyx_int_5, 5, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
            if (__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L66_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_9, __pyx_int_7, 7, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
            if (__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L66_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_9, __pyx_int_8, 8, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L63_error)
            __pyx_t_8 = __pyx_t_25;
            __pyx_L66_bool_binop_done:;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_25 = __pyx_t_8;
            if (__pyx_t_25) {
              __Pyx_INCREF(Py_False);
              __pyx_t_1 = Py_False;
            } else {
              __Pyx_INCREF(Py_True);
              __pyx_t_1 = Py_True;
            }
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 234, __pyx_L63_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_i); __pyx_9genexpr10__pyx_v_i = 0;
          goto __pyx_L73_exit_scope;
          __pyx_L63_error:;
          __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_i); __pyx_9genexpr10__pyx_v_i = 0;
          goto __pyx_L43_error;
          __pyx_L73_exit_scope:;
        } /* exit inner scope */
        __pyx_t_25 = (__Pyx_PySequence_ContainsTF(Py_False, __pyx_t_2, Py_EQ)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 234, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_25) {

          /* "msyd/pyxfiles/io.pyx":235
 *             ## Check CIGAR:
 *             if False in [False if i[0] not in [1,2,4,5,7,8] else True for i in aln.cigartuples]:
 *                 logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(aln.cigarstring))             # <<<<<<<<<<<<<<
 *                 sys.exit()
 *             if len(aln.cigartuples) > 2:
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 235, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigarstring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 235, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Incorrect_CIGAR_string_found_CIG, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = NULL;
          __pyx_t_13 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_13 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_1};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "msyd/pyxfiles/io.pyx":236
 *             if False in [False if i[0] not in [1,2,4,5,7,8] else True for i in aln.cigartuples]:
 *                 logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(aln.cigarstring))
 *                 sys.exit()             # <<<<<<<<<<<<<<
 *             if len(aln.cigartuples) > 2:
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_sys); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 236, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_13 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_13 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "msyd/pyxfiles/io.pyx":234
 * 
 *             ## Check CIGAR:
 *             if False in [False if i[0] not in [1,2,4,5,7,8] else True for i in aln.cigartuples]:             # <<<<<<<<<<<<<<
 *                 logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(aln.cigarstring))
 *                 sys.exit()
 */
        }

        /* "msyd/pyxfiles/io.pyx":237
 *                 logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(aln.cigarstring))
 *                 sys.exit()
 *             if len(aln.cigartuples) > 2:             # <<<<<<<<<<<<<<
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_26 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_26 == ((Py_ssize_t)-1))) __PYX_ERR(0, 237, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_25 = (__pyx_t_26 > 2);
        if (__pyx_t_25) {

          /* "msyd/pyxfiles/io.pyx":238
 *                 sys.exit()
 *             if len(aln.cigartuples) > 2:
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:             # <<<<<<<<<<<<<<
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                     sys.exit()
 */
          { /* enter inner scope */
            __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L78_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L78_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_t_1, 1, -1L, NULL, NULL, &__pyx_slice__27, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 238, __pyx_L78_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
              __pyx_t_1 = __pyx_t_10; __Pyx_INCREF(__pyx_t_1);
              __pyx_t_26 = 0;
              __pyx_t_27 = NULL;
            } else {
              __pyx_t_26 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L78_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 238, __pyx_L78_error)
            }
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            for (;;) {
              if (likely(!__pyx_t_27)) {
                if (likely(PyList_CheckExact(__pyx_t_1))) {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 238, __pyx_L78_error)
                    #endif
                    if (__pyx_t_26 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_26); __Pyx_INCREF(__pyx_t_10); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 238, __pyx_L78_error)
                  #else
                  __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 238, __pyx_L78_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                } else {
                  {
                    Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
                    #if !CYTHON_ASSUME_SAFE_MACROS
                    if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 238, __pyx_L78_error)
                    #endif
                    if (__pyx_t_26 >= __pyx_temp) break;
                  }
                  #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                  __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_26); __Pyx_INCREF(__pyx_t_10); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 238, __pyx_L78_error)
                  #else
                  __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 238, __pyx_L78_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  #endif
                }
              } else {
                __pyx_t_10 = __pyx_t_27(__pyx_t_1);
                if (unlikely(!__pyx_t_10)) {
                  PyObject* exc_type = PyErr_Occurred();
                  if (exc_type) {
                    if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                    else __PYX_ERR(0, 238, __pyx_L78_error)
                  }
                  break;
                }
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_i, __pyx_t_10);
              __pyx_t_10 = 0;
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_9genexpr11__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 238, __pyx_L78_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 238, __pyx_L78_error)
              if (!__pyx_t_8) {
              } else {
                __pyx_t_25 = __pyx_t_8;
                goto __pyx_L81_bool_binop_done;
              }
              __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_5, 5, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 238, __pyx_L78_error)
              __pyx_t_25 = __pyx_t_8;
              __pyx_L81_bool_binop_done:;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_8 = __pyx_t_25;
              if (__pyx_t_8) {
                __Pyx_INCREF(Py_True);
                __pyx_t_10 = Py_True;
              } else {
                __Pyx_INCREF(Py_False);
                __pyx_t_10 = Py_False;
              }
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 238, __pyx_L78_error)
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_i); __pyx_9genexpr11__pyx_v_i = 0;
            goto __pyx_L84_exit_scope;
            __pyx_L78_error:;
            __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_i); __pyx_9genexpr11__pyx_v_i = 0;
            goto __pyx_L43_error;
            __pyx_L84_exit_scope:;
          } /* exit inner scope */
          __pyx_t_8 = (__Pyx_PySequence_ContainsTF(Py_True, __pyx_t_2, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 238, __pyx_L43_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__pyx_t_8) {

            /* "msyd/pyxfiles/io.pyx":239
 *             if len(aln.cigartuples) > 2:
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)             # <<<<<<<<<<<<<<
 *                     sys.exit()
 * 
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigarstring); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 239, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_9 = PyNumber_Add(__pyx_kp_u_Incorrect_CIGAR_string_found_Cli, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 239, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = NULL;
            __pyx_t_13 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
                __pyx_t_13 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_9};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 239, __pyx_L43_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "msyd/pyxfiles/io.pyx":240
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                     sys.exit()             # <<<<<<<<<<<<<<
 * 
 *             ## Parse information from the aln object
 */
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 240, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            __pyx_t_13 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
                __pyx_t_13 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L43_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "msyd/pyxfiles/io.pyx":238
 *                 sys.exit()
 *             if len(aln.cigartuples) > 2:
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:             # <<<<<<<<<<<<<<
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                     sys.exit()
 */
          }

          /* "msyd/pyxfiles/io.pyx":237
 *                 logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(aln.cigarstring))
 *                 sys.exit()
 *             if len(aln.cigartuples) > 2:             # <<<<<<<<<<<<<<
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 */
        }

        /* "msyd/pyxfiles/io.pyx":243
 * 
 *             ## Parse information from the aln object
 *             astart = aln.reference_start+1             # <<<<<<<<<<<<<<
 *             aend = aln.reference_end
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 243, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_astart, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "msyd/pyxfiles/io.pyx":244
 *             ## Parse information from the aln object
 *             astart = aln.reference_start+1
 *             aend = aln.reference_end             # <<<<<<<<<<<<<<
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False
 *             if not is_inv:
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_end); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 244, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_aend, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "msyd/pyxfiles/io.pyx":245
 *             astart = aln.reference_start+1
 *             aend = aln.reference_end
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False             # <<<<<<<<<<<<<<
 *             if not is_inv:
 *                 if aln.cigartuples[0][0] in [4,5]:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_binary_repr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_flag); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_10, __pyx_t_2, __pyx_int_12};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_25 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u_1, Py_EQ)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 245, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_25) {
          __pyx_t_8 = 1;
        } else {
          __pyx_t_8 = 0;
        }
        __pyx_v_is_inv = __pyx_t_8;

        /* "msyd/pyxfiles/io.pyx":246
 *             aend = aln.reference_end
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False
 *             if not is_inv:             # <<<<<<<<<<<<<<
 *                 if aln.cigartuples[0][0] in [4,5]:
 *                     bstart = aln.cigartuples[0][1]+1
 */
        __pyx_t_8 = (!__pyx_v_is_inv);
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":247
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False
 *             if not is_inv:
 *                 if aln.cigartuples[0][0] in [4,5]:             # <<<<<<<<<<<<<<
 *                     bstart = aln.cigartuples[0][1]+1
 *                 else:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 247, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_25 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_1, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 247, __pyx_L43_error)
          if (!__pyx_t_25) {
          } else {
            __pyx_t_8 = __pyx_t_25;
            goto __pyx_L87_bool_binop_done;
          }
          __pyx_t_25 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_1, __pyx_int_5, 5, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 247, __pyx_L43_error)
          __pyx_t_8 = __pyx_t_25;
          __pyx_L87_bool_binop_done:;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_25 = __pyx_t_8;
          if (__pyx_t_25) {

            /* "msyd/pyxfiles/io.pyx":248
 *             if not is_inv:
 *                 if aln.cigartuples[0][0] in [4,5]:
 *                     bstart = aln.cigartuples[0][1]+1             # <<<<<<<<<<<<<<
 *                 else:
 *                     bstart = 1
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 248, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 248, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF_SET(__pyx_v_bstart, __pyx_t_9);
            __pyx_t_9 = 0;

            /* "msyd/pyxfiles/io.pyx":247
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False
 *             if not is_inv:
 *                 if aln.cigartuples[0][0] in [4,5]:             # <<<<<<<<<<<<<<
 *                     bstart = aln.cigartuples[0][1]+1
 *                 else:
 */
            goto __pyx_L86;
          }

          /* "msyd/pyxfiles/io.pyx":250
 *                     bstart = aln.cigartuples[0][1]+1
 *                 else:
 *                     bstart = 1             # <<<<<<<<<<<<<<
 *                 bend = bstart + aln.query_alignment_length - 1
 *             else:
 */
          /*else*/ {
            __Pyx_INCREF(__pyx_int_1);
            __Pyx_XDECREF_SET(__pyx_v_bstart, __pyx_int_1);
          }
          __pyx_L86:;

          /* "msyd/pyxfiles/io.pyx":251
 *                 else:
 *                     bstart = 1
 *                 bend = bstart + aln.query_alignment_length - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 if aln.cigartuples[-1][0] in [4,5]:
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_alignment_length); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 251, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_1 = PyNumber_Add(__pyx_v_bstart, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 251, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF_SET(__pyx_v_bend, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "msyd/pyxfiles/io.pyx":246
 *             aend = aln.reference_end
 *             is_inv = True if np.binary_repr(aln.flag,12)[7] == '1' else False
 *             if not is_inv:             # <<<<<<<<<<<<<<
 *                 if aln.cigartuples[0][0] in [4,5]:
 *                     bstart = aln.cigartuples[0][1]+1
 */
          goto __pyx_L85;
        }

        /* "msyd/pyxfiles/io.pyx":253
 *                 bend = bstart + aln.query_alignment_length - 1
 *             else:
 *                 if aln.cigartuples[-1][0] in [4,5]:             # <<<<<<<<<<<<<<
 *                     bend = aln.cigartuples[-1][1]+1
 *                 else:
 */
        /*else*/ {
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 253, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 253, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 253, __pyx_L43_error)
          if (!__pyx_t_8) {
          } else {
            __pyx_t_25 = __pyx_t_8;
            goto __pyx_L90_bool_binop_done;
          }
          __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_5, 5, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 253, __pyx_L43_error)
          __pyx_t_25 = __pyx_t_8;
          __pyx_L90_bool_binop_done:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_8 = __pyx_t_25;
          if (__pyx_t_8) {

            /* "msyd/pyxfiles/io.pyx":254
 *             else:
 *                 if aln.cigartuples[-1][0] in [4,5]:
 *                     bend = aln.cigartuples[-1][1]+1             # <<<<<<<<<<<<<<
 *                 else:
 *                     bend = 1
 */
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 254, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_9, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 254, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_XDECREF_SET(__pyx_v_bend, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "msyd/pyxfiles/io.pyx":253
 *                 bend = bstart + aln.query_alignment_length - 1
 *             else:
 *                 if aln.cigartuples[-1][0] in [4,5]:             # <<<<<<<<<<<<<<
 *                     bend = aln.cigartuples[-1][1]+1
 *                 else:
 */
            goto __pyx_L89;
          }

          /* "msyd/pyxfiles/io.pyx":256
 *                     bend = aln.cigartuples[-1][1]+1
 *                 else:
 *                     bend = 1             # <<<<<<<<<<<<<<
 *                 bstart = bend + aln.query_alignment_length - 1
 *             alen = abs(aend - astart) + 1
 */
          /*else*/ {
            __Pyx_INCREF(__pyx_int_1);
            __Pyx_XDECREF_SET(__pyx_v_bend, __pyx_int_1);
          }
          __pyx_L89:;

          /* "msyd/pyxfiles/io.pyx":257
 *                 else:
 *                     bend = 1
 *                 bstart = bend + aln.query_alignment_length - 1             # <<<<<<<<<<<<<<
 *             alen = abs(aend - astart) + 1
 *             blen = abs(bend - bstart) + 1
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_alignment_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = PyNumber_Add(__pyx_v_bend, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 257, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_bstart, __pyx_t_1);
          __pyx_t_1 = 0;
        }
        __pyx_L85:;

        /* "msyd/pyxfiles/io.pyx":258
 *                     bend = 1
 *                 bstart = bend + aln.query_alignment_length - 1
 *             alen = abs(aend - astart) + 1             # <<<<<<<<<<<<<<
 *             blen = abs(bend - bstart) + 1
 *             iden = format((sum([i[1] for i in aln.cigartuples if i[0] == 7])/sum([i[1] for i in aln.cigartuples if i[0] in [1,2,7,8]]))*100, '.2f')
 */
        __pyx_t_1 = PyNumber_Subtract(__pyx_v_aend, __pyx_v_astart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 258, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_alen, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":259
 *                 bstart = bend + aln.query_alignment_length - 1
 *             alen = abs(aend - astart) + 1
 *             blen = abs(bend - bstart) + 1             # <<<<<<<<<<<<<<
 *             iden = format((sum([i[1] for i in aln.cigartuples if i[0] == 7])/sum([i[1] for i in aln.cigartuples if i[0] in [1,2,7,8]]))*100, '.2f')
 *             adir = 1
 */
        __pyx_t_1 = PyNumber_Subtract(__pyx_v_bend, __pyx_v_bstart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 259, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_blen, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":260
 *             alen = abs(aend - astart) + 1
 *             blen = abs(bend - bstart) + 1
 *             iden = format((sum([i[1] for i in aln.cigartuples if i[0] == 7])/sum([i[1] for i in aln.cigartuples if i[0] in [1,2,7,8]]))*100, '.2f')             # <<<<<<<<<<<<<<
 *             adir = 1
 *             bdir = -1 if is_inv else 1
 */
        { /* enter inner scope */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L94_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L94_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
            __pyx_t_2 = __pyx_t_9; __Pyx_INCREF(__pyx_t_2);
            __pyx_t_26 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_26 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L94_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 260, __pyx_L94_error)
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 260, __pyx_L94_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_9 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_26); __Pyx_INCREF(__pyx_t_9); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 260, __pyx_L94_error)
                #else
                __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L94_error)
                __Pyx_GOTREF(__pyx_t_9);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 260, __pyx_L94_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_26); __Pyx_INCREF(__pyx_t_9); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 260, __pyx_L94_error)
                #else
                __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L94_error)
                __Pyx_GOTREF(__pyx_t_9);
                #endif
              }
            } else {
              __pyx_t_9 = __pyx_t_27(__pyx_t_2);
              if (unlikely(!__pyx_t_9)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 260, __pyx_L94_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_9);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr12__pyx_v_i, __pyx_t_9);
            __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_9genexpr12__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L94_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_8 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_7, 7, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 260, __pyx_L94_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_8) {
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_9genexpr12__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L94_error)
              __Pyx_GOTREF(__pyx_t_9);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 260, __pyx_L94_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_i); __pyx_9genexpr12__pyx_v_i = 0;
          goto __pyx_L99_exit_scope;
          __pyx_L94_error:;
          __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_i); __pyx_9genexpr12__pyx_v_i = 0;
          goto __pyx_L43_error;
          __pyx_L99_exit_scope:;
        } /* exit inner scope */
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        { /* enter inner scope */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L102_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L102_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
            __pyx_t_10 = __pyx_t_9; __Pyx_INCREF(__pyx_t_10);
            __pyx_t_26 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_26 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L102_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 260, __pyx_L102_error)
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_10))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_10);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_9 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_26); __Pyx_INCREF(__pyx_t_9); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
                #else
                __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L102_error)
                __Pyx_GOTREF(__pyx_t_9);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_10);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_26); __Pyx_INCREF(__pyx_t_9); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
                #else
                __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_10, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L102_error)
                __Pyx_GOTREF(__pyx_t_9);
                #endif
              }
            } else {
              __pyx_t_9 = __pyx_t_27(__pyx_t_10);
              if (unlikely(!__pyx_t_9)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 260, __pyx_L102_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_9);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr13__pyx_v_i, __pyx_t_9);
            __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_GetItemInt(__pyx_9genexpr13__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L102_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_25 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
            if (!__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L106_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_2, 2, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
            if (!__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L106_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_7, 7, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
            if (!__pyx_t_25) {
            } else {
              __pyx_t_8 = __pyx_t_25;
              goto __pyx_L106_bool_binop_done;
            }
            __pyx_t_25 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_9, __pyx_int_8, 8, 0)); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 260, __pyx_L102_error)
            __pyx_t_8 = __pyx_t_25;
            __pyx_L106_bool_binop_done:;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_25 = __pyx_t_8;
            if (__pyx_t_25) {
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_9genexpr13__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L102_error)
              __Pyx_GOTREF(__pyx_t_9);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 260, __pyx_L102_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_i); __pyx_9genexpr13__pyx_v_i = 0;
          goto __pyx_L111_exit_scope;
          __pyx_L102_error:;
          __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_i); __pyx_9genexpr13__pyx_v_i = 0;
          goto __pyx_L43_error;
          __pyx_L111_exit_scope:;
        } /* exit inner scope */
        __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyInt_MultiplyObjC(__pyx_t_1, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10)) __PYX_ERR(0, 260, __pyx_L43_error);
        __Pyx_INCREF(__pyx_kp_u_2f);
        __Pyx_GIVEREF(__pyx_kp_u_2f);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_2f)) __PYX_ERR(0, 260, __pyx_L43_error);
        __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_format, __pyx_t_1, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_iden, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "msyd/pyxfiles/io.pyx":261
 *             blen = abs(bend - bstart) + 1
 *             iden = format((sum([i[1] for i in aln.cigartuples if i[0] == 7])/sum([i[1] for i in aln.cigartuples if i[0] in [1,2,7,8]]))*100, '.2f')
 *             adir = 1             # <<<<<<<<<<<<<<
 *             bdir = -1 if is_inv else 1
 *             achr = aln.reference_name
 */
        __pyx_v_adir = 1;

        /* "msyd/pyxfiles/io.pyx":262
 *             iden = format((sum([i[1] for i in aln.cigartuples if i[0] == 7])/sum([i[1] for i in aln.cigartuples if i[0] in [1,2,7,8]]))*100, '.2f')
 *             adir = 1
 *             bdir = -1 if is_inv else 1             # <<<<<<<<<<<<<<
 *             achr = aln.reference_name
 *             bchr = aln.query_name
 */
        if (__pyx_v_is_inv) {
          __pyx_t_28 = -1L;
        } else {
          __pyx_t_28 = 1;
        }
        __pyx_v_bdir = __pyx_t_28;

        /* "msyd/pyxfiles/io.pyx":263
 *             adir = 1
 *             bdir = -1 if is_inv else 1
 *             achr = aln.reference_name             # <<<<<<<<<<<<<<
 *             bchr = aln.query_name
 *             seq = aln.query_sequence
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_reference_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 263, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF_SET(__pyx_v_achr, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "msyd/pyxfiles/io.pyx":264
 *             bdir = -1 if is_inv else 1
 *             achr = aln.reference_name
 *             bchr = aln.query_name             # <<<<<<<<<<<<<<
 *             seq = aln.query_sequence
 *             cg = "".join([str(i[1]) + cgdict[i[0]] for i in aln.cigartuples if i[0] not in [4,5]])
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 264, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF_SET(__pyx_v_bchr, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "msyd/pyxfiles/io.pyx":265
 *             achr = aln.reference_name
 *             bchr = aln.query_name
 *             seq = aln.query_sequence             # <<<<<<<<<<<<<<
 *             cg = "".join([str(i[1]) + cgdict[i[0]] for i in aln.cigartuples if i[0] not in [4,5]])
 *             coords[index] = [astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg, seq]
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_query_sequence); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 265, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF_SET(__pyx_v_seq, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "msyd/pyxfiles/io.pyx":266
 *             bchr = aln.query_name
 *             seq = aln.query_sequence
 *             cg = "".join([str(i[1]) + cgdict[i[0]] for i in aln.cigartuples if i[0] not in [4,5]])             # <<<<<<<<<<<<<<
 *             coords[index] = [astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg, seq]
 * 
 */
        { /* enter inner scope */
          __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 266, __pyx_L114_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_aln, __pyx_n_s_cigartuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
            __pyx_t_26 = 0;
            __pyx_t_27 = NULL;
          } else {
            __pyx_t_26 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L114_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_27 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 266, __pyx_L114_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_27)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 266, __pyx_L114_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_26); __Pyx_INCREF(__pyx_t_1); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 266, __pyx_L114_error)
                #else
                __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 266, __pyx_L114_error)
                  #endif
                  if (__pyx_t_26 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_26); __Pyx_INCREF(__pyx_t_1); __pyx_t_26++; if (unlikely((0 < 0))) __PYX_ERR(0, 266, __pyx_L114_error)
                #else
                __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_26); __pyx_t_26++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_27(__pyx_t_2);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 266, __pyx_L114_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr14__pyx_v_i, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_9genexpr14__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_1, __pyx_int_4, 4, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 266, __pyx_L114_error)
            if (__pyx_t_8) {
            } else {
              __pyx_t_25 = __pyx_t_8;
              goto __pyx_L118_bool_binop_done;
            }
            __pyx_t_8 = (__Pyx_PyInt_BoolNeObjC(__pyx_t_1, __pyx_int_5, 5, 0)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 266, __pyx_L114_error)
            __pyx_t_25 = __pyx_t_8;
            __pyx_L118_bool_binop_done:;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_8 = __pyx_t_25;
            if (__pyx_t_8) {
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_9genexpr14__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_9 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 266, __pyx_L114_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_9genexpr14__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_cgdict, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 266, __pyx_L114_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = PyNumber_Add(__pyx_t_9, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L114_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 266, __pyx_L114_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_i); __pyx_9genexpr14__pyx_v_i = 0;
          goto __pyx_L121_exit_scope;
          __pyx_L114_error:;
          __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_i); __pyx_9genexpr14__pyx_v_i = 0;
          goto __pyx_L43_error;
          __pyx_L121_exit_scope:;
        } /* exit inner scope */
        __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__6, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_cg, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":267
 *             seq = aln.query_sequence
 *             cg = "".join([str(i[1]) + cgdict[i[0]] for i in aln.cigartuples if i[0] not in [4,5]])
 *             coords[index] = [astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg, seq]             # <<<<<<<<<<<<<<
 * 
 *         ## Give warning for chromosomes which do not have any primary alignment
 */
        __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_adir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_bdir); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 267, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_1 = PyList_New(13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_astart);
        __Pyx_GIVEREF(__pyx_v_astart);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_astart)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_aend);
        __Pyx_GIVEREF(__pyx_v_aend);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_aend)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_bstart);
        __Pyx_GIVEREF(__pyx_v_bstart);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_v_bstart)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_bend);
        __Pyx_GIVEREF(__pyx_v_bend);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_v_bend)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_alen);
        __Pyx_GIVEREF(__pyx_v_alen);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_v_alen)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_blen);
        __Pyx_GIVEREF(__pyx_v_blen);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 5, __pyx_v_blen)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_iden);
        __Pyx_GIVEREF(__pyx_v_iden);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 6, __pyx_v_iden)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_GIVEREF(__pyx_t_2);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_2)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_10)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_achr);
        __Pyx_GIVEREF(__pyx_v_achr);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 9, __pyx_v_achr)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_bchr);
        __Pyx_GIVEREF(__pyx_v_bchr);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 10, __pyx_v_bchr)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_cg);
        __Pyx_GIVEREF(__pyx_v_cg);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 11, __pyx_v_cg)) __PYX_ERR(0, 267, __pyx_L43_error);
        __Pyx_INCREF(__pyx_v_seq);
        __Pyx_GIVEREF(__pyx_v_seq);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 12, __pyx_v_seq)) __PYX_ERR(0, 267, __pyx_L43_error);
        __pyx_t_2 = 0;
        __pyx_t_10 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_coords, __pyx_v_index, __pyx_t_1) < 0))) __PYX_ERR(0, 267, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":212
 *         coords = {}
 *         index = 0
 *         for aln in findata:             # <<<<<<<<<<<<<<
 *             index += 1
 *             ## Check whether every sequence has at least one primary alignment
 */
        __pyx_L49_continue:;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":270
 * 
 *         ## Give warning for chromosomes which do not have any primary alignment
 *         for k,v in ref_prim.items():             # <<<<<<<<<<<<<<
 *             if not v:
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')
 */
      __pyx_t_23 = 0;
      __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_ref_prim, 1, __pyx_n_s_items, (&__pyx_t_26), (&__pyx_t_13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_1;
      __pyx_t_1 = 0;
      while (1) {
        __pyx_t_4 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_26, &__pyx_t_23, &__pyx_t_1, &__pyx_t_10, NULL, __pyx_t_13);
        if (unlikely(__pyx_t_4 == 0)) break;
        if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 270, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_1);
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "msyd/pyxfiles/io.pyx":271
 *         ## Give warning for chromosomes which do not have any primary alignment
 *         for k,v in ref_prim.items():
 *             if not v:             # <<<<<<<<<<<<<<
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')
 *         for k,v in qry_prim.items():
 */
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 271, __pyx_L43_error)
        __pyx_t_25 = (!__pyx_t_8);
        if (__pyx_t_25) {

          /* "msyd/pyxfiles/io.pyx":272
 *         for k,v in ref_prim.items():
 *             if not v:
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')             # <<<<<<<<<<<<<<
 *         for k,v in qry_prim.items():
 *             if not v:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = PyNumber_Add(__pyx_kp_u_No_primary_alignment_found_for_r, __pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_11 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_This_could_mean_that_the_entire); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 272, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Add(__pyx_t_11, __pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_is_repeated); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 272, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_11};
            __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 272, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "msyd/pyxfiles/io.pyx":271
 *         ## Give warning for chromosomes which do not have any primary alignment
 *         for k,v in ref_prim.items():
 *             if not v:             # <<<<<<<<<<<<<<
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')
 *         for k,v in qry_prim.items():
 */
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":273
 *             if not v:
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')
 *         for k,v in qry_prim.items():             # <<<<<<<<<<<<<<
 *             if not v:
 *                 logger.warning('No primary alignment found for query sequence ' + k +'. This could mean that the entire chromosome '+ k + ' is repeated.')
 */
      __pyx_t_26 = 0;
      __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_qry_prim, 1, __pyx_n_s_items, (&__pyx_t_23), (&__pyx_t_13)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 273, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_10;
      __pyx_t_10 = 0;
      while (1) {
        __pyx_t_4 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_23, &__pyx_t_26, &__pyx_t_10, &__pyx_t_1, NULL, __pyx_t_13);
        if (unlikely(__pyx_t_4 == 0)) break;
        if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 273, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":274
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')
 *         for k,v in qry_prim.items():
 *             if not v:             # <<<<<<<<<<<<<<
 *                 logger.warning('No primary alignment found for query sequence ' + k +'. This could mean that the entire chromosome '+ k + ' is repeated.')
 * 
 */
        __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely((__pyx_t_25 < 0))) __PYX_ERR(0, 274, __pyx_L43_error)
        __pyx_t_8 = (!__pyx_t_25);
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":275
 *         for k,v in qry_prim.items():
 *             if not v:
 *                 logger.warning('No primary alignment found for query sequence ' + k +'. This could mean that the entire chromosome '+ k + ' is repeated.')             # <<<<<<<<<<<<<<
 * 
 *         ## Return alignments
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_warning); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 275, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = PyNumber_Add(__pyx_kp_u_No_primary_alignment_found_for_q, __pyx_v_k); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 275, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_2 = PyNumber_Add(__pyx_t_11, __pyx_kp_u_This_could_mean_that_the_entire); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Add(__pyx_t_2, __pyx_v_k); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 275, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Add(__pyx_t_11, __pyx_kp_u_is_repeated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_2};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "msyd/pyxfiles/io.pyx":274
 *                 logger.warning('No primary alignment found for reference sequence ' + k +'. This could mean that the entire chromosome '+ k +' is repeated.')
 *         for k,v in qry_prim.items():
 *             if not v:             # <<<<<<<<<<<<<<
 *                 logger.warning('No primary alignment found for query sequence ' + k +'. This could mean that the entire chromosome '+ k + ' is repeated.')
 * 
 */
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":278
 * 
 *         ## Return alignments
 *         coords = pd.DataFrame.from_dict(coords, orient= 'index')             # <<<<<<<<<<<<<<
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *         coords.index = range(len(coords.index))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_from_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_coords);
      __Pyx_GIVEREF(__pyx_v_coords);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_coords)) __PYX_ERR(0, 278, __pyx_L43_error);
      __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 278, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_orient, __pyx_n_u_index) < 0) __PYX_ERR(0, 278, __pyx_L43_error)
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF_SET(__pyx_v_coords, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":279
 *         ## Return alignments
 *         coords = pd.DataFrame.from_dict(coords, orient= 'index')
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)             # <<<<<<<<<<<<<<
 *         coords.index = range(len(coords.index))
 *         coords[6] = coords[6].astype('float')
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_coords, __pyx_n_s_sort_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = PyList_New(6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 279, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_int_9);
      __Pyx_GIVEREF(__pyx_int_9);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_int_9)) __PYX_ERR(0, 279, __pyx_L43_error);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_int_0)) __PYX_ERR(0, 279, __pyx_L43_error);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_int_1)) __PYX_ERR(0, 279, __pyx_L43_error);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 3, __pyx_int_2)) __PYX_ERR(0, 279, __pyx_L43_error);
      __Pyx_INCREF(__pyx_int_3);
      __Pyx_GIVEREF(__pyx_int_3);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 4, __pyx_int_3)) __PYX_ERR(0, 279, __pyx_L43_error);
      __Pyx_INCREF(__pyx_int_10);
      __Pyx_GIVEREF(__pyx_int_10);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 5, __pyx_int_10)) __PYX_ERR(0, 279, __pyx_L43_error);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_10);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10)) __PYX_ERR(0, 279, __pyx_L43_error);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 279, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_inplace, Py_True) < 0) __PYX_ERR(0, 279, __pyx_L43_error)
      if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_ascending, Py_True) < 0) __PYX_ERR(0, 279, __pyx_L43_error)
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":280
 *         coords = pd.DataFrame.from_dict(coords, orient= 'index')
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *         coords.index = range(len(coords.index))             # <<<<<<<<<<<<<<
 *         coords[6] = coords[6].astype('float')
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg", "seq"]
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_coords, __pyx_n_s_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_23 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_23 == ((Py_ssize_t)-1))) __PYX_ERR(0, 280, __pyx_L43_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_23); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 280, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_coords, __pyx_n_s_index, __pyx_t_10) < 0) __PYX_ERR(0, 280, __pyx_L43_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "msyd/pyxfiles/io.pyx":281
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *         coords.index = range(len(coords.index))
 *         coords[6] = coords[6].astype('float')             # <<<<<<<<<<<<<<
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg", "seq"]
 *         return coords
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_coords, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 281, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_13 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_13 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_u_float};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 281, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      if (unlikely((__Pyx_SetItemInt(__pyx_v_coords, 6, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0))) __PYX_ERR(0, 281, __pyx_L43_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "msyd/pyxfiles/io.pyx":282
 *         coords.index = range(len(coords.index))
 *         coords[6] = coords[6].astype('float')
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg", "seq"]             # <<<<<<<<<<<<<<
 *         return coords
 *     except Exception as e:
 */
      __pyx_t_10 = PyList_New(13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 282, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_n_u_astart);
      __Pyx_GIVEREF(__pyx_n_u_astart);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_n_u_astart)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_aend);
      __Pyx_GIVEREF(__pyx_n_u_aend);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_n_u_aend)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_bstart);
      __Pyx_GIVEREF(__pyx_n_u_bstart);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_n_u_bstart)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_bend);
      __Pyx_GIVEREF(__pyx_n_u_bend);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 3, __pyx_n_u_bend)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_alen);
      __Pyx_GIVEREF(__pyx_n_u_alen);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 4, __pyx_n_u_alen)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_blen);
      __Pyx_GIVEREF(__pyx_n_u_blen);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 5, __pyx_n_u_blen)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_iden);
      __Pyx_GIVEREF(__pyx_n_u_iden);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 6, __pyx_n_u_iden)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_adir);
      __Pyx_GIVEREF(__pyx_n_u_adir);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 7, __pyx_n_u_adir)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_bdir);
      __Pyx_GIVEREF(__pyx_n_u_bdir);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 8, __pyx_n_u_bdir)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_achr);
      __Pyx_GIVEREF(__pyx_n_u_achr);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 9, __pyx_n_u_achr)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_bchr);
      __Pyx_GIVEREF(__pyx_n_u_bchr);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 10, __pyx_n_u_bchr)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_cg);
      __Pyx_GIVEREF(__pyx_n_u_cg);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 11, __pyx_n_u_cg)) __PYX_ERR(0, 282, __pyx_L43_error);
      __Pyx_INCREF(__pyx_n_u_seq);
      __Pyx_GIVEREF(__pyx_n_u_seq);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 12, __pyx_n_u_seq)) __PYX_ERR(0, 282, __pyx_L43_error);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_coords, __pyx_n_s_columns, __pyx_t_10) < 0) __PYX_ERR(0, 282, __pyx_L43_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "msyd/pyxfiles/io.pyx":283
 *         coords[6] = coords[6].astype('float')
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg", "seq"]
 *         return coords             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         logger.error("Error in reading BAM/SAM file. " + str(e))
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_coords);
      __pyx_r = __pyx_v_coords;
      goto __pyx_L47_try_return;

      /* "msyd/pyxfiles/io.pyx":206
 *         sys.exit()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         qry_prim = {}
 *         ref_prim = {}
 */
    }
    __pyx_L43_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "msyd/pyxfiles/io.pyx":284
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg", "seq"]
 *         return coords
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in reading BAM/SAM file. " + str(e))
 *         sys.exit()
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("msyd.io.readSAMBAM", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 284, __pyx_L45_except_error)
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_e = __pyx_t_1;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":285
 *         return coords
 *     except Exception as e:
 *         logger.error("Error in reading BAM/SAM file. " + str(e))             # <<<<<<<<<<<<<<
 *         sys.exit()
 * # END
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 285, __pyx_L134_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_9 = __Pyx_PyObject_Str(__pyx_v_e); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 285, __pyx_L134_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_12 = PyNumber_Add(__pyx_kp_u_Error_in_reading_BAM_SAM_file, __pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 285, __pyx_L134_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_12};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L134_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":286
 *     except Exception as e:
 *         logger.error("Error in reading BAM/SAM file. " + str(e))
 *         sys.exit()             # <<<<<<<<<<<<<<
 * # END
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_sys); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 286, __pyx_L134_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 286, __pyx_L134_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_13 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_13 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L134_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "msyd/pyxfiles/io.pyx":284
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg", "seq"]
 *         return coords
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in reading BAM/SAM file. " + str(e))
 *         sys.exit()
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L135;
        }
        __pyx_L134_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_15);
          __pyx_t_13 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_29 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_16, __pyx_t_15);
          }
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_19);
          __Pyx_XGIVEREF(__pyx_t_18);
          __Pyx_ErrRestore(__pyx_t_20, __pyx_t_19, __pyx_t_18);
          __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0; __pyx_t_15 = 0;
          __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_29;
          goto __pyx_L45_except_error;
        }
        __pyx_L135:;
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L44_exception_handled;
    }
    goto __pyx_L45_except_error;

    /* "msyd/pyxfiles/io.pyx":206
 *         sys.exit()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         qry_prim = {}
 *         ref_prim = {}
 */
    __pyx_L45_except_error:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L47_try_return:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
    goto __pyx_L0;
    __pyx_L44_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_6, __pyx_t_5);
  }

  /* "msyd/pyxfiles/io.pyx":187
 * # END
 * 
 * def readSAMBAM(fin, type='B'):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("msyd.io.readSAMBAM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_logger);
  __Pyx_XDECREF(__pyx_v_findata);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_qry_prim);
  __Pyx_XDECREF(__pyx_v_ref_prim);
  __Pyx_XDECREF(__pyx_v_cgdict);
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XDECREF(__pyx_v_aln);
  __Pyx_XDECREF(__pyx_v_astart);
  __Pyx_XDECREF(__pyx_v_aend);
  __Pyx_XDECREF(__pyx_v_bstart);
  __Pyx_XDECREF(__pyx_v_bend);
  __Pyx_XDECREF(__pyx_v_alen);
  __Pyx_XDECREF(__pyx_v_blen);
  __Pyx_XDECREF(__pyx_v_iden);
  __Pyx_XDECREF(__pyx_v_achr);
  __Pyx_XDECREF(__pyx_v_bchr);
  __Pyx_XDECREF(__pyx_v_seq);
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":289
 * # END
 * 
 * def readPAF(paf):             # <<<<<<<<<<<<<<
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_9readPAF(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_9readPAF = {"readPAF", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_9readPAF, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_9readPAF(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_paf = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readPAF (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_paf,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_paf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "readPAF") < 0)) __PYX_ERR(0, 289, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_paf = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readPAF", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 289, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.readPAF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_8readPAF(__pyx_self, __pyx_v_paf);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_8readPAF(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_paf) {
  PyObject *__pyx_v_coords = NULL;
  PyObject *__pyx_v_logger = NULL;
  PyObject *__pyx_v_fin = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_astart = NULL;
  PyObject *__pyx_v_aend = NULL;
  long __pyx_v_adir;
  long __pyx_v_bdir;
  PyObject *__pyx_v_bstart = NULL;
  PyObject *__pyx_v_bend = NULL;
  PyObject *__pyx_v_alen = NULL;
  PyObject *__pyx_v_blen = NULL;
  PyObject *__pyx_v_cg = NULL;
  PyObject *__pyx_v_iden = NULL;
  PyObject *__pyx_v_achr = NULL;
  PyObject *__pyx_v_bchr = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_9genexpr15__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr16__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr17__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr18__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr19__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  long __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  int __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_t_26;
  char const *__pyx_t_27;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readPAF", 1);

  /* "msyd/pyxfiles/io.pyx":290
 * 
 * def readPAF(paf):
 *     coords = deque()             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('Reading PAF file')
 *     try:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_coords = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":291
 * def readPAF(paf):
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')             # <<<<<<<<<<<<<<
 *     try:
 *         with open(paf, 'r') as fin:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_Reading_PAF_file};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_logger = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":292
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 *     try:             # <<<<<<<<<<<<<<
 *         with open(paf, 'r') as fin:
 *             for line in fin:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":293
 *     logger = logging.getLogger('Reading PAF file')
 *     try:
 *         with open(paf, 'r') as fin:             # <<<<<<<<<<<<<<
 *             for line in fin:
 *                 line = line.strip().split()
 */
      /*with:*/ {
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_paf);
        __Pyx_GIVEREF(__pyx_v_paf);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_paf)) __PYX_ERR(0, 293, __pyx_L3_error);
        __Pyx_INCREF(__pyx_n_u_r);
        __Pyx_GIVEREF(__pyx_n_u_r);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_r)) __PYX_ERR(0, 293, __pyx_L3_error);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 293, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __pyx_t_1;
        __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        /*try:*/ {
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_10);
            __Pyx_XGOTREF(__pyx_t_11);
            __Pyx_XGOTREF(__pyx_t_12);
            /*try:*/ {
              __pyx_v_fin = __pyx_t_2;
              __pyx_t_2 = 0;

              /* "msyd/pyxfiles/io.pyx":294
 *     try:
 *         with open(paf, 'r') as fin:
 *             for line in fin:             # <<<<<<<<<<<<<<
 *                 line = line.strip().split()
 *                 astart = int(line[7]) + 1
 */
              if (likely(PyList_CheckExact(__pyx_v_fin)) || PyTuple_CheckExact(__pyx_v_fin)) {
                __pyx_t_2 = __pyx_v_fin; __Pyx_INCREF(__pyx_t_2);
                __pyx_t_13 = 0;
                __pyx_t_14 = NULL;
              } else {
                __pyx_t_13 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_fin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 294, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 294, __pyx_L13_error)
              }
              for (;;) {
                if (likely(!__pyx_t_14)) {
                  if (likely(PyList_CheckExact(__pyx_t_2))) {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 294, __pyx_L13_error)
                      #endif
                      if (__pyx_t_13 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 294, __pyx_L13_error)
                    #else
                    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    #endif
                  } else {
                    {
                      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
                      #if !CYTHON_ASSUME_SAFE_MACROS
                      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 294, __pyx_L13_error)
                      #endif
                      if (__pyx_t_13 >= __pyx_temp) break;
                    }
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 294, __pyx_L13_error)
                    #else
                    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    #endif
                  }
                } else {
                  __pyx_t_3 = __pyx_t_14(__pyx_t_2);
                  if (unlikely(!__pyx_t_3)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 294, __pyx_L13_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_3);
                }
                __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":295
 *         with open(paf, 'r') as fin:
 *             for line in fin:
 *                 line = line.strip().split()             # <<<<<<<<<<<<<<
 *                 astart = int(line[7]) + 1
 *                 aend = int(line[8])
 */
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 295, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_15 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_9))) {
                  __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_9);
                  if (likely(__pyx_t_15)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                    __Pyx_INCREF(__pyx_t_15);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_9, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_15, NULL};
                  __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                }
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 295, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __pyx_t_1 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_9))) {
                  __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
                  if (likely(__pyx_t_1)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                    __Pyx_INCREF(__pyx_t_1);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_9, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                }
                __Pyx_DECREF_SET(__pyx_v_line, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":296
 *             for line in fin:
 *                 line = line.strip().split()
 *                 astart = int(line[7]) + 1             # <<<<<<<<<<<<<<
 *                 aend = int(line[8])
 *                 adir = 1
 */
                __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_line, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 296, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_astart, __pyx_t_3);
                __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":297
 *                 line = line.strip().split()
 *                 astart = int(line[7]) + 1
 *                 aend = int(line[8])             # <<<<<<<<<<<<<<
 *                 adir = 1
 *                 bdir = 1 if line[4] == '+' else -1
 */
                __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_line, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_9 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 297, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF_SET(__pyx_v_aend, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":298
 *                 astart = int(line[7]) + 1
 *                 aend = int(line[8])
 *                 adir = 1             # <<<<<<<<<<<<<<
 *                 bdir = 1 if line[4] == '+' else -1
 *                 bstart = int(line[2]) + 1 if bdir == 1 else int(line[3])
 */
                __pyx_v_adir = 1;

                /* "msyd/pyxfiles/io.pyx":299
 *                 aend = int(line[8])
 *                 adir = 1
 *                 bdir = 1 if line[4] == '+' else -1             # <<<<<<<<<<<<<<
 *                 bstart = int(line[2]) + 1 if bdir == 1 else int(line[3])
 *                 bend = int(line[3]) if bdir == 1 else int(line[2]) + 1
 */
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_line, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 299, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_kp_u__28, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 299, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                if (__pyx_t_17) {
                  __pyx_t_16 = 1;
                } else {
                  __pyx_t_16 = -1L;
                }
                __pyx_v_bdir = __pyx_t_16;

                /* "msyd/pyxfiles/io.pyx":300
 *                 adir = 1
 *                 bdir = 1 if line[4] == '+' else -1
 *                 bstart = int(line[2]) + 1 if bdir == 1 else int(line[3])             # <<<<<<<<<<<<<<
 *                 bend = int(line[3]) if bdir == 1 else int(line[2]) + 1
 *                 alen = abs(aend - astart) + 1
 */
                __pyx_t_17 = (__pyx_v_bdir == 1);
                if (__pyx_t_17) {
                  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_line, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_9 = __pyx_t_3;
                  __pyx_t_3 = 0;
                } else {
                  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_line, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_9 = __pyx_t_1;
                  __pyx_t_1 = 0;
                }
                __Pyx_XDECREF_SET(__pyx_v_bstart, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":301
 *                 bdir = 1 if line[4] == '+' else -1
 *                 bstart = int(line[2]) + 1 if bdir == 1 else int(line[3])
 *                 bend = int(line[3]) if bdir == 1 else int(line[2]) + 1             # <<<<<<<<<<<<<<
 *                 alen = abs(aend - astart) + 1
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1
 */
                __pyx_t_17 = (__pyx_v_bdir == 1);
                if (__pyx_t_17) {
                  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_line, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_9 = __pyx_t_3;
                  __pyx_t_3 = 0;
                } else {
                  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_line, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_9 = __pyx_t_3;
                  __pyx_t_3 = 0;
                }
                __Pyx_XDECREF_SET(__pyx_v_bend, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":302
 *                 bstart = int(line[2]) + 1 if bdir == 1 else int(line[3])
 *                 bend = int(line[3]) if bdir == 1 else int(line[2]) + 1
 *                 alen = abs(aend - astart) + 1             # <<<<<<<<<<<<<<
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']
 */
                __pyx_t_9 = PyNumber_Subtract(__pyx_v_aend, __pyx_v_astart); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 302, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 302, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_XDECREF_SET(__pyx_v_alen, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":303
 *                 bend = int(line[3]) if bdir == 1 else int(line[2]) + 1
 *                 alen = abs(aend - astart) + 1
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1             # <<<<<<<<<<<<<<
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']
 *                 if len(cg) != 1:
 */
                __pyx_t_17 = (__pyx_v_bdir == 1);
                if (__pyx_t_17) {
                  __pyx_t_3 = PyNumber_Subtract(__pyx_v_bend, __pyx_v_bstart); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_t_9 = __pyx_t_3;
                  __pyx_t_3 = 0;
                } else {
                  __pyx_t_3 = PyNumber_Subtract(__pyx_v_bstart, __pyx_v_bend); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_9 = __pyx_t_1;
                  __pyx_t_1 = 0;
                }
                __Pyx_XDECREF_SET(__pyx_v_blen, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":304
 *                 alen = abs(aend - astart) + 1
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']             # <<<<<<<<<<<<<<
 *                 if len(cg) != 1:
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))
 */
                { /* enter inner scope */
                  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 304, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_line, 12, 0, NULL, NULL, &__pyx_slice__29, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L23_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
                    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
                    __pyx_t_18 = 0;
                    __pyx_t_19 = NULL;
                  } else {
                    __pyx_t_18 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 304, __pyx_L23_error)
                  }
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_19)) {
                      if (likely(PyList_CheckExact(__pyx_t_3))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 304, __pyx_L23_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_1); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 304, __pyx_L23_error)
                        #else
                        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 304, __pyx_L23_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_1); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 304, __pyx_L23_error)
                        #else
                        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        #endif
                      }
                    } else {
                      __pyx_t_1 = __pyx_t_19(__pyx_t_3);
                      if (unlikely(!__pyx_t_1)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 304, __pyx_L23_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_1);
                    }
                    __Pyx_XDECREF_SET(__pyx_9genexpr15__pyx_v_i, __pyx_t_1);
                    __pyx_t_1 = 0;
                    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_9genexpr15__pyx_v_i, 0, 2, NULL, NULL, &__pyx_slice__30, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L23_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_cg, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 304, __pyx_L23_error)
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (__pyx_t_17) {
                      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr15__pyx_v_i, __pyx_n_s_split); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 304, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __pyx_t_20 = NULL;
                      __pyx_t_4 = 0;
                      #if CYTHON_UNPACK_METHODS
                      if (likely(PyMethod_Check(__pyx_t_15))) {
                        __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
                        if (likely(__pyx_t_20)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                          __Pyx_INCREF(__pyx_t_20);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_15, function);
                          __pyx_t_4 = 1;
                        }
                      }
                      #endif
                      {
                        PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_kp_u__12};
                        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L23_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      }
                      __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 304, __pyx_L23_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 304, __pyx_L23_error)
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_i); __pyx_9genexpr15__pyx_v_i = 0;
                  goto __pyx_L28_exit_scope;
                  __pyx_L23_error:;
                  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_i); __pyx_9genexpr15__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L28_exit_scope:;
                } /* exit inner scope */
                __Pyx_XDECREF_SET(__pyx_v_cg, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":305
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']
 *                 if len(cg) != 1:             # <<<<<<<<<<<<<<
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))
 *                     sys.exit()
 */
                __pyx_t_18 = PyObject_Length(__pyx_v_cg); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 305, __pyx_L13_error)
                __pyx_t_17 = (__pyx_t_18 != 1);
                if (__pyx_t_17) {

                  /* "msyd/pyxfiles/io.pyx":306
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']
 *                 if len(cg) != 1:
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))             # <<<<<<<<<<<<<<
 *                     sys.exit()
 *                 cg = cg[0]
 */
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_CIGAR_string_is_not_present_in_P, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_20 = PyUnicode_Join(__pyx_kp_u__14, __pyx_v_line); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 306, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_21 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_1))) {
                    __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
                    if (likely(__pyx_t_21)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                      __Pyx_INCREF(__pyx_t_21);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_1, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_20};
                    __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 306, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  }
                  __pyx_t_1 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_1)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_1);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_15};
                    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 306, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                  /* "msyd/pyxfiles/io.pyx":307
 *                 if len(cg) != 1:
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))
 *                     sys.exit()             # <<<<<<<<<<<<<<
 *                 cg = cg[0]
 *                 ## Check CIGAR:
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 307, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_3 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_15))) {
                    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
                    if (likely(__pyx_t_3)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                      __Pyx_INCREF(__pyx_t_3);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_15, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
                    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 307, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                  /* "msyd/pyxfiles/io.pyx":305
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']
 *                 if len(cg) != 1:             # <<<<<<<<<<<<<<
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))
 *                     sys.exit()
 */
                }

                /* "msyd/pyxfiles/io.pyx":308
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))
 *                     sys.exit()
 *                 cg = cg[0]             # <<<<<<<<<<<<<<
 *                 ## Check CIGAR:
 *                 if not all([True if i[1] in {'I', 'D', 'H', 'S', 'X', '='} else False for i in cgtpl(cg)]):
 */
                __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_cg, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 308, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF_SET(__pyx_v_cg, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "msyd/pyxfiles/io.pyx":310
 *                 cg = cg[0]
 *                 ## Check CIGAR:
 *                 if not all([True if i[1] in {'I', 'D', 'H', 'S', 'X', '='} else False for i in cgtpl(cg)]):             # <<<<<<<<<<<<<<
 *                     logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(cg))
 *                     sys.exit()
 */
                { /* enter inner scope */
                  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 310, __pyx_L33_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cgtpl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L33_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_1)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_1);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_cg};
                    __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 310, __pyx_L33_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  }
                  if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
                    __pyx_t_3 = __pyx_t_15; __Pyx_INCREF(__pyx_t_3);
                    __pyx_t_18 = 0;
                    __pyx_t_19 = NULL;
                  } else {
                    __pyx_t_18 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L33_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 310, __pyx_L33_error)
                  }
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_19)) {
                      if (likely(PyList_CheckExact(__pyx_t_3))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_15); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                        #else
                        __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 310, __pyx_L33_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_15); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                        #else
                        __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 310, __pyx_L33_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        #endif
                      }
                    } else {
                      __pyx_t_15 = __pyx_t_19(__pyx_t_3);
                      if (unlikely(!__pyx_t_15)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 310, __pyx_L33_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_15);
                    }
                    __Pyx_XDECREF_SET(__pyx_9genexpr16__pyx_v_i, __pyx_t_15);
                    __pyx_t_15 = 0;
                    __pyx_t_1 = __Pyx_GetItemInt(__pyx_9genexpr16__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L33_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_I, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                    if (!__pyx_t_22) {
                    } else {
                      __pyx_t_17 = __pyx_t_22;
                      goto __pyx_L36_bool_binop_done;
                    }
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_D, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                    if (!__pyx_t_22) {
                    } else {
                      __pyx_t_17 = __pyx_t_22;
                      goto __pyx_L36_bool_binop_done;
                    }
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_H, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                    if (!__pyx_t_22) {
                    } else {
                      __pyx_t_17 = __pyx_t_22;
                      goto __pyx_L36_bool_binop_done;
                    }
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_S, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                    if (!__pyx_t_22) {
                    } else {
                      __pyx_t_17 = __pyx_t_22;
                      goto __pyx_L36_bool_binop_done;
                    }
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                    if (!__pyx_t_22) {
                    } else {
                      __pyx_t_17 = __pyx_t_22;
                      goto __pyx_L36_bool_binop_done;
                    }
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L33_error)
                    __pyx_t_17 = __pyx_t_22;
                    __pyx_L36_bool_binop_done:;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_22 = __pyx_t_17;
                    if (__pyx_t_22) {
                      __Pyx_INCREF(Py_True);
                      __pyx_t_15 = Py_True;
                    } else {
                      __Pyx_INCREF(Py_False);
                      __pyx_t_15 = Py_False;
                    }
                    if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 310, __pyx_L33_error)
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_i); __pyx_9genexpr16__pyx_v_i = 0;
                  goto __pyx_L43_exit_scope;
                  __pyx_L33_error:;
                  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_i); __pyx_9genexpr16__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L43_exit_scope:;
                } /* exit inner scope */
                __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 310, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_17 = (!__pyx_t_22);
                if (__pyx_t_17) {

                  /* "msyd/pyxfiles/io.pyx":311
 *                 ## Check CIGAR:
 *                 if not all([True if i[1] in {'I', 'D', 'H', 'S', 'X', '='} else False for i in cgtpl(cg)]):
 *                     logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(cg))             # <<<<<<<<<<<<<<
 *                     sys.exit()
 *                 if len(cgtpl(cg)) > 2:
 */
                  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_15 = __Pyx_PyObject_Str(__pyx_v_cg); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 311, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Incorrect_CIGAR_string_found_CIG, __pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_9))) {
                    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_9);
                    if (likely(__pyx_t_15)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                      __Pyx_INCREF(__pyx_t_15);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_9, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_1};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                  /* "msyd/pyxfiles/io.pyx":312
 *                 if not all([True if i[1] in {'I', 'D', 'H', 'S', 'X', '='} else False for i in cgtpl(cg)]):
 *                     logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(cg))
 *                     sys.exit()             # <<<<<<<<<<<<<<
 *                 if len(cgtpl(cg)) > 2:
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_sys); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 312, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __pyx_t_9 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_1))) {
                    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
                    if (likely(__pyx_t_9)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                      __Pyx_INCREF(__pyx_t_9);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_1, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                  /* "msyd/pyxfiles/io.pyx":310
 *                 cg = cg[0]
 *                 ## Check CIGAR:
 *                 if not all([True if i[1] in {'I', 'D', 'H', 'S', 'X', '='} else False for i in cgtpl(cg)]):             # <<<<<<<<<<<<<<
 *                     logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(cg))
 *                     sys.exit()
 */
                }

                /* "msyd/pyxfiles/io.pyx":313
 *                     logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(cg))
 *                     sys.exit()
 *                 if len(cgtpl(cg)) > 2:             # <<<<<<<<<<<<<<
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + str(cg))
 */
                __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_cgtpl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_9 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (unlikely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_9)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_9);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_cg};
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                }
                __pyx_t_18 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 313, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_17 = (__pyx_t_18 > 2);
                if (__pyx_t_17) {

                  /* "msyd/pyxfiles/io.pyx":314
 *                     sys.exit()
 *                 if len(cgtpl(cg)) > 2:
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):             # <<<<<<<<<<<<<<
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + str(cg))
 *                         sys.exit()
 */
                  { /* enter inner scope */
                    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L48_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_cgtpl); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 314, __pyx_L48_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_15 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (unlikely(PyMethod_Check(__pyx_t_9))) {
                      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_9);
                      if (likely(__pyx_t_15)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                        __Pyx_INCREF(__pyx_t_15);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_9, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_v_cg};
                      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L48_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    }
                    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
                      __pyx_t_9 = __pyx_t_1; __Pyx_INCREF(__pyx_t_9);
                      __pyx_t_18 = 0;
                      __pyx_t_19 = NULL;
                    } else {
                      __pyx_t_18 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 314, __pyx_L48_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 314, __pyx_L48_error)
                    }
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    for (;;) {
                      if (likely(!__pyx_t_19)) {
                        if (likely(PyList_CheckExact(__pyx_t_9))) {
                          {
                            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_9);
                            #if !CYTHON_ASSUME_SAFE_MACROS
                            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 314, __pyx_L48_error)
                            #endif
                            if (__pyx_t_18 >= __pyx_temp) break;
                          }
                          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_18); __Pyx_INCREF(__pyx_t_1); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 314, __pyx_L48_error)
                          #else
                          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L48_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          #endif
                        } else {
                          {
                            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_9);
                            #if !CYTHON_ASSUME_SAFE_MACROS
                            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 314, __pyx_L48_error)
                            #endif
                            if (__pyx_t_18 >= __pyx_temp) break;
                          }
                          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_18); __Pyx_INCREF(__pyx_t_1); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 314, __pyx_L48_error)
                          #else
                          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_9, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L48_error)
                          __Pyx_GOTREF(__pyx_t_1);
                          #endif
                        }
                      } else {
                        __pyx_t_1 = __pyx_t_19(__pyx_t_9);
                        if (unlikely(!__pyx_t_1)) {
                          PyObject* exc_type = PyErr_Occurred();
                          if (exc_type) {
                            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                            else __PYX_ERR(0, 314, __pyx_L48_error)
                          }
                          break;
                        }
                        __Pyx_GOTREF(__pyx_t_1);
                      }
                      __Pyx_XDECREF_SET(__pyx_9genexpr17__pyx_v_i, __pyx_t_1);
                      __pyx_t_1 = 0;
                      __pyx_t_15 = __Pyx_GetItemInt(__pyx_9genexpr17__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 314, __pyx_L48_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_15, __pyx_n_u_H, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 314, __pyx_L48_error)
                      if (!__pyx_t_22) {
                      } else {
                        __pyx_t_17 = __pyx_t_22;
                        goto __pyx_L51_bool_binop_done;
                      }
                      __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_15, __pyx_n_u_S, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 314, __pyx_L48_error)
                      __pyx_t_17 = __pyx_t_22;
                      __pyx_L51_bool_binop_done:;
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __pyx_t_22 = __pyx_t_17;
                      if (__pyx_t_22) {
                        __Pyx_INCREF(Py_True);
                        __pyx_t_1 = Py_True;
                      } else {
                        __Pyx_INCREF(Py_False);
                        __pyx_t_1 = Py_False;
                      }
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 314, __pyx_L48_error)
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_i); __pyx_9genexpr17__pyx_v_i = 0;
                    goto __pyx_L54_exit_scope;
                    __pyx_L48_error:;
                    __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_i); __pyx_9genexpr17__pyx_v_i = 0;
                    goto __pyx_L13_error;
                    __pyx_L54_exit_scope:;
                  } /* exit inner scope */
                  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_any, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 314, __pyx_L13_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 314, __pyx_L13_error)
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  if (__pyx_t_22) {

                    /* "msyd/pyxfiles/io.pyx":315
 *                 if len(cgtpl(cg)) > 2:
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + str(cg))             # <<<<<<<<<<<<<<
 *                         sys.exit()
 * 
 */
                    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_v_cg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_15 = PyNumber_Add(__pyx_kp_u_Incorrect_CIGAR_string_found_Cli, __pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 315, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_1 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (likely(PyMethod_Check(__pyx_t_3))) {
                      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
                      if (likely(__pyx_t_1)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                        __Pyx_INCREF(__pyx_t_1);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_3, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_15};
                      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 315, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                    /* "msyd/pyxfiles/io.pyx":316
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + str(cg))
 *                         sys.exit()             # <<<<<<<<<<<<<<
 * 
 *                 iden = round((sum([int(i[0]) for i in cgtpl(cg) if i[1] == '='])/sum([int(i[0]) for i in cgtpl(cg) if i[1] in {'=', 'X', 'D', 'I'}]))*100, 2)
 */
                    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 316, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_3 = NULL;
                    __pyx_t_4 = 0;
                    #if CYTHON_UNPACK_METHODS
                    if (unlikely(PyMethod_Check(__pyx_t_15))) {
                      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
                      if (likely(__pyx_t_3)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                        __Pyx_INCREF(__pyx_t_3);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_15, function);
                        __pyx_t_4 = 1;
                      }
                    }
                    #endif
                    {
                      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
                      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L13_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    }
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

                    /* "msyd/pyxfiles/io.pyx":314
 *                     sys.exit()
 *                 if len(cgtpl(cg)) > 2:
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):             # <<<<<<<<<<<<<<
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + str(cg))
 *                         sys.exit()
 */
                  }

                  /* "msyd/pyxfiles/io.pyx":313
 *                     logger.error("Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: " + str(cg))
 *                     sys.exit()
 *                 if len(cgtpl(cg)) > 2:             # <<<<<<<<<<<<<<
 *                     if any([True if i[1] in {'H', 'S'} else False for i in cgtpl(cg)]):
 *                         logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + str(cg))
 */
                }

                /* "msyd/pyxfiles/io.pyx":318
 *                         sys.exit()
 * 
 *                 iden = round((sum([int(i[0]) for i in cgtpl(cg) if i[1] == '='])/sum([int(i[0]) for i in cgtpl(cg) if i[1] in {'=', 'X', 'D', 'I'}]))*100, 2)             # <<<<<<<<<<<<<<
 *                 achr = line[5]
 *                 bchr = line[0]
 */
                { /* enter inner scope */
                  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 318, __pyx_L57_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_cgtpl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L57_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_1 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_1)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_1);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_cg};
                    __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L57_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  }
                  if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
                    __pyx_t_3 = __pyx_t_15; __Pyx_INCREF(__pyx_t_3);
                    __pyx_t_18 = 0;
                    __pyx_t_19 = NULL;
                  } else {
                    __pyx_t_18 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L57_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 318, __pyx_L57_error)
                  }
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_19)) {
                      if (likely(PyList_CheckExact(__pyx_t_3))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 318, __pyx_L57_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_15 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_15); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 318, __pyx_L57_error)
                        #else
                        __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L57_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 318, __pyx_L57_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_18); __Pyx_INCREF(__pyx_t_15); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 318, __pyx_L57_error)
                        #else
                        __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L57_error)
                        __Pyx_GOTREF(__pyx_t_15);
                        #endif
                      }
                    } else {
                      __pyx_t_15 = __pyx_t_19(__pyx_t_3);
                      if (unlikely(!__pyx_t_15)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 318, __pyx_L57_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_15);
                    }
                    __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v_i, __pyx_t_15);
                    __pyx_t_15 = 0;
                    __pyx_t_15 = __Pyx_GetItemInt(__pyx_9genexpr18__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L57_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __pyx_t_22 = (__Pyx_PyUnicode_Equals(__pyx_t_15, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 318, __pyx_L57_error)
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    if (__pyx_t_22) {
                      __pyx_t_15 = __Pyx_GetItemInt(__pyx_9genexpr18__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L57_error)
                      __Pyx_GOTREF(__pyx_t_15);
                      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L57_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 318, __pyx_L57_error)
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_i); __pyx_9genexpr18__pyx_v_i = 0;
                  goto __pyx_L62_exit_scope;
                  __pyx_L57_error:;
                  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_i); __pyx_9genexpr18__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L62_exit_scope:;
                } /* exit inner scope */
                __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                { /* enter inner scope */
                  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 318, __pyx_L65_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_cgtpl); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L65_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_20 = NULL;
                  __pyx_t_4 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_15))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_15);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_15, function);
                      __pyx_t_4 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_v_cg};
                    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L65_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  }
                  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
                    __pyx_t_15 = __pyx_t_1; __Pyx_INCREF(__pyx_t_15);
                    __pyx_t_18 = 0;
                    __pyx_t_19 = NULL;
                  } else {
                    __pyx_t_18 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L65_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __pyx_t_19 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 318, __pyx_L65_error)
                  }
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  for (;;) {
                    if (likely(!__pyx_t_19)) {
                      if (likely(PyList_CheckExact(__pyx_t_15))) {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_18); __Pyx_INCREF(__pyx_t_1); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                        #else
                        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L65_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        #endif
                      } else {
                        {
                          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                          #if !CYTHON_ASSUME_SAFE_MACROS
                          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                          #endif
                          if (__pyx_t_18 >= __pyx_temp) break;
                        }
                        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_18); __Pyx_INCREF(__pyx_t_1); __pyx_t_18++; if (unlikely((0 < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                        #else
                        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_18); __pyx_t_18++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L65_error)
                        __Pyx_GOTREF(__pyx_t_1);
                        #endif
                      }
                    } else {
                      __pyx_t_1 = __pyx_t_19(__pyx_t_15);
                      if (unlikely(!__pyx_t_1)) {
                        PyObject* exc_type = PyErr_Occurred();
                        if (exc_type) {
                          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                          else __PYX_ERR(0, 318, __pyx_L65_error)
                        }
                        break;
                      }
                      __Pyx_GOTREF(__pyx_t_1);
                    }
                    __Pyx_XDECREF_SET(__pyx_9genexpr19__pyx_v_i, __pyx_t_1);
                    __pyx_t_1 = 0;
                    __pyx_t_1 = __Pyx_GetItemInt(__pyx_9genexpr19__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L65_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_kp_u__19, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                    if (!__pyx_t_17) {
                    } else {
                      __pyx_t_22 = __pyx_t_17;
                      goto __pyx_L69_bool_binop_done;
                    }
                    __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_X, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                    if (!__pyx_t_17) {
                    } else {
                      __pyx_t_22 = __pyx_t_17;
                      goto __pyx_L69_bool_binop_done;
                    }
                    __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_D, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                    if (!__pyx_t_17) {
                    } else {
                      __pyx_t_22 = __pyx_t_17;
                      goto __pyx_L69_bool_binop_done;
                    }
                    __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_I, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 318, __pyx_L65_error)
                    __pyx_t_22 = __pyx_t_17;
                    __pyx_L69_bool_binop_done:;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __pyx_t_17 = __pyx_t_22;
                    if (__pyx_t_17) {
                      __pyx_t_1 = __Pyx_GetItemInt(__pyx_9genexpr19__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L65_error)
                      __Pyx_GOTREF(__pyx_t_1);
                      __pyx_t_20 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 318, __pyx_L65_error)
                      __Pyx_GOTREF(__pyx_t_20);
                      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                      if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_20))) __PYX_ERR(0, 318, __pyx_L65_error)
                      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                    }
                  }
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_i); __pyx_9genexpr19__pyx_v_i = 0;
                  goto __pyx_L74_exit_scope;
                  __pyx_L65_error:;
                  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_i); __pyx_9genexpr19__pyx_v_i = 0;
                  goto __pyx_L13_error;
                  __pyx_L74_exit_scope:;
                } /* exit inner scope */
                __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 318, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyInt_MultiplyObjC(__pyx_t_9, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 318, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_15);
                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_15)) __PYX_ERR(0, 318, __pyx_L13_error);
                __Pyx_INCREF(__pyx_int_2);
                __Pyx_GIVEREF(__pyx_int_2);
                if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_int_2)) __PYX_ERR(0, 318, __pyx_L13_error);
                __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_9, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 318, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_XDECREF_SET(__pyx_v_iden, __pyx_t_15);
                __pyx_t_15 = 0;

                /* "msyd/pyxfiles/io.pyx":319
 * 
 *                 iden = round((sum([int(i[0]) for i in cgtpl(cg) if i[1] == '='])/sum([int(i[0]) for i in cgtpl(cg) if i[1] in {'=', 'X', 'D', 'I'}]))*100, 2)
 *                 achr = line[5]             # <<<<<<<<<<<<<<
 *                 bchr = line[0]
 *                 coords.append([astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg])
 */
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_line, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 319, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_XDECREF_SET(__pyx_v_achr, __pyx_t_15);
                __pyx_t_15 = 0;

                /* "msyd/pyxfiles/io.pyx":320
 *                 iden = round((sum([int(i[0]) for i in cgtpl(cg) if i[1] == '='])/sum([int(i[0]) for i in cgtpl(cg) if i[1] in {'=', 'X', 'D', 'I'}]))*100, 2)
 *                 achr = line[5]
 *                 bchr = line[0]             # <<<<<<<<<<<<<<
 *                 coords.append([astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg])
 *         coords = pd.DataFrame(coords)
 */
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_line, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 320, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_XDECREF_SET(__pyx_v_bchr, __pyx_t_15);
                __pyx_t_15 = 0;

                /* "msyd/pyxfiles/io.pyx":321
 *                 achr = line[5]
 *                 bchr = line[0]
 *                 coords.append([astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg])             # <<<<<<<<<<<<<<
 *         coords = pd.DataFrame(coords)
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 */
                __pyx_t_15 = __Pyx_PyInt_From_long(__pyx_v_adir); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 321, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_bdir); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 321, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_3 = PyList_New(12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_INCREF(__pyx_v_astart);
                __Pyx_GIVEREF(__pyx_v_astart);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_astart)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_aend);
                __Pyx_GIVEREF(__pyx_v_aend);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_aend)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_bstart);
                __Pyx_GIVEREF(__pyx_v_bstart);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_bstart)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_bend);
                __Pyx_GIVEREF(__pyx_v_bend);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 3, __pyx_v_bend)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_alen);
                __Pyx_GIVEREF(__pyx_v_alen);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 4, __pyx_v_alen)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_blen);
                __Pyx_GIVEREF(__pyx_v_blen);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 5, __pyx_v_blen)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_iden);
                __Pyx_GIVEREF(__pyx_v_iden);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 6, __pyx_v_iden)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_15);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 7, __pyx_t_15)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_GIVEREF(__pyx_t_9);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 8, __pyx_t_9)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_achr);
                __Pyx_GIVEREF(__pyx_v_achr);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 9, __pyx_v_achr)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_bchr);
                __Pyx_GIVEREF(__pyx_v_bchr);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 10, __pyx_v_bchr)) __PYX_ERR(0, 321, __pyx_L13_error);
                __Pyx_INCREF(__pyx_v_cg);
                __Pyx_GIVEREF(__pyx_v_cg);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 11, __pyx_v_cg)) __PYX_ERR(0, 321, __pyx_L13_error);
                __pyx_t_15 = 0;
                __pyx_t_9 = 0;
                __pyx_t_23 = __Pyx_PyObject_Append(__pyx_v_coords, __pyx_t_3); if (unlikely(__pyx_t_23 == ((int)-1))) __PYX_ERR(0, 321, __pyx_L13_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "msyd/pyxfiles/io.pyx":294
 *     try:
 *         with open(paf, 'r') as fin:
 *             for line in fin:             # <<<<<<<<<<<<<<
 *                 line = line.strip().split()
 *                 astart = int(line[7]) + 1
 */
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "msyd/pyxfiles/io.pyx":293
 *     logger = logging.getLogger('Reading PAF file')
 *     try:
 *         with open(paf, 'r') as fin:             # <<<<<<<<<<<<<<
 *             for line in fin:
 *                 line = line.strip().split()
 */
            }
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L18_try_end;
            __pyx_L13_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("msyd.io.readPAF", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_9) < 0) __PYX_ERR(0, 293, __pyx_L15_except_error)
              __Pyx_XGOTREF(__pyx_t_2);
              __Pyx_XGOTREF(__pyx_t_3);
              __Pyx_XGOTREF(__pyx_t_9);
              __pyx_t_15 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 293, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 293, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_24);
              __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_24);
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
              if (__pyx_t_17 < 0) __PYX_ERR(0, 293, __pyx_L15_except_error)
              __pyx_t_22 = (!__pyx_t_17);
              if (unlikely(__pyx_t_22)) {
                __Pyx_GIVEREF(__pyx_t_2);
                __Pyx_GIVEREF(__pyx_t_3);
                __Pyx_XGIVEREF(__pyx_t_9);
                __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_3, __pyx_t_9);
                __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_9 = 0; 
                __PYX_ERR(0, 293, __pyx_L15_except_error)
              }
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              goto __pyx_L14_exception_handled;
            }
            __pyx_L15_except_error:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            goto __pyx_L3_error;
            __pyx_L14_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            __pyx_L18_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_8) {
              __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__7, NULL);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 293, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
            goto __pyx_L12;
          }
          __pyx_L12:;
        }
        goto __pyx_L79;
        __pyx_L9_error:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L3_error;
        __pyx_L79:;
      }

      /* "msyd/pyxfiles/io.pyx":322
 *                 bchr = line[0]
 *                 coords.append([astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg])
 *         coords = pd.DataFrame(coords)             # <<<<<<<<<<<<<<
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *         coords.index = range(len(coords.index))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_coords};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 322, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_coords, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "msyd/pyxfiles/io.pyx":323
 *                 coords.append([astart, aend, bstart, bend, alen, blen, iden, adir, bdir, achr, bchr, cg])
 *         coords = pd.DataFrame(coords)
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)             # <<<<<<<<<<<<<<
 *         coords.index = range(len(coords.index))
 *         coords[6] = coords[6].astype('float')
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_coords, __pyx_n_s_sort_values); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 323, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = PyList_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_9);
      __Pyx_GIVEREF(__pyx_int_9);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_9)) __PYX_ERR(0, 323, __pyx_L3_error);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_0)) __PYX_ERR(0, 323, __pyx_L3_error);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_1)) __PYX_ERR(0, 323, __pyx_L3_error);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_int_2)) __PYX_ERR(0, 323, __pyx_L3_error);
      __Pyx_INCREF(__pyx_int_3);
      __Pyx_GIVEREF(__pyx_int_3);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 4, __pyx_int_3)) __PYX_ERR(0, 323, __pyx_L3_error);
      __Pyx_INCREF(__pyx_int_10);
      __Pyx_GIVEREF(__pyx_int_10);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 5, __pyx_int_10)) __PYX_ERR(0, 323, __pyx_L3_error);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(0, 323, __pyx_L3_error);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_inplace, Py_True) < 0) __PYX_ERR(0, 323, __pyx_L3_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ascending, Py_True) < 0) __PYX_ERR(0, 323, __pyx_L3_error)
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 323, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "msyd/pyxfiles/io.pyx":324
 *         coords = pd.DataFrame(coords)
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *         coords.index = range(len(coords.index))             # <<<<<<<<<<<<<<
 *         coords[6] = coords[6].astype('float')
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg"]
 */
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_coords, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 324, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_13 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 324, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 324, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_coords, __pyx_n_s_index, __pyx_t_2) < 0) __PYX_ERR(0, 324, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":325
 *         coords.sort_values([9,0,1,2,3,10], inplace = True, ascending=True)
 *         coords.index = range(len(coords.index))
 *         coords[6] = coords[6].astype('float')             # <<<<<<<<<<<<<<
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg"]
 *         return coords
 */
      __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_coords, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 325, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_astype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 325, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_n_u_float};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      if (unlikely((__Pyx_SetItemInt(__pyx_v_coords, 6, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0))) __PYX_ERR(0, 325, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":326
 *         coords.index = range(len(coords.index))
 *         coords[6] = coords[6].astype('float')
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg"]             # <<<<<<<<<<<<<<
 *         return coords
 *     except FileNotFoundError:
 */
      __pyx_t_2 = PyList_New(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_n_u_astart);
      __Pyx_GIVEREF(__pyx_n_u_astart);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_astart)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_aend);
      __Pyx_GIVEREF(__pyx_n_u_aend);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_aend)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_bstart);
      __Pyx_GIVEREF(__pyx_n_u_bstart);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_u_bstart)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_bend);
      __Pyx_GIVEREF(__pyx_n_u_bend);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_u_bend)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_alen);
      __Pyx_GIVEREF(__pyx_n_u_alen);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_u_alen)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_blen);
      __Pyx_GIVEREF(__pyx_n_u_blen);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_u_blen)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_iden);
      __Pyx_GIVEREF(__pyx_n_u_iden);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_u_iden)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_adir);
      __Pyx_GIVEREF(__pyx_n_u_adir);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_u_adir)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_bdir);
      __Pyx_GIVEREF(__pyx_n_u_bdir);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_u_bdir)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_achr);
      __Pyx_GIVEREF(__pyx_n_u_achr);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_u_achr)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_bchr);
      __Pyx_GIVEREF(__pyx_n_u_bchr);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_u_bchr)) __PYX_ERR(0, 326, __pyx_L3_error);
      __Pyx_INCREF(__pyx_n_u_cg);
      __Pyx_GIVEREF(__pyx_n_u_cg);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_u_cg)) __PYX_ERR(0, 326, __pyx_L3_error);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_coords, __pyx_n_s_columns, __pyx_t_2) < 0) __PYX_ERR(0, 326, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":327
 *         coords[6] = coords[6].astype('float')
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg"]
 *         return coords             # <<<<<<<<<<<<<<
 *     except FileNotFoundError:
 *         logger.error("Cannot open {} file. Exiting".format(paf))
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_coords);
      __pyx_r = __pyx_v_coords;
      goto __pyx_L7_try_return;

      /* "msyd/pyxfiles/io.pyx":292
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 *     try:             # <<<<<<<<<<<<<<
 *         with open(paf, 'r') as fin:
 *             for line in fin:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "msyd/pyxfiles/io.pyx":328
 *         coords.columns = ["astart", "aend", "bstart", "bend", "alen", "blen", "iden", "adir", "bdir", "achr", "bchr", "cg"]
 *         return coords
 *     except FileNotFoundError:             # <<<<<<<<<<<<<<
 *         logger.error("Cannot open {} file. Exiting".format(paf))
 *         sys.exit()
 */
    __Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_3, &__pyx_t_15);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_FileNotFoundError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_ErrRestore(__pyx_t_2, __pyx_t_3, __pyx_t_15);
    __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_15 = 0;
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readPAF", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 328, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);

      /* "msyd/pyxfiles/io.pyx":329
 *         return coords
 *     except FileNotFoundError:
 *         logger.error("Cannot open {} file. Exiting".format(paf))             # <<<<<<<<<<<<<<
 *         sys.exit()
 *     except ValueError as e:
 */
      __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 329, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Cannot_open_file_Exiting, __pyx_n_s_format); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 329, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_21);
      __pyx_t_25 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_21))) {
        __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_21);
        if (likely(__pyx_t_25)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
          __Pyx_INCREF(__pyx_t_25);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_21, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_25, __pyx_v_paf};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_21, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      }
      __pyx_t_21 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_20))) {
        __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_20);
        if (likely(__pyx_t_21)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
          __Pyx_INCREF(__pyx_t_21);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_20, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_1};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 329, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "msyd/pyxfiles/io.pyx":330
 *     except FileNotFoundError:
 *         logger.error("Cannot open {} file. Exiting".format(paf))
 *         sys.exit()             # <<<<<<<<<<<<<<
 *     except ValueError as e:
 *         logger.error("Error in reading PAF: {}. Exiting".format(e))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_sys); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 330, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_20 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_20)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_20);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_20, NULL};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 330, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }

    /* "msyd/pyxfiles/io.pyx":331
 *         logger.error("Cannot open {} file. Exiting".format(paf))
 *         sys.exit()
 *     except ValueError as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in reading PAF: {}. Exiting".format(e))
 *         sys.exit()
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readPAF", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_15) < 0) __PYX_ERR(0, 331, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_e = __pyx_t_3;
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":332
 *         sys.exit()
 *     except ValueError as e:
 *         logger.error("Error in reading PAF: {}. Exiting".format(e))             # <<<<<<<<<<<<<<
 *         sys.exit()
 * # END
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L87_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Error_in_reading_PAF_Exiting, __pyx_n_s_format); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 332, __pyx_L87_error)
        __Pyx_GOTREF(__pyx_t_21);
        __pyx_t_25 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_21))) {
          __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_21);
          if (likely(__pyx_t_25)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
            __Pyx_INCREF(__pyx_t_25);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_21, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_25, __pyx_v_e};
          __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_21, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 332, __pyx_L87_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        }
        __pyx_t_21 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_20};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 332, __pyx_L87_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "msyd/pyxfiles/io.pyx":333
 *     except ValueError as e:
 *         logger.error("Error in reading PAF: {}. Exiting".format(e))
 *         sys.exit()             # <<<<<<<<<<<<<<
 * # END
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L87_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exit_2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 333, __pyx_L87_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 333, __pyx_L87_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }

      /* "msyd/pyxfiles/io.pyx":331
 *         logger.error("Cannot open {} file. Exiting".format(paf))
 *         sys.exit()
 *     except ValueError as e:             # <<<<<<<<<<<<<<
 *         logger.error("Error in reading PAF: {}. Exiting".format(e))
 *         sys.exit()
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          goto __pyx_L88;
        }
        __pyx_L87_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_8 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_24 = 0; __pyx_t_28 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_24, &__pyx_t_28);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_12, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_12, &__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_11);
          __Pyx_XGOTREF(__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_28);
          __pyx_t_4 = __pyx_lineno; __pyx_t_26 = __pyx_clineno; __pyx_t_27 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_XGIVEREF(__pyx_t_28);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_24, __pyx_t_28);
          }
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_XGIVEREF(__pyx_t_11);
          __Pyx_ErrRestore(__pyx_t_8, __pyx_t_12, __pyx_t_11);
          __pyx_t_8 = 0; __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_24 = 0; __pyx_t_28 = 0;
          __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_26; __pyx_filename = __pyx_t_27;
          goto __pyx_L5_except_error;
        }
        __pyx_L88:;
      }
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;

    /* "msyd/pyxfiles/io.pyx":292
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 *     try:             # <<<<<<<<<<<<<<
 *         with open(paf, 'r') as fin:
 *             for line in fin:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
  }

  /* "msyd/pyxfiles/io.pyx":289
 * # END
 * 
 * def readPAF(paf):             # <<<<<<<<<<<<<<
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_AddTraceback("msyd.io.readPAF", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coords);
  __Pyx_XDECREF(__pyx_v_logger);
  __Pyx_XDECREF(__pyx_v_fin);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_astart);
  __Pyx_XDECREF(__pyx_v_aend);
  __Pyx_XDECREF(__pyx_v_bstart);
  __Pyx_XDECREF(__pyx_v_bend);
  __Pyx_XDECREF(__pyx_v_alen);
  __Pyx_XDECREF(__pyx_v_blen);
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XDECREF(__pyx_v_iden);
  __Pyx_XDECREF(__pyx_v_achr);
  __Pyx_XDECREF(__pyx_v_bchr);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":338
 * # pasted from plotsr, parsing syri output
 * VARS = ['SYN', 'SYNAL', 'INV', 'TRANS', 'INVTR', 'DUP', 'INVDP']
 * cpdef readsyriout(f):             # <<<<<<<<<<<<<<
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 *     logger = logging.getLogger("readsyriout")
 */

static PyObject *__pyx_pw_4msyd_2io_11readsyriout(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_readsyriout(PyObject *__pyx_v_f, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_logger = NULL;
  PyObject *__pyx_v_syri_regs = NULL;
  PyObject *__pyx_v_skipvartype = NULL;
  PyObject *__pyx_v_fin = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_v_chrid = NULL;
  PyObject *__pyx_v_chrid_dict = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readsyriout", 1);

  /* "msyd/pyxfiles/io.pyx":340
 * cpdef readsyriout(f):
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 *     logger = logging.getLogger("readsyriout")             # <<<<<<<<<<<<<<
 *     syri_regs = deque()
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_readsyriout};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_logger = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":341
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 *     logger = logging.getLogger("readsyriout")
 *     syri_regs = deque()             # <<<<<<<<<<<<<<
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']
 *     with open(f, 'r') as fin:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_deque); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_syri_regs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":342
 *     logger = logging.getLogger("readsyriout")
 *     syri_regs = deque()
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']             # <<<<<<<<<<<<<<
 *     with open(f, 'r') as fin:
 *         for line in fin:
 */
  __pyx_t_1 = PyList_New(13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_CPG);
  __Pyx_GIVEREF(__pyx_n_u_CPG);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_CPG)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_CPL);
  __Pyx_GIVEREF(__pyx_n_u_CPL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_CPL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_DEL);
  __Pyx_GIVEREF(__pyx_n_u_DEL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_DEL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_DUPAL);
  __Pyx_GIVEREF(__pyx_n_u_DUPAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_u_DUPAL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_HDR);
  __Pyx_GIVEREF(__pyx_n_u_HDR);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_u_HDR)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INS);
  __Pyx_GIVEREF(__pyx_n_u_INS);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_u_INS)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INVAL);
  __Pyx_GIVEREF(__pyx_n_u_INVAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_u_INVAL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INVDPAL);
  __Pyx_GIVEREF(__pyx_n_u_INVDPAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_u_INVDPAL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INVTRAL);
  __Pyx_GIVEREF(__pyx_n_u_INVTRAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_u_INVTRAL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_NOTAL);
  __Pyx_GIVEREF(__pyx_n_u_NOTAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_u_NOTAL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_SNP);
  __Pyx_GIVEREF(__pyx_n_u_SNP);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_u_SNP)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_TDM);
  __Pyx_GIVEREF(__pyx_n_u_TDM);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_u_TDM)) __PYX_ERR(0, 342, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_TRANSAL);
  __Pyx_GIVEREF(__pyx_n_u_TRANSAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_u_TRANSAL)) __PYX_ERR(0, 342, __pyx_L1_error);
  __pyx_v_skipvartype = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":343
 *     syri_regs = deque()
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']
 *     with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *         for line in fin:
 *             l = line.strip().split()
 */
  /*with:*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_f);
    __Pyx_GIVEREF(__pyx_v_f);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_f)) __PYX_ERR(0, 343, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_r)) __PYX_ERR(0, 343, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 343, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_fin = __pyx_t_2;
          __pyx_t_2 = 0;

          /* "msyd/pyxfiles/io.pyx":344
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']
 *     with open(f, 'r') as fin:
 *         for line in fin:             # <<<<<<<<<<<<<<
 *             l = line.strip().split()
 *             # TODO: DECIDE WHETHER TO HAVE STATIC VARS OR FLEXIBLE ANNOTATION
 */
          if (likely(PyList_CheckExact(__pyx_v_fin)) || PyTuple_CheckExact(__pyx_v_fin)) {
            __pyx_t_2 = __pyx_v_fin; __Pyx_INCREF(__pyx_t_2);
            __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_fin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 344, __pyx_L7_error)
          }
          for (;;) {
            if (likely(!__pyx_t_11)) {
              if (likely(PyList_CheckExact(__pyx_t_2))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 344, __pyx_L7_error)
                  #endif
                  if (__pyx_t_10 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 344, __pyx_L7_error)
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 344, __pyx_L7_error)
                  #endif
                  if (__pyx_t_10 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 344, __pyx_L7_error)
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                #endif
              }
            } else {
              __pyx_t_3 = __pyx_t_11(__pyx_t_2);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 344, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "msyd/pyxfiles/io.pyx":345
 *     with open(f, 'r') as fin:
 *         for line in fin:
 *             l = line.strip().split()             # <<<<<<<<<<<<<<
 *             # TODO: DECIDE WHETHER TO HAVE STATIC VARS OR FLEXIBLE ANNOTATION
 *             if l[10] in VARS:
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_12 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "msyd/pyxfiles/io.pyx":347
 *             l = line.strip().split()
 *             # TODO: DECIDE WHETHER TO HAVE STATIC VARS OR FLEXIBLE ANNOTATION
 *             if l[10] in VARS:             # <<<<<<<<<<<<<<
 *                 syri_regs.append(l)
 *             else:
 */
            __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_l, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_VARS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_t_6, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 347, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__pyx_t_13) {

              /* "msyd/pyxfiles/io.pyx":348
 *             # TODO: DECIDE WHETHER TO HAVE STATIC VARS OR FLEXIBLE ANNOTATION
 *             if l[10] in VARS:
 *                 syri_regs.append(l)             # <<<<<<<<<<<<<<
 *             else:
 *                 if l[10] not in skipvartype:
 */
              __pyx_t_14 = __Pyx_PyObject_Append(__pyx_v_syri_regs, __pyx_v_l); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 348, __pyx_L7_error)

              /* "msyd/pyxfiles/io.pyx":347
 *             l = line.strip().split()
 *             # TODO: DECIDE WHETHER TO HAVE STATIC VARS OR FLEXIBLE ANNOTATION
 *             if l[10] in VARS:             # <<<<<<<<<<<<<<
 *                 syri_regs.append(l)
 *             else:
 */
              goto __pyx_L15;
            }

            /* "msyd/pyxfiles/io.pyx":350
 *                 syri_regs.append(l)
 *             else:
 *                 if l[10] not in skipvartype:             # <<<<<<<<<<<<<<
 *                     skipvartype.append(l[10])
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))
 */
            /*else*/ {
              __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_l, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 350, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_t_6, __pyx_v_skipvartype, Py_NE)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 350, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (__pyx_t_13) {

                /* "msyd/pyxfiles/io.pyx":351
 *             else:
 *                 if l[10] not in skipvartype:
 *                     skipvartype.append(l[10])             # <<<<<<<<<<<<<<
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))
 * 
 */
                __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_l, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_skipvartype, __pyx_t_6); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 351, __pyx_L7_error)
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                /* "msyd/pyxfiles/io.pyx":352
 *                 if l[10] not in skipvartype:
 *                     skipvartype.append(l[10])
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_logger, __pyx_n_s_warning); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_is_not_a_valid_annotation_for_a, __pyx_n_s_format); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 352, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_12);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_l, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 352, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_VARS); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 352, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_16);
                __pyx_t_17 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_12))) {
                  __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_12);
                  if (likely(__pyx_t_17)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                    __Pyx_INCREF(__pyx_t_17);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_12, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[4] = {__pyx_t_17, __pyx_t_15, __pyx_v_f, __pyx_t_16};
                  __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                }
                __pyx_t_12 = NULL;
                __pyx_t_4 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_12)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_12);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                    __pyx_t_4 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_1};
                  __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_6);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                /* "msyd/pyxfiles/io.pyx":350
 *                 syri_regs.append(l)
 *             else:
 *                 if l[10] not in skipvartype:             # <<<<<<<<<<<<<<
 *                     skipvartype.append(l[10])
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))
 */
              }
            }
            __pyx_L15:;

            /* "msyd/pyxfiles/io.pyx":344
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']
 *     with open(f, 'r') as fin:
 *         for line in fin:             # <<<<<<<<<<<<<<
 *             l = line.strip().split()
 *             # TODO: DECIDE WHETHER TO HAVE STATIC VARS OR FLEXIBLE ANNOTATION
 */
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "msyd/pyxfiles/io.pyx":343
 *     syri_regs = deque()
 *     skipvartype = ['CPG', 'CPL', 'DEL', 'DUPAL', 'HDR', 'INS', 'INVAL', 'INVDPAL', 'INVTRAL', 'NOTAL', 'SNP', 'TDM', 'TRANSAL']
 *     with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *         for line in fin:
 *             l = line.strip().split()
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("msyd.io.readsyriout", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_6, &__pyx_t_3) < 0) __PYX_ERR(0, 343, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_6);
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_1 = PyTuple_Pack(3, __pyx_t_2, __pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 343, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 343, __pyx_L9_except_error)
          __pyx_t_19 = (!__pyx_t_13);
          if (unlikely(__pyx_t_19)) {
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_6);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_2, __pyx_t_6, __pyx_t_3);
            __pyx_t_2 = 0; __pyx_t_6 = 0; __pyx_t_3 = 0; 
            __PYX_ERR(0, 343, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_5) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__7, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 343, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L21;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L1_error;
    __pyx_L21:;
  }

  /* "msyd/pyxfiles/io.pyx":354
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         df = pd.DataFrame(list(syri_regs))[[0, 1, 2, 5, 6, 7, 10]]
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_9, &__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_8);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":355
 * 
 *     try:
 *         df = pd.DataFrame(list(syri_regs))[[0, 1, 2, 5, 6, 7, 10]]             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PySequence_List(__pyx_v_syri_regs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 355, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = PyList_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0)) __PYX_ERR(0, 355, __pyx_L22_error);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1)) __PYX_ERR(0, 355, __pyx_L22_error);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_2)) __PYX_ERR(0, 355, __pyx_L22_error);
      __Pyx_INCREF(__pyx_int_5);
      __Pyx_GIVEREF(__pyx_int_5);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_int_5)) __PYX_ERR(0, 355, __pyx_L22_error);
      __Pyx_INCREF(__pyx_int_6);
      __Pyx_GIVEREF(__pyx_int_6);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 4, __pyx_int_6)) __PYX_ERR(0, 355, __pyx_L22_error);
      __Pyx_INCREF(__pyx_int_7);
      __Pyx_GIVEREF(__pyx_int_7);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 5, __pyx_int_7)) __PYX_ERR(0, 355, __pyx_L22_error);
      __Pyx_INCREF(__pyx_int_10);
      __Pyx_GIVEREF(__pyx_int_10);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 6, __pyx_int_10)) __PYX_ERR(0, 355, __pyx_L22_error);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L22_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_df = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "msyd/pyxfiles/io.pyx":354
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         df = pd.DataFrame(list(syri_regs))[[0, 1, 2, 5, 6, 7, 10]]
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L27_try_end;
    __pyx_L22_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":356
 *     try:
 *         df = pd.DataFrame(list(syri_regs))[[0, 1, 2, 5, 6, 7, 10]]
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readsyriout", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(0, 356, __pyx_L24_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);

      /* "msyd/pyxfiles/io.pyx":357
 *         df = pd.DataFrame(list(syri_regs))[[0, 1, 2, 5, 6, 7, 10]]
 *     except KeyError:
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))             # <<<<<<<<<<<<<<
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)
 *     try:
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Incomplete_input_file_syri_out_f, __pyx_n_s_format); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 357, __pyx_L24_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_16 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_f};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L24_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ImportError, __pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 357, __pyx_L24_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(0, 357, __pyx_L24_except_error)
    }
    goto __pyx_L24_except_error;

    /* "msyd/pyxfiles/io.pyx":354
 *                     logger.warning("{} is not a valid annotation for alignments in file {}. Alignments should belong to the following classes {}. Skipping alignment.".format(l[10], f, VARS))
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         df = pd.DataFrame(list(syri_regs))[[0, 1, 2, 5, 6, 7, 10]]
 *     except KeyError:
 */
    __pyx_L24_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_9, __pyx_t_8);
    goto __pyx_L1_error;
    __pyx_L27_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":358
 *     except KeyError:
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)             # <<<<<<<<<<<<<<
 *     try:
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0)) __PYX_ERR(0, 358, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_5)) __PYX_ERR(0, 358, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_10);
  __Pyx_GIVEREF(__pyx_int_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_10)) __PYX_ERR(0, 358, __pyx_L1_error);
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_df, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)(&PyUnicode_Type))};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0)) __PYX_ERR(0, 358, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_5)) __PYX_ERR(0, 358, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_10);
  __Pyx_GIVEREF(__pyx_int_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_10)) __PYX_ERR(0, 358, __pyx_L1_error);
  if (unlikely((PyObject_SetItem(__pyx_v_df, __pyx_t_2, __pyx_t_3) < 0))) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":359
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)
 *     try:             # <<<<<<<<<<<<<<
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)
 *     except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":360
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)
 *     try:
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)             # <<<<<<<<<<<<<<
 *     except ValueError:
 *         raise ValueError("Non-numerical values used as genome coordinates in {}. Exiting".format(f))
 */
      __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L30_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_1)) __PYX_ERR(0, 360, __pyx_L30_error);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_2)) __PYX_ERR(0, 360, __pyx_L30_error);
      __Pyx_INCREF(__pyx_int_6);
      __Pyx_GIVEREF(__pyx_int_6);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_6)) __PYX_ERR(0, 360, __pyx_L30_error);
      __Pyx_INCREF(__pyx_int_7);
      __Pyx_GIVEREF(__pyx_int_7);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_int_7)) __PYX_ERR(0, 360, __pyx_L30_error);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_df, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 360, __pyx_L30_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_astype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L30_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)(&PyInt_Type))};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L30_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L30_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_1)) __PYX_ERR(0, 360, __pyx_L30_error);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_2)) __PYX_ERR(0, 360, __pyx_L30_error);
      __Pyx_INCREF(__pyx_int_6);
      __Pyx_GIVEREF(__pyx_int_6);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_6)) __PYX_ERR(0, 360, __pyx_L30_error);
      __Pyx_INCREF(__pyx_int_7);
      __Pyx_GIVEREF(__pyx_int_7);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_int_7)) __PYX_ERR(0, 360, __pyx_L30_error);
      if (unlikely((PyObject_SetItem(__pyx_v_df, __pyx_t_2, __pyx_t_3) < 0))) __PYX_ERR(0, 360, __pyx_L30_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":359
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)
 *     try:             # <<<<<<<<<<<<<<
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)
 *     except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L35_try_end;
    __pyx_L30_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":361
 *     try:
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)
 *     except ValueError:             # <<<<<<<<<<<<<<
 *         raise ValueError("Non-numerical values used as genome coordinates in {}. Exiting".format(f))
 *     # chr ID map
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("msyd.io.readsyriout", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_6) < 0) __PYX_ERR(0, 361, __pyx_L32_except_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "msyd/pyxfiles/io.pyx":362
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)
 *     except ValueError:
 *         raise ValueError("Non-numerical values used as genome coordinates in {}. Exiting".format(f))             # <<<<<<<<<<<<<<
 *     # chr ID map
 *     chrid = []
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Non_numerical_values_used_as_gen, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L32_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_16 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_f};
        __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 362, __pyx_L32_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L32_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 362, __pyx_L32_except_error)
    }
    goto __pyx_L32_except_error;

    /* "msyd/pyxfiles/io.pyx":359
 *         raise ImportError("Incomplete input file {}, syri.out file should have 11 columns.".format(f))
 *     df[[0, 5, 10]] = df[[0, 5, 10]].astype(str)
 *     try:             # <<<<<<<<<<<<<<
 *         df[[1, 2, 6, 7]] = df[[1, 2, 6, 7]].astype(int)
 *     except ValueError:
 */
    __pyx_L32_except_error:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L35_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":364
 *         raise ValueError("Non-numerical values used as genome coordinates in {}. Exiting".format(f))
 *     # chr ID map
 *     chrid = []             # <<<<<<<<<<<<<<
 *     chrid_dict = OrderedDict()
 *     for i in np.unique(df[0]):
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chrid = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "msyd/pyxfiles/io.pyx":365
 *     # chr ID map
 *     chrid = []
 *     chrid_dict = OrderedDict()             # <<<<<<<<<<<<<<
 *     for i in np.unique(df[0]):
 *         chrid.append((i, np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_chrid_dict = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "msyd/pyxfiles/io.pyx":366
 *     chrid = []
 *     chrid_dict = OrderedDict()
 *     for i in np.unique(df[0]):             # <<<<<<<<<<<<<<
 *         chrid.append((i, np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]))
 *         chrid_dict[i] = np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unique); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_df, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_2};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 366, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 366, __pyx_L1_error)
          #endif
          if (__pyx_t_10 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 366, __pyx_L1_error)
        #else
        __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 366, __pyx_L1_error)
          #endif
          if (__pyx_t_10 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 366, __pyx_L1_error)
        #else
        __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_11(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 366, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":367
 *     chrid_dict = OrderedDict()
 *     for i in np.unique(df[0]):
 *         chrid.append((i, np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]))             # <<<<<<<<<<<<<<
 *         chrid_dict[i] = np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]
 *     df.columns = ['achr', 'astart', 'aend', 'bchr', 'bstart', 'bend',  'type']
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_unique); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_df, __pyx_n_s_loc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_df, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = PyObject_RichCompare(__pyx_t_12, __pyx_v_i, Py_EQ); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_df, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_15 = PyObject_RichCompare(__pyx_t_12, __pyx_n_u_SYN, Py_EQ); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyNumber_And(__pyx_t_16, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_12);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_12)) __PYX_ERR(0, 367, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_5);
    __Pyx_GIVEREF(__pyx_int_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_int_5)) __PYX_ERR(0, 367, __pyx_L1_error);
    __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_15); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_12};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_i)) __PYX_ERR(0, 367, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_chrid, __pyx_t_6); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":368
 *     for i in np.unique(df[0]):
 *         chrid.append((i, np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]))
 *         chrid_dict[i] = np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]             # <<<<<<<<<<<<<<
 *     df.columns = ['achr', 'astart', 'aend', 'bchr', 'bstart', 'bend',  'type']
 *     return df, chrid_dict
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_unique); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_df, __pyx_n_s_loc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_df, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_15, __pyx_v_i, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_df, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = PyObject_RichCompare(__pyx_t_15, __pyx_n_u_SYN, Py_EQ); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyNumber_And(__pyx_t_2, __pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_15);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15)) __PYX_ERR(0, 368, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_5);
    __Pyx_GIVEREF(__pyx_int_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_int_5)) __PYX_ERR(0, 368, __pyx_L1_error);
    __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_16); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_15};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely((PyObject_SetItem(__pyx_v_chrid_dict, __pyx_v_i, __pyx_t_12) < 0))) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "msyd/pyxfiles/io.pyx":366
 *     chrid = []
 *     chrid_dict = OrderedDict()
 *     for i in np.unique(df[0]):             # <<<<<<<<<<<<<<
 *         chrid.append((i, np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]))
 *         chrid_dict[i] = np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":369
 *         chrid.append((i, np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]))
 *         chrid_dict[i] = np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]
 *     df.columns = ['achr', 'astart', 'aend', 'bchr', 'bstart', 'bend',  'type']             # <<<<<<<<<<<<<<
 *     return df, chrid_dict
 * 
 */
  __pyx_t_3 = PyList_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_achr);
  __Pyx_GIVEREF(__pyx_n_u_achr);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_achr)) __PYX_ERR(0, 369, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_astart);
  __Pyx_GIVEREF(__pyx_n_u_astart);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_astart)) __PYX_ERR(0, 369, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_aend);
  __Pyx_GIVEREF(__pyx_n_u_aend);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_u_aend)) __PYX_ERR(0, 369, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_bchr);
  __Pyx_GIVEREF(__pyx_n_u_bchr);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 3, __pyx_n_u_bchr)) __PYX_ERR(0, 369, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_bstart);
  __Pyx_GIVEREF(__pyx_n_u_bstart);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 4, __pyx_n_u_bstart)) __PYX_ERR(0, 369, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_bend);
  __Pyx_GIVEREF(__pyx_n_u_bend);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 5, __pyx_n_u_bend)) __PYX_ERR(0, 369, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_type);
  __Pyx_GIVEREF(__pyx_n_u_type);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 6, __pyx_n_u_type)) __PYX_ERR(0, 369, __pyx_L1_error);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_df, __pyx_n_s_columns, __pyx_t_3) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":370
 *         chrid_dict[i] = np.unique(df.loc[(df[0] == i) & (df[10] == 'SYN'), 5])[0]
 *     df.columns = ['achr', 'astart', 'aend', 'bchr', 'bstart', 'bend',  'type']
 *     return df, chrid_dict             # <<<<<<<<<<<<<<
 * 
 * cpdef extract_syri_snvs(fin):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_df);
  __Pyx_GIVEREF(__pyx_v_df);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_df)) __PYX_ERR(0, 370, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_chrid_dict);
  __Pyx_GIVEREF(__pyx_v_chrid_dict);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_chrid_dict)) __PYX_ERR(0, 370, __pyx_L1_error);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":338
 * # pasted from plotsr, parsing syri output
 * VARS = ['SYN', 'SYNAL', 'INV', 'TRANS', 'INVTR', 'DUP', 'INVDP']
 * cpdef readsyriout(f):             # <<<<<<<<<<<<<<
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 *     logger = logging.getLogger("readsyriout")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("msyd.io.readsyriout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_logger);
  __Pyx_XDECREF(__pyx_v_syri_regs);
  __Pyx_XDECREF(__pyx_v_skipvartype);
  __Pyx_XDECREF(__pyx_v_fin);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_chrid);
  __Pyx_XDECREF(__pyx_v_chrid_dict);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_11readsyriout(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_11readsyriout = {"readsyriout", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_11readsyriout, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_11readsyriout(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_f = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readsyriout (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_f)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "readsyriout") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_f = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readsyriout", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 338, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.readsyriout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_10readsyriout(__pyx_self, __pyx_v_f);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_10readsyriout(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readsyriout", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4msyd_2io_readsyriout(__pyx_v_f, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.readsyriout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":372
 *     return df, chrid_dict
 * 
 * cpdef extract_syri_snvs(fin):             # <<<<<<<<<<<<<<
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:
 */

static PyObject *__pyx_pw_4msyd_2io_13extract_syri_snvs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_extract_syri_snvs(PyObject *__pyx_v_fin, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_syri_regs = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_l = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_snv = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_snvs", 0);
  __Pyx_INCREF(__pyx_v_fin);

  /* "msyd/pyxfiles/io.pyx":373
 * 
 * cpdef extract_syri_snvs(fin):
 *     syri_regs = deque()             # <<<<<<<<<<<<<<
 *     with open(f, 'r') as fin:
 *         for line in fin:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_syri_regs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":374
 * cpdef extract_syri_snvs(fin):
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *         for line in fin:
 *             l = line.strip().split()
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_u_r);
    __Pyx_GIVEREF(__pyx_n_u_r);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_r)) __PYX_ERR(0, 374, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __Pyx_DECREF_SET(__pyx_v_fin, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":375
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:
 *         for line in fin:             # <<<<<<<<<<<<<<
 *             l = line.strip().split()
 *             if l[10] == 'SNP':
 */
          if (likely(PyList_CheckExact(__pyx_v_fin)) || PyTuple_CheckExact(__pyx_v_fin)) {
            __pyx_t_3 = __pyx_v_fin; __Pyx_INCREF(__pyx_t_3);
            __pyx_t_10 = 0;
            __pyx_t_11 = NULL;
          } else {
            __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_fin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 375, __pyx_L7_error)
          }
          for (;;) {
            if (likely(!__pyx_t_11)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 375, __pyx_L7_error)
                  #endif
                  if (__pyx_t_10 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 375, __pyx_L7_error)
                #else
                __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 375, __pyx_L7_error)
                  #endif
                  if (__pyx_t_10 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 375, __pyx_L7_error)
                #else
                __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_11(__pyx_t_3);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 375, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "msyd/pyxfiles/io.pyx":376
 *     with open(f, 'r') as fin:
 *         for line in fin:
 *             l = line.strip().split()             # <<<<<<<<<<<<<<
 *             if l[10] == 'SNP':
 *                 #TODO maybe store annotation information from fields 8-10
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_12 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
            __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_1);
            __pyx_t_1 = 0;

            /* "msyd/pyxfiles/io.pyx":377
 *         for line in fin:
 *             l = line.strip().split()
 *             if l[10] == 'SNP':             # <<<<<<<<<<<<<<
 *                 #TODO maybe store annotation information from fields 8-10
 *                 snv = SNV(Position('a', 'x', l[0], int(l[1])), Position('b', 'x', l[5], int(l[6])), l[4], l[5])
 */
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_l, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_13 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_SNP, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 377, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_13) {

              /* "msyd/pyxfiles/io.pyx":379
 *             if l[10] == 'SNP':
 *                 #TODO maybe store annotation information from fields 8-10
 *                 snv = SNV(Position('a', 'x', l[0], int(l[1])), Position('b', 'x', l[5], int(l[6])), l[4], l[5])             # <<<<<<<<<<<<<<
 *                 syri_regs.append(SNV)
 * 
 */
              __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_SNV); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Position); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_14);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_l, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_16 = __Pyx_PyNumber_Int(__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_15 = NULL;
              __pyx_t_4 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_12))) {
                __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_12);
                if (likely(__pyx_t_15)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                  __Pyx_INCREF(__pyx_t_15);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_12, function);
                  __pyx_t_4 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[5] = {__pyx_t_15, __pyx_n_u_a, __pyx_n_u_x, __pyx_t_14, __pyx_t_16};
                __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Position); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_14 = __Pyx_GetItemInt(__pyx_v_l, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_14);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_v_l, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_17 = __Pyx_PyNumber_Int(__pyx_t_15); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_15 = NULL;
              __pyx_t_4 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_15)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_15);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                  __pyx_t_4 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[5] = {__pyx_t_15, __pyx_n_u_b, __pyx_n_u_x, __pyx_t_14, __pyx_t_17};
                __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 379, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_12);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              }
              __pyx_t_16 = __Pyx_GetItemInt(__pyx_v_l, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_l, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 379, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_14 = NULL;
              __pyx_t_4 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_14)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_14);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                  __pyx_t_4 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[5] = {__pyx_t_14, __pyx_t_2, __pyx_t_12, __pyx_t_16, __pyx_t_17};
                __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              }
              __Pyx_XDECREF_SET(__pyx_v_snv, __pyx_t_1);
              __pyx_t_1 = 0;

              /* "msyd/pyxfiles/io.pyx":380
 *                 #TODO maybe store annotation information from fields 8-10
 *                 snv = SNV(Position('a', 'x', l[0], int(l[1])), Position('b', 'x', l[5], int(l[6])), l[4], l[5])
 *                 syri_regs.append(SNV)             # <<<<<<<<<<<<<<
 * 
 *     df = pd.DataFrame(list(syri_regs))#[[0, 1, 3, 4, 5, 6, 8, 9, 10]]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_SNV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_18 = __Pyx_PyObject_Append(__pyx_v_syri_regs, __pyx_t_1); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 380, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "msyd/pyxfiles/io.pyx":377
 *         for line in fin:
 *             l = line.strip().split()
 *             if l[10] == 'SNP':             # <<<<<<<<<<<<<<
 *                 #TODO maybe store annotation information from fields 8-10
 *                 snv = SNV(Position('a', 'x', l[0], int(l[1])), Position('b', 'x', l[5], int(l[6])), l[4], l[5])
 */
            }

            /* "msyd/pyxfiles/io.pyx":375
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:
 *         for line in fin:             # <<<<<<<<<<<<<<
 *             l = line.strip().split()
 *             if l[10] == 'SNP':
 */
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":374
 * cpdef extract_syri_snvs(fin):
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:             # <<<<<<<<<<<<<<
 *         for line in fin:
 *             l = line.strip().split()
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("msyd.io.extract_syri_snvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_6) < 0) __PYX_ERR(0, 374, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_3);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_17 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 374, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_17, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 374, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_19);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 374, __pyx_L9_except_error)
          __pyx_t_20 = (!__pyx_t_13);
          if (unlikely(__pyx_t_20)) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_6);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_6);
            __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_6 = 0; 
            __PYX_ERR(0, 374, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_5) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__7, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 374, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L20;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L1_error;
    __pyx_L20:;
  }

  /* "msyd/pyxfiles/io.pyx":382
 *                 syri_regs.append(SNV)
 * 
 *     df = pd.DataFrame(list(syri_regs))#[[0, 1, 3, 4, 5, 6, 8, 9, 10]]             # <<<<<<<<<<<<<<
 *     #TODO maybe do chromosome mapping?
 *     return df
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySequence_List(__pyx_v_syri_regs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_df = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "msyd/pyxfiles/io.pyx":384
 *     df = pd.DataFrame(list(syri_regs))#[[0, 1, 3, 4, 5, 6, 8, 9, 10]]
 *     #TODO maybe do chromosome mapping?
 *     return df             # <<<<<<<<<<<<<<
 * 
 * HEADER="""##INFO=<ID=END,Number=1,Type=Integer,Description="End position on reference genome">
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_df);
  __pyx_r = __pyx_v_df;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":372
 *     return df, chrid_dict
 * 
 * cpdef extract_syri_snvs(fin):             # <<<<<<<<<<<<<<
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("msyd.io.extract_syri_snvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_syri_regs);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_snv);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_fin);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_13extract_syri_snvs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_13extract_syri_snvs = {"extract_syri_snvs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_13extract_syri_snvs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_13extract_syri_snvs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fin = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_syri_snvs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fin,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extract_syri_snvs") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_fin = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_syri_snvs", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.extract_syri_snvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_12extract_syri_snvs(__pyx_self, __pyx_v_fin);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_12extract_syri_snvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fin) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_snvs", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4msyd_2io_extract_syri_snvs(__pyx_v_fin, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.extract_syri_snvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":398
 * ##FORMAT=<ID=HAP,Number=1,Type=Character,Description="Unique haplotype identifier">"""
 * 
 * cpdef filter_vcfs(syns, vcfs: List[Union[str, os.PathLike]], ref: Union[str, os.PathLike], add_syn_anns=False, no_complex=False):             # <<<<<<<<<<<<<<
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]
 * 
 */

static PyObject *__pyx_pw_4msyd_2io_15filter_vcfs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_filter_vcfs(PyObject *__pyx_v_syns, PyObject *__pyx_v_vcfs, PyObject *__pyx_v_ref, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_filter_vcfs *__pyx_optional_args) {
  PyObject *__pyx_v_add_syn_anns = ((PyObject *)Py_False);
  PyObject *__pyx_v_no_complex = ((PyObject *)Py_False);
  PyObject *__pyx_v_tmpfiles = NULL;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_syri_vcf;
  CYTHON_UNUSED PyObject *__pyx_9genexpr20__pyx_v__ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_vcfs", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_add_syn_anns = __pyx_optional_args->add_syn_anns;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_no_complex = __pyx_optional_args->no_complex;
      }
    }
  }

  /* "msyd/pyxfiles/io.pyx":399
 * 
 * cpdef filter_vcfs(syns, vcfs: List[Union[str, os.PathLike]], ref: Union[str, os.PathLike], add_syn_anns=False, no_complex=False):
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(len(vcfs)):
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_vcfs)) || PyTuple_CheckExact(__pyx_v_vcfs)) {
      __pyx_t_2 = __pyx_v_vcfs; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vcfs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 399, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
            #endif
            if (__pyx_t_3 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
            #endif
            if (__pyx_t_3 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 399, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr20__pyx_v__, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_util); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_gettmpfile); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_9genexpr20__pyx_v__); __pyx_9genexpr20__pyx_v__ = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr20__pyx_v__); __pyx_9genexpr20__pyx_v__ = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_v_tmpfiles = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":401
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]
 * 
 *     for i in range(len(vcfs)):             # <<<<<<<<<<<<<<
 *         logger.info(f"Filtering {vcfs[i]}")
 *         syri_vcf = not re.fullmatch(r".*syri\.vcf$", vcfs[i]) == None
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_vcfs); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 401, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_3;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "msyd/pyxfiles/io.pyx":402
 * 
 *     for i in range(len(vcfs)):
 *         logger.info(f"Filtering {vcfs[i]}")             # <<<<<<<<<<<<<<
 *         syri_vcf = not re.fullmatch(r".*syri\.vcf$", vcfs[i]) == None
 *         extract_syntenic_from_vcf(syns, vcfs[i], tmpfiles[i], ref=ref, add_syn_anns=add_syn_anns, no_complex=no_complex, coords_in_info=syri_vcf)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_vcfs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Filtering, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":403
 *     for i in range(len(vcfs)):
 *         logger.info(f"Filtering {vcfs[i]}")
 *         syri_vcf = not re.fullmatch(r".*syri\.vcf$", vcfs[i]) == None             # <<<<<<<<<<<<<<
 *         extract_syntenic_from_vcf(syns, vcfs[i], tmpfiles[i], ref=ref, add_syn_anns=add_syn_anns, no_complex=no_complex, coords_in_info=syri_vcf)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_re); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_fullmatch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_vcfs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_kp_u_syri_vcf, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_syri_vcf = (!__pyx_t_11);

    /* "msyd/pyxfiles/io.pyx":404
 *         logger.info(f"Filtering {vcfs[i]}")
 *         syri_vcf = not re.fullmatch(r".*syri\.vcf$", vcfs[i]) == None
 *         extract_syntenic_from_vcf(syns, vcfs[i], tmpfiles[i], ref=ref, add_syn_anns=add_syn_anns, no_complex=no_complex, coords_in_info=syri_vcf)             # <<<<<<<<<<<<<<
 * 
 *     return tmpfiles
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_extract_syntenic_from_vcf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vcfs, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_tmpfiles, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_syns);
    __Pyx_GIVEREF(__pyx_v_syns);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_syns)) __PYX_ERR(0, 404, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_ref, __pyx_v_ref) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_add_syn_anns, __pyx_v_add_syn_anns) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_no_complex, __pyx_v_no_complex) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_syri_vcf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_coords_in_info, __pyx_t_1) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "msyd/pyxfiles/io.pyx":406
 *         extract_syntenic_from_vcf(syns, vcfs[i], tmpfiles[i], ref=ref, add_syn_anns=add_syn_anns, no_complex=no_complex, coords_in_info=syri_vcf)
 * 
 *     return tmpfiles             # <<<<<<<<<<<<<<
 * 
 * cpdef void extract_syntenic_from_vcf(syns, inpath:Union[str, os.PathLike], outpath: Union[str, os.PathLike], force_index=True, synorg='ref', ref=None, keep_nonsyn_calls=False, add_syn_anns=True, add_cigar=False, add_identity=True, no_complex=False, coords_in_info=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tmpfiles);
  __pyx_r = __pyx_v_tmpfiles;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":398
 * ##FORMAT=<ID=HAP,Number=1,Type=Character,Description="Unique haplotype identifier">"""
 * 
 * cpdef filter_vcfs(syns, vcfs: List[Union[str, os.PathLike]], ref: Union[str, os.PathLike], add_syn_anns=False, no_complex=False):             # <<<<<<<<<<<<<<
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("msyd.io.filter_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmpfiles);
  __Pyx_XDECREF(__pyx_9genexpr20__pyx_v__);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_15filter_vcfs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_15filter_vcfs = {"filter_vcfs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_15filter_vcfs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_15filter_vcfs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_syns = 0;
  PyObject *__pyx_v_vcfs = 0;
  PyObject *__pyx_v_ref = 0;
  PyObject *__pyx_v_add_syn_anns = 0;
  PyObject *__pyx_v_no_complex = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter_vcfs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syns,&__pyx_n_s_vcfs,&__pyx_n_s_ref,&__pyx_n_s_add_syn_anns,&__pyx_n_s_no_complex,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_syns)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vcfs)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("filter_vcfs", 0, 3, 5, 1); __PYX_ERR(0, 398, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ref)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("filter_vcfs", 0, 3, 5, 2); __PYX_ERR(0, 398, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_syn_anns);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_complex);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "filter_vcfs") < 0)) __PYX_ERR(0, 398, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_syns = values[0];
    __pyx_v_vcfs = values[1];
    __pyx_v_ref = values[2];
    __pyx_v_add_syn_anns = values[3];
    __pyx_v_no_complex = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filter_vcfs", 0, 3, 5, __pyx_nargs); __PYX_ERR(0, 398, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.filter_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_14filter_vcfs(__pyx_self, __pyx_v_syns, __pyx_v_vcfs, __pyx_v_ref, __pyx_v_add_syn_anns, __pyx_v_no_complex);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_14filter_vcfs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_vcfs, PyObject *__pyx_v_ref, PyObject *__pyx_v_add_syn_anns, PyObject *__pyx_v_no_complex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4msyd_2io_filter_vcfs __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_vcfs", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.add_syn_anns = __pyx_v_add_syn_anns;
  __pyx_t_2.no_complex = __pyx_v_no_complex;
  __pyx_t_1 = __pyx_f_4msyd_2io_filter_vcfs(__pyx_v_syns, __pyx_v_vcfs, __pyx_v_ref, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.filter_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":408
 *     return tmpfiles
 * 
 * cpdef void extract_syntenic_from_vcf(syns, inpath:Union[str, os.PathLike], outpath: Union[str, os.PathLike], force_index=True, synorg='ref', ref=None, keep_nonsyn_calls=False, add_syn_anns=True, add_cigar=False, add_identity=True, no_complex=False, coords_in_info=False):             # <<<<<<<<<<<<<<
 *     """
 *     Extract syntenic annotations from a given VCF.
 */

static PyObject *__pyx_pw_4msyd_2io_17extract_syntenic_from_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static void __pyx_f_4msyd_2io_extract_syntenic_from_vcf(PyObject *__pyx_v_syns, PyObject *__pyx_v_inpath, PyObject *__pyx_v_outpath, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_extract_syntenic_from_vcf *__pyx_optional_args) {
  PyObject *__pyx_v_force_index = ((PyObject *)Py_True);
  PyObject *__pyx_v_synorg = ((PyObject *)__pyx_n_u_ref);
  PyObject *__pyx_v_ref = ((PyObject *)Py_None);
  PyObject *__pyx_v_keep_nonsyn_calls = ((PyObject *)Py_False);
  PyObject *__pyx_v_add_syn_anns = ((PyObject *)Py_True);
  PyObject *__pyx_v_add_cigar = ((PyObject *)Py_False);
  PyObject *__pyx_v_add_identity = ((PyObject *)Py_True);
  PyObject *__pyx_v_no_complex = ((PyObject *)Py_False);
  PyObject *__pyx_v_coords_in_info = ((PyObject *)Py_False);
  PyObject *__pyx_v_vcfin = 0;
  PyObject *__pyx_v_vcfout = 0;
  PyObject *__pyx_v_orgs = 0;
  PyObject *__pyx_v_header_chrs = 0;
  int __pyx_v_syncounter;
  PyObject *__pyx_v_removing = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_orgsvcf = NULL;
  PyObject *__pyx_v_syn = NULL;
  PyObject *__pyx_v_rng = NULL;
  PyObject *__pyx_v_rec = NULL;
  PyObject *__pyx_v_new_rec = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_sample = NULL;
  PyObject *__pyx_v_info = NULL;
  PyObject *__pyx_v_ft = NULL;
  PyObject *__pyx_9genexpr21__pyx_v_allele = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  struct __pyx_opt_args_4msyd_2io_add_syn_ann __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *(*__pyx_t_21)(PyObject *);
  PyObject *__pyx_t_22 = NULL;
  Py_ssize_t __pyx_t_23;
  PyObject *(*__pyx_t_24)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syntenic_from_vcf", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_force_index = __pyx_optional_args->force_index;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_synorg = __pyx_optional_args->synorg;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_ref = __pyx_optional_args->ref;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_keep_nonsyn_calls = __pyx_optional_args->keep_nonsyn_calls;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_add_syn_anns = __pyx_optional_args->add_syn_anns;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_add_cigar = __pyx_optional_args->add_cigar;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_add_identity = __pyx_optional_args->add_identity;
                  if (__pyx_optional_args->__pyx_n > 7) {
                    __pyx_v_no_complex = __pyx_optional_args->no_complex;
                    if (__pyx_optional_args->__pyx_n > 8) {
                      __pyx_v_coords_in_info = __pyx_optional_args->coords_in_info;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_inpath);
  __Pyx_INCREF(__pyx_v_ref);

  /* "msyd/pyxfiles/io.pyx":415
 *     """
 *     cdef:
 *         vcfin = pysam.VariantFile(inpath)             # <<<<<<<<<<<<<<
 *         vcfout = pysam.VariantFile(outpath, 'w', header=vcfin.header)
 *         orgs = util.get_orgs_from_df(syns)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pysam); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_inpath};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_vcfin = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":416
 *     cdef:
 *         vcfin = pysam.VariantFile(inpath)
 *         vcfout = pysam.VariantFile(outpath, 'w', header=vcfin.header)             # <<<<<<<<<<<<<<
 *         orgs = util.get_orgs_from_df(syns)
 *         header_chrs = set(vcfin.header.contigs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pysam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_outpath);
  __Pyx_GIVEREF(__pyx_v_outpath);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_outpath)) __PYX_ERR(0, 416, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_w);
  __Pyx_GIVEREF(__pyx_n_u_w);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_w)) __PYX_ERR(0, 416, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_header); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_header, __pyx_t_5) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_vcfout = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "msyd/pyxfiles/io.pyx":417
 *         vcfin = pysam.VariantFile(inpath)
 *         vcfout = pysam.VariantFile(outpath, 'w', header=vcfin.header)
 *         orgs = util.get_orgs_from_df(syns)             # <<<<<<<<<<<<<<
 *         header_chrs = set(vcfin.header.contigs)
 *         int syncounter = 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_util); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_orgs_from_df); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_syns};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_v_orgs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "msyd/pyxfiles/io.pyx":418
 *         vcfout = pysam.VariantFile(outpath, 'w', header=vcfin.header)
 *         orgs = util.get_orgs_from_df(syns)
 *         header_chrs = set(vcfin.header.contigs)             # <<<<<<<<<<<<<<
 *         int syncounter = 1
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_header); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_contigs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_header_chrs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "msyd/pyxfiles/io.pyx":419
 *         orgs = util.get_orgs_from_df(syns)
 *         header_chrs = set(vcfin.header.contigs)
 *         int syncounter = 1             # <<<<<<<<<<<<<<
 * 
 *     if not set(vcfin.header.samples).issubset(orgs):
 */
  __pyx_v_syncounter = 1;

  /* "msyd/pyxfiles/io.pyx":421
 *         int syncounter = 1
 * 
 *     if not set(vcfin.header.samples).issubset(orgs):             # <<<<<<<<<<<<<<
 *         removing = set(vcfin.header.samples).difference(orgs)
 *         logger.warning(f"Input VCF contains organisms not in PFF file! Double-Check names used in .tsv. Removing samples {removing} from VCF")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_issubset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_orgs};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (!__pyx_t_6);
  if (__pyx_t_7) {

    /* "msyd/pyxfiles/io.pyx":422
 * 
 *     if not set(vcfin.header.samples).issubset(orgs):
 *         removing = set(vcfin.header.samples).difference(orgs)             # <<<<<<<<<<<<<<
 *         logger.warning(f"Input VCF contains organisms not in PFF file! Double-Check names used in .tsv. Removing samples {removing} from VCF")
 *         vcfin.subset_samples(orgs)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_difference); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_orgs};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_v_removing = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":423
 *     if not set(vcfin.header.samples).issubset(orgs):
 *         removing = set(vcfin.header.samples).difference(orgs)
 *         logger.warning(f"Input VCF contains organisms not in PFF file! Double-Check names used in .tsv. Removing samples {removing} from VCF")             # <<<<<<<<<<<<<<
 *         vcfin.subset_samples(orgs)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __Pyx_INCREF(__pyx_kp_u_Input_VCF_contains_organisms_not);
    __pyx_t_8 += 96;
    __Pyx_GIVEREF(__pyx_kp_u_Input_VCF_contains_organisms_not);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Input_VCF_contains_organisms_not);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_removing, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_9;
    __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_from_VCF);
    __pyx_t_8 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_from_VCF);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_from_VCF);
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":424
 *         removing = set(vcfin.header.samples).difference(orgs)
 *         logger.warning(f"Input VCF contains organisms not in PFF file! Double-Check names used in .tsv. Removing samples {removing} from VCF")
 *         vcfin.subset_samples(orgs)             # <<<<<<<<<<<<<<
 * 
 *     # read reference if it hasn't been read already
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_subset_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_orgs};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":421
 *         int syncounter = 1
 * 
 *     if not set(vcfin.header.samples).issubset(orgs):             # <<<<<<<<<<<<<<
 *         removing = set(vcfin.header.samples).difference(orgs)
 *         logger.warning(f"Input VCF contains organisms not in PFF file! Double-Check names used in .tsv. Removing samples {removing} from VCF")
 */
  }

  /* "msyd/pyxfiles/io.pyx":427
 * 
 *     # read reference if it hasn't been read already
 *     if ref and type(ref) != dict:             # <<<<<<<<<<<<<<
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 427, __pyx_L1_error)
  if (__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_ref)), ((PyObject *)(&PyDict_Type)), Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_7) {

    /* "msyd/pyxfiles/io.pyx":428
 *     # read reference if it hasn't been read already
 *     if ref and type(ref) != dict:
 *         logger.info("Reading in Reference Fasta")             # <<<<<<<<<<<<<<
 *         ref = readfasta(ref)
 *     elif not ref:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_Reading_in_Reference_Fasta};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":429
 *     if ref and type(ref) != dict:
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)             # <<<<<<<<<<<<<<
 *     elif not ref:
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_readfasta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_ref};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_ref, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":427
 * 
 *     # read reference if it hasn't been read already
 *     if ref and type(ref) != dict:             # <<<<<<<<<<<<<<
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 */
    goto __pyx_L4;
  }

  /* "msyd/pyxfiles/io.pyx":430
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 *     elif not ref:             # <<<<<<<<<<<<<<
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
  __pyx_t_6 = (!__pyx_t_7);
  if (__pyx_t_6) {

    /* "msyd/pyxfiles/io.pyx":431
 *         ref = readfasta(ref)
 *     elif not ref:
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")             # <<<<<<<<<<<<<<
 * 
 *     # add header required for storing PANSYN annotations
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_No_Reference_specified_not_savin};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":430
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 *     elif not ref:             # <<<<<<<<<<<<<<
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")
 * 
 */
  }
  __pyx_L4:;

  /* "msyd/pyxfiles/io.pyx":434
 * 
 *     # add header required for storing PANSYN annotations
 *     if add_syn_anns or coords_in_info:             # <<<<<<<<<<<<<<
 *         for line in HEADER.splitlines():
 *             vcfout.header.add_line(line)
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_add_syn_anns); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 434, __pyx_L1_error)
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_coords_in_info); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 434, __pyx_L1_error)
  __pyx_t_6 = __pyx_t_7;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_6) {

    /* "msyd/pyxfiles/io.pyx":435
 *     # add header required for storing PANSYN annotations
 *     if add_syn_anns or coords_in_info:
 *         for line in HEADER.splitlines():             # <<<<<<<<<<<<<<
 *             vcfout.header.add_line(line)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_HEADER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_splitlines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_8 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 435, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 435, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 435, __pyx_L1_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 435, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 435, __pyx_L1_error)
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_10(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 435, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "msyd/pyxfiles/io.pyx":436
 *     if add_syn_anns or coords_in_info:
 *         for line in HEADER.splitlines():
 *             vcfout.header.add_line(line)             # <<<<<<<<<<<<<<
 * 
 *     orgsvcf = list(vcfin.header.samples) # select only contained organisms
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfout, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_line); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_line};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "msyd/pyxfiles/io.pyx":435
 *     # add header required for storing PANSYN annotations
 *     if add_syn_anns or coords_in_info:
 *         for line in HEADER.splitlines():             # <<<<<<<<<<<<<<
 *             vcfout.header.add_line(line)
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":434
 * 
 *     # add header required for storing PANSYN annotations
 *     if add_syn_anns or coords_in_info:             # <<<<<<<<<<<<<<
 *         for line in HEADER.splitlines():
 *             vcfout.header.add_line(line)
 */
  }

  /* "msyd/pyxfiles/io.pyx":438
 *             vcfout.header.add_line(line)
 * 
 *     orgsvcf = list(vcfin.header.samples) # select only contained organisms             # <<<<<<<<<<<<<<
 * 
 *     if coords_in_info and len(orgsvcf) != 1:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PySequence_ListKeepNew(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_orgsvcf = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":440
 *     orgsvcf = list(vcfin.header.samples) # select only contained organisms
 * 
 *     if coords_in_info and len(orgsvcf) != 1:             # <<<<<<<<<<<<<<
 *         logger.error("reading coords from INFO only supported for VCFs with exactly one sample! Check if your SyRI installation is up to date!")
 *         raise ValueError("reading coords from INFO only supported for VCFs with exactly one sample!")
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_coords_in_info); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 440, __pyx_L1_error)
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_8 = __Pyx_PyList_GET_SIZE(__pyx_v_orgsvcf); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 440, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_8 != 1);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L14_bool_binop_done:;
  if (unlikely(__pyx_t_6)) {

    /* "msyd/pyxfiles/io.pyx":441
 * 
 *     if coords_in_info and len(orgsvcf) != 1:
 *         logger.error("reading coords from INFO only supported for VCFs with exactly one sample! Check if your SyRI installation is up to date!")             # <<<<<<<<<<<<<<
 *         raise ValueError("reading coords from INFO only supported for VCFs with exactly one sample!")
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_reading_coords_from_INFO_only_su};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":442
 *     if coords_in_info and len(orgsvcf) != 1:
 *         logger.error("reading coords from INFO only supported for VCFs with exactly one sample! Check if your SyRI installation is up to date!")
 *         raise ValueError("reading coords from INFO only supported for VCFs with exactly one sample!")             # <<<<<<<<<<<<<<
 * 
 *     # force indexing to allow for calling fetch later.
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 442, __pyx_L1_error)

    /* "msyd/pyxfiles/io.pyx":440
 *     orgsvcf = list(vcfin.header.samples) # select only contained organisms
 * 
 *     if coords_in_info and len(orgsvcf) != 1:             # <<<<<<<<<<<<<<
 *         logger.error("reading coords from INFO only supported for VCFs with exactly one sample! Check if your SyRI installation is up to date!")
 *         raise ValueError("reading coords from INFO only supported for VCFs with exactly one sample!")
 */
  }

  /* "msyd/pyxfiles/io.pyx":446
 *     # force indexing to allow for calling fetch later.
 *     #TODO try using until_eof=True as mentioned in the pysam FAQ
 *     if force_index and not vcfin.index_filename:             # <<<<<<<<<<<<<<
 *         vcfin.close()
 *         pysam.tabix_index(inpath, force=True, preset='vcf', keep_original=True)
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_force_index); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 446, __pyx_L1_error)
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_index_filename); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = (!__pyx_t_7);
  __pyx_t_6 = __pyx_t_11;
  __pyx_L17_bool_binop_done:;
  if (__pyx_t_6) {

    /* "msyd/pyxfiles/io.pyx":447
 *     #TODO try using until_eof=True as mentioned in the pysam FAQ
 *     if force_index and not vcfin.index_filename:
 *         vcfin.close()             # <<<<<<<<<<<<<<
 *         pysam.tabix_index(inpath, force=True, preset='vcf', keep_original=True)
 *         inpath += ".gz" # no way to turn off automatic compression, apparently
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_close); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":448
 *     if force_index and not vcfin.index_filename:
 *         vcfin.close()
 *         pysam.tabix_index(inpath, force=True, preset='vcf', keep_original=True)             # <<<<<<<<<<<<<<
 *         inpath += ".gz" # no way to turn off automatic compression, apparently
 *         vcfin = pysam.VariantFile(inpath)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tabix_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_inpath);
    __Pyx_GIVEREF(__pyx_v_inpath);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_inpath)) __PYX_ERR(0, 448, __pyx_L1_error);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_force, Py_True) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_preset, __pyx_n_u_vcf) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_keep_original, Py_True) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":449
 *         vcfin.close()
 *         pysam.tabix_index(inpath, force=True, preset='vcf', keep_original=True)
 *         inpath += ".gz" # no way to turn off automatic compression, apparently             # <<<<<<<<<<<<<<
 *         vcfin = pysam.VariantFile(inpath)
 * 
 */
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_inpath, __pyx_kp_u_gz); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_inpath, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":450
 *         pysam.tabix_index(inpath, force=True, preset='vcf', keep_original=True)
 *         inpath += ".gz" # no way to turn off automatic compression, apparently
 *         vcfin = pysam.VariantFile(inpath)             # <<<<<<<<<<<<<<
 * 
 *     # add pansyn regions and contained records
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pysam); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_inpath};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_vcfin, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":446
 *     # force indexing to allow for calling fetch later.
 *     #TODO try using until_eof=True as mentioned in the pysam FAQ
 *     if force_index and not vcfin.index_filename:             # <<<<<<<<<<<<<<
 *         vcfin.close()
 *         pysam.tabix_index(inpath, force=True, preset='vcf', keep_original=True)
 */
  }

  /* "msyd/pyxfiles/io.pyx":453
 * 
 *     # add pansyn regions and contained records
 *     for syn in syns.iterrows():             # <<<<<<<<<<<<<<
 *         syn = syn[1][0]
 *         rng = syn.ref
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_syns, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_8 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 453, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_10(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 453, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_syn, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":454
 *     # add pansyn regions and contained records
 *     for syn in syns.iterrows():
 *         syn = syn[1][0]             # <<<<<<<<<<<<<<
 *         rng = syn.ref
 *         if synorg != 'ref':
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_syn, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_syn, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":455
 *     for syn in syns.iterrows():
 *         syn = syn[1][0]
 *         rng = syn.ref             # <<<<<<<<<<<<<<
 *         if synorg != 'ref':
 *             # untested as of now
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_rng, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":456
 *         syn = syn[1][0]
 *         rng = syn.ref
 *         if synorg != 'ref':             # <<<<<<<<<<<<<<
 *             # untested as of now
 *             if synorg in syn.ranges_dict:
 */
    __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_synorg, __pyx_n_u_ref, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 456, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "msyd/pyxfiles/io.pyx":458
 *         if synorg != 'ref':
 *             # untested as of now
 *             if synorg in syn.ranges_dict:             # <<<<<<<<<<<<<<
 *                 rng = syn.ranges_dict[synorg]
 *                 syn = copy(syn)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_synorg, __pyx_t_5, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "msyd/pyxfiles/io.pyx":459
 *             # untested as of now
 *             if synorg in syn.ranges_dict:
 *                 rng = syn.ranges_dict[synorg]             # <<<<<<<<<<<<<<
 *                 syn = copy(syn)
 *                 syn.ref = rng
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_synorg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF_SET(__pyx_v_rng, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":460
 *             if synorg in syn.ranges_dict:
 *                 rng = syn.ranges_dict[synorg]
 *                 syn = copy(syn)             # <<<<<<<<<<<<<<
 *                 syn.ref = rng
 *                 del syn.ranges_dict[synorg]
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_syn};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_syn, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":461
 *                 rng = syn.ranges_dict[synorg]
 *                 syn = copy(syn)
 *                 syn.ref = rng             # <<<<<<<<<<<<<<
 *                 del syn.ranges_dict[synorg]
 *             else: # ignore regions not present in this org
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_syn, __pyx_n_s_ref, __pyx_v_rng) < 0) __PYX_ERR(0, 461, __pyx_L1_error)

        /* "msyd/pyxfiles/io.pyx":462
 *                 syn = copy(syn)
 *                 syn.ref = rng
 *                 del syn.ranges_dict[synorg]             # <<<<<<<<<<<<<<
 *             else: # ignore regions not present in this org
 *                 continue
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely((PyObject_DelItem(__pyx_t_2, __pyx_v_synorg) < 0))) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":458
 *         if synorg != 'ref':
 *             # untested as of now
 *             if synorg in syn.ranges_dict:             # <<<<<<<<<<<<<<
 *                 rng = syn.ranges_dict[synorg]
 *                 syn = copy(syn)
 */
        goto __pyx_L22;
      }

      /* "msyd/pyxfiles/io.pyx":464
 *                 del syn.ranges_dict[synorg]
 *             else: # ignore regions not present in this org
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         # add the pansyn region, if specified
 */
      /*else*/ {
        goto __pyx_L19_continue;
      }
      __pyx_L22:;

      /* "msyd/pyxfiles/io.pyx":456
 *         syn = syn[1][0]
 *         rng = syn.ref
 *         if synorg != 'ref':             # <<<<<<<<<<<<<<
 *             # untested as of now
 *             if synorg in syn.ranges_dict:
 */
    }

    /* "msyd/pyxfiles/io.pyx":467
 * 
 *         # add the pansyn region, if specified
 *         if add_syn_anns:             # <<<<<<<<<<<<<<
 *             try:
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_add_syn_anns); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 467, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "msyd/pyxfiles/io.pyx":468
 *         # add the pansyn region, if specified
 *         if add_syn_anns:
 *             try:             # <<<<<<<<<<<<<<
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 *             except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        /*try:*/ {

          /* "msyd/pyxfiles/io.pyx":469
 *         if add_syn_anns:
 *             try:
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 logger.error(f"Error adding pansyn annotation for region {syn} to VCF. Check if the chromosome names match!")
 */
          __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_syncounter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_15.__pyx_n = 4;
          __pyx_t_15.ref = __pyx_v_ref;
          __pyx_t_15.no = __pyx_t_2;
          __pyx_t_15.add_cigar = __pyx_v_add_cigar;
          __pyx_t_15.add_identity = __pyx_v_add_identity;
          __pyx_t_5 = __pyx_f_4msyd_2io_add_syn_ann(__pyx_v_syn, __pyx_v_vcfout, &__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L24_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "msyd/pyxfiles/io.pyx":468
 *         # add the pansyn region, if specified
 *         if add_syn_anns:
 *             try:             # <<<<<<<<<<<<<<
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 *             except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L31_try_end;
        __pyx_L24_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "msyd/pyxfiles/io.pyx":470
 *             try:
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 logger.error(f"Error adding pansyn annotation for region {syn} to VCF. Check if the chromosome names match!")
 *             syncounter +=1
 */
        __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_4) {
          __Pyx_AddTraceback("msyd.io.extract_syntenic_from_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_2, &__pyx_t_1) < 0) __PYX_ERR(0, 470, __pyx_L26_except_error)
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_1);

          /* "msyd/pyxfiles/io.pyx":471
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 *             except ValueError:
 *                 logger.error(f"Error adding pansyn annotation for region {syn} to VCF. Check if the chromosome names match!")             # <<<<<<<<<<<<<<
 *             syncounter +=1
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 471, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_error); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 471, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyTuple_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 471, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_19 = 0;
          __pyx_t_9 = 127;
          __Pyx_INCREF(__pyx_kp_u_Error_adding_pansyn_annotation_f);
          __pyx_t_19 += 42;
          __Pyx_GIVEREF(__pyx_kp_u_Error_adding_pansyn_annotation_f);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_kp_u_Error_adding_pansyn_annotation_f);
          __pyx_t_20 = __Pyx_PyObject_FormatSimple(__pyx_v_syn, __pyx_empty_unicode); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 471, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_20) : __pyx_t_9;
          __pyx_t_19 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_20);
          __Pyx_GIVEREF(__pyx_t_20);
          PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_20);
          __pyx_t_20 = 0;
          __Pyx_INCREF(__pyx_kp_u_to_VCF_Check_if_the_chromosome);
          __pyx_t_19 += 45;
          __Pyx_GIVEREF(__pyx_kp_u_to_VCF_Check_if_the_chromosome);
          PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_kp_u_to_VCF_Check_if_the_chromosome);
          __pyx_t_20 = __Pyx_PyUnicode_Join(__pyx_t_17, 3, __pyx_t_19, __pyx_t_9); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 471, __pyx_L26_except_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_18))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_18);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_18, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_20};
            __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 471, __pyx_L26_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L25_exception_handled;
        }
        goto __pyx_L26_except_error;

        /* "msyd/pyxfiles/io.pyx":468
 *         # add the pansyn region, if specified
 *         if add_syn_anns:
 *             try:             # <<<<<<<<<<<<<<
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 *             except ValueError:
 */
        __pyx_L26_except_error:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        goto __pyx_L1_error;
        __pyx_L25_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        __pyx_L31_try_end:;
      }

      /* "msyd/pyxfiles/io.pyx":472
 *             except ValueError:
 *                 logger.error(f"Error adding pansyn annotation for region {syn} to VCF. Check if the chromosome names match!")
 *             syncounter +=1             # <<<<<<<<<<<<<<
 * 
 *         # write the small variants in the pansyn region
 */
      __pyx_v_syncounter = (__pyx_v_syncounter + 1);

      /* "msyd/pyxfiles/io.pyx":467
 * 
 *         # add the pansyn region, if specified
 *         if add_syn_anns:             # <<<<<<<<<<<<<<
 *             try:
 *                 add_syn_ann(syn, vcfout, ref=ref, no=syncounter, add_cigar=add_cigar, add_identity=add_identity)
 */
    }

    /* "msyd/pyxfiles/io.pyx":475
 * 
 *         # write the small variants in the pansyn region
 *         for rec in vcfin.fetch(rng.chr, rng.start, rng.end + 1): # pysam is half-inclusive             # <<<<<<<<<<<<<<
 *             # double check if the chr has been added, was throwing errors for some reason...
 *             if rec.chrom not in header_chrs:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfin, __pyx_n_s_fetch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_chr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_start); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_end); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_20 = __Pyx_PyInt_AddObjC(__pyx_t_18, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_18)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[4] = {__pyx_t_18, __pyx_t_5, __pyx_t_16, __pyx_t_20};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 3+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_19 = 0;
      __pyx_t_21 = NULL;
    } else {
      __pyx_t_19 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_21 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 475, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_21)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 475, __pyx_L1_error)
            #endif
            if (__pyx_t_19 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_1); __pyx_t_19++; if (unlikely((0 < 0))) __PYX_ERR(0, 475, __pyx_L1_error)
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 475, __pyx_L1_error)
            #endif
            if (__pyx_t_19 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_19); __Pyx_INCREF(__pyx_t_1); __pyx_t_19++; if (unlikely((0 < 0))) __PYX_ERR(0, 475, __pyx_L1_error)
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_19); __pyx_t_19++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_21(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 475, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_rec, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":477
 *         for rec in vcfin.fetch(rng.chr, rng.start, rng.end + 1): # pysam is half-inclusive
 *             # double check if the chr has been added, was throwing errors for some reason...
 *             if rec.chrom not in header_chrs:             # <<<<<<<<<<<<<<
 *                 #logger.info(f"extract_from_syntenic Adding {rec.chrom} to header")
 *                 header_chrs.add(rec.chrom)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_v_header_chrs, Py_NE)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_6) {

        /* "msyd/pyxfiles/io.pyx":479
 *             if rec.chrom not in header_chrs:
 *                 #logger.info(f"extract_from_syntenic Adding {rec.chrom} to header")
 *                 header_chrs.add(rec.chrom)             # <<<<<<<<<<<<<<
 *                 if ref:
 *                     # add length if it is known from the reference
 */
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_header_chrs, __pyx_n_s_add); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_5 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_16};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":480
 *                 #logger.info(f"extract_from_syntenic Adding {rec.chrom} to header")
 *                 header_chrs.add(rec.chrom)
 *                 if ref:             # <<<<<<<<<<<<<<
 *                     # add length if it is known from the reference
 *                     vcfout.header.add_line("##contig=<ID={},length={}>".format(rec.chrom, len(ref[rec.chrom])))
 */
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 480, __pyx_L1_error)
        if (__pyx_t_6) {

          /* "msyd/pyxfiles/io.pyx":482
 *                 if ref:
 *                     # add length if it is known from the reference
 *                     vcfout.header.add_line("##contig=<ID={},length={}>".format(rec.chrom, len(ref[rec.chrom])))             # <<<<<<<<<<<<<<
 *                 else:
 *                     vcfout.header.add_line("##contig=<ID={}>".format(rec.chrom))
 */
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfout, __pyx_n_s_header); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_add_line); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID_length, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_22 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_t_17); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_23 = PyObject_Length(__pyx_t_22); if (unlikely(__pyx_t_23 == ((Py_ssize_t)-1))) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          __pyx_t_22 = PyInt_FromSsize_t(__pyx_t_23); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 482, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __pyx_t_17 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_17, __pyx_t_18, __pyx_t_22};
            __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 482, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __pyx_t_5 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_20};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "msyd/pyxfiles/io.pyx":480
 *                 #logger.info(f"extract_from_syntenic Adding {rec.chrom} to header")
 *                 header_chrs.add(rec.chrom)
 *                 if ref:             # <<<<<<<<<<<<<<
 *                     # add length if it is known from the reference
 *                     vcfout.header.add_line("##contig=<ID={},length={}>".format(rec.chrom, len(ref[rec.chrom])))
 */
          goto __pyx_L37;
        }

        /* "msyd/pyxfiles/io.pyx":484
 *                     vcfout.header.add_line("##contig=<ID={},length={}>".format(rec.chrom, len(ref[rec.chrom])))
 *                 else:
 *                     vcfout.header.add_line("##contig=<ID={}>".format(rec.chrom))             # <<<<<<<<<<<<<<
 * 
 *             # check if the region is complex by looking for symbolic alleles
 */
        /*else*/ {
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfout, __pyx_n_s_header); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 484, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_add_line); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 484, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 484, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __pyx_t_18 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_18)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_18);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_t_22};
            __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 484, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __pyx_t_5 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_20))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_20);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_20, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_16};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L37:;

        /* "msyd/pyxfiles/io.pyx":477
 *         for rec in vcfin.fetch(rng.chr, rng.start, rng.end + 1): # pysam is half-inclusive
 *             # double check if the chr has been added, was throwing errors for some reason...
 *             if rec.chrom not in header_chrs:             # <<<<<<<<<<<<<<
 *                 #logger.info(f"extract_from_syntenic Adding {rec.chrom} to header")
 *                 header_chrs.add(rec.chrom)
 */
      }

      /* "msyd/pyxfiles/io.pyx":487
 * 
 *             # check if the region is complex by looking for symbolic alleles
 *             if no_complex:             # <<<<<<<<<<<<<<
 *                 #if any(map(lambda x: re.fullmatch(r'N|[ACGT]*', x) == None, rec.alleles)):
 *                 # does this need checking for None alleles? not sure...
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_no_complex); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 487, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "msyd/pyxfiles/io.pyx":490
 *                 #if any(map(lambda x: re.fullmatch(r'N|[ACGT]*', x) == None, rec.alleles)):
 *                 # does this need checking for None alleles? not sure...
 *                 if any([re.fullmatch(r'N|[ACGT]*', allele) == None for allele in rec.alleles]):             # <<<<<<<<<<<<<<
 *                     continue # skip this variant
 * 
 */
        { /* enter inner scope */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L42_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 490, __pyx_L42_error)
          __Pyx_GOTREF(__pyx_t_20);
          if (likely(PyList_CheckExact(__pyx_t_20)) || PyTuple_CheckExact(__pyx_t_20)) {
            __pyx_t_16 = __pyx_t_20; __Pyx_INCREF(__pyx_t_16);
            __pyx_t_23 = 0;
            __pyx_t_24 = NULL;
          } else {
            __pyx_t_23 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_20); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 490, __pyx_L42_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_24 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 490, __pyx_L42_error)
          }
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          for (;;) {
            if (likely(!__pyx_t_24)) {
              if (likely(PyList_CheckExact(__pyx_t_16))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_16);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 490, __pyx_L42_error)
                  #endif
                  if (__pyx_t_23 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_20 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_23); __Pyx_INCREF(__pyx_t_20); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 490, __pyx_L42_error)
                #else
                __pyx_t_20 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 490, __pyx_L42_error)
                __Pyx_GOTREF(__pyx_t_20);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_16);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 490, __pyx_L42_error)
                  #endif
                  if (__pyx_t_23 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_20 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_23); __Pyx_INCREF(__pyx_t_20); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 490, __pyx_L42_error)
                #else
                __pyx_t_20 = __Pyx_PySequence_ITEM(__pyx_t_16, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 490, __pyx_L42_error)
                __Pyx_GOTREF(__pyx_t_20);
                #endif
              }
            } else {
              __pyx_t_20 = __pyx_t_24(__pyx_t_16);
              if (unlikely(!__pyx_t_20)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 490, __pyx_L42_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_20);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr21__pyx_v_allele, __pyx_t_20);
            __pyx_t_20 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_re); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 490, __pyx_L42_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_fullmatch); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 490, __pyx_L42_error)
            __Pyx_GOTREF(__pyx_t_22);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_22))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_22);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_22, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_kp_u_N_ACGT, __pyx_9genexpr21__pyx_v_allele};
              __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_22, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 490, __pyx_L42_error)
              __Pyx_GOTREF(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            }
            __pyx_t_22 = PyObject_RichCompare(__pyx_t_20, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_22); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 490, __pyx_L42_error)
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_22))) __PYX_ERR(0, 490, __pyx_L42_error)
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_allele); __pyx_9genexpr21__pyx_v_allele = 0;
          goto __pyx_L46_exit_scope;
          __pyx_L42_error:;
          __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_allele); __pyx_9genexpr21__pyx_v_allele = 0;
          goto __pyx_L1_error;
          __pyx_L46_exit_scope:;
        } /* exit inner scope */
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_any, __pyx_t_1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 490, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 490, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (__pyx_t_6) {

          /* "msyd/pyxfiles/io.pyx":491
 *                 # does this need checking for None alleles? not sure...
 *                 if any([re.fullmatch(r'N|[ACGT]*', allele) == None for allele in rec.alleles]):
 *                     continue # skip this variant             # <<<<<<<<<<<<<<
 * 
 *             new_rec = vcfout.new_record()
 */
          goto __pyx_L34_continue;

          /* "msyd/pyxfiles/io.pyx":490
 *                 #if any(map(lambda x: re.fullmatch(r'N|[ACGT]*', x) == None, rec.alleles)):
 *                 # does this need checking for None alleles? not sure...
 *                 if any([re.fullmatch(r'N|[ACGT]*', allele) == None for allele in rec.alleles]):             # <<<<<<<<<<<<<<
 *                     continue # skip this variant
 * 
 */
        }

        /* "msyd/pyxfiles/io.pyx":487
 * 
 *             # check if the region is complex by looking for symbolic alleles
 *             if no_complex:             # <<<<<<<<<<<<<<
 *                 #if any(map(lambda x: re.fullmatch(r'N|[ACGT]*', x) == None, rec.alleles)):
 *                 # does this need checking for None alleles? not sure...
 */
      }

      /* "msyd/pyxfiles/io.pyx":493
 *                     continue # skip this variant
 * 
 *             new_rec = vcfout.new_record()             # <<<<<<<<<<<<<<
 *             new_rec.pos = rec.pos
 *             new_rec.chrom = rec.chrom
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfout, __pyx_n_s_new_record); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_22 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_22)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_22);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_22, NULL};
        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_new_rec, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "msyd/pyxfiles/io.pyx":494
 * 
 *             new_rec = vcfout.new_record()
 *             new_rec.pos = rec.pos             # <<<<<<<<<<<<<<
 *             new_rec.chrom = rec.chrom
 *             new_rec.id = rec.id
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_pos); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_pos, __pyx_t_16) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "msyd/pyxfiles/io.pyx":495
 *             new_rec = vcfout.new_record()
 *             new_rec.pos = rec.pos
 *             new_rec.chrom = rec.chrom             # <<<<<<<<<<<<<<
 *             new_rec.id = rec.id
 *             new_rec.alleles = rec.alleles
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_chrom, __pyx_t_16) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "msyd/pyxfiles/io.pyx":496
 *             new_rec.pos = rec.pos
 *             new_rec.chrom = rec.chrom
 *             new_rec.id = rec.id             # <<<<<<<<<<<<<<
 *             new_rec.alleles = rec.alleles
 *             # discard old INFO information if reading it in as coords
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_id); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_id, __pyx_t_16) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "msyd/pyxfiles/io.pyx":497
 *             new_rec.chrom = rec.chrom
 *             new_rec.id = rec.id
 *             new_rec.alleles = rec.alleles             # <<<<<<<<<<<<<<
 *             # discard old INFO information if reading it in as coords
 *             if not coords_in_info:
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_alleles, __pyx_t_16) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "msyd/pyxfiles/io.pyx":499
 *             new_rec.alleles = rec.alleles
 *             # discard old INFO information if reading it in as coords
 *             if not coords_in_info:             # <<<<<<<<<<<<<<
 *                 for key in rec.info:
 *                     new_rec.info[key] = rec.info[key]
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_coords_in_info); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 499, __pyx_L1_error)
      __pyx_t_11 = (!__pyx_t_6);
      if (__pyx_t_11) {

        /* "msyd/pyxfiles/io.pyx":500
 *             # discard old INFO information if reading it in as coords
 *             if not coords_in_info:
 *                 for key in rec.info:             # <<<<<<<<<<<<<<
 *                     new_rec.info[key] = rec.info[key]
 *             # add Parent information
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
          __pyx_t_1 = __pyx_t_16; __Pyx_INCREF(__pyx_t_1);
          __pyx_t_23 = 0;
          __pyx_t_24 = NULL;
        } else {
          __pyx_t_23 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_24 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 500, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        for (;;) {
          if (likely(!__pyx_t_24)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 500, __pyx_L1_error)
                #endif
                if (__pyx_t_23 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_23); __Pyx_INCREF(__pyx_t_16); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 500, __pyx_L1_error)
              #else
              __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 500, __pyx_L1_error)
                #endif
                if (__pyx_t_23 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_23); __Pyx_INCREF(__pyx_t_16); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 500, __pyx_L1_error)
              #else
              __pyx_t_16 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 500, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            }
          } else {
            __pyx_t_16 = __pyx_t_24(__pyx_t_1);
            if (unlikely(!__pyx_t_16)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 500, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_16);
          }
          __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_16);
          __pyx_t_16 = 0;

          /* "msyd/pyxfiles/io.pyx":501
 *             if not coords_in_info:
 *                 for key in rec.info:
 *                     new_rec.info[key] = rec.info[key]             # <<<<<<<<<<<<<<
 *             # add Parent information
 *             if add_syn_anns:
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 501, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_22 = __Pyx_PyObject_GetItem(__pyx_t_16, __pyx_v_key); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 501, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 501, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          if (unlikely((PyObject_SetItem(__pyx_t_16, __pyx_v_key, __pyx_t_22) < 0))) __PYX_ERR(0, 501, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

          /* "msyd/pyxfiles/io.pyx":500
 *             # discard old INFO information if reading it in as coords
 *             if not coords_in_info:
 *                 for key in rec.info:             # <<<<<<<<<<<<<<
 *                     new_rec.info[key] = rec.info[key]
 *             # add Parent information
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":499
 *             new_rec.alleles = rec.alleles
 *             # discard old INFO information if reading it in as coords
 *             if not coords_in_info:             # <<<<<<<<<<<<<<
 *                 for key in rec.info:
 *                     new_rec.info[key] = rec.info[key]
 */
      }

      /* "msyd/pyxfiles/io.pyx":503
 *                     new_rec.info[key] = rec.info[key]
 *             # add Parent information
 *             if add_syn_anns:             # <<<<<<<<<<<<<<
 *                 new_rec.info['PID'] = syncounter
 *             for sample in rec.samples:
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_add_syn_anns); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 503, __pyx_L1_error)
      if (__pyx_t_11) {

        /* "msyd/pyxfiles/io.pyx":504
 *             # add Parent information
 *             if add_syn_anns:
 *                 new_rec.info['PID'] = syncounter             # <<<<<<<<<<<<<<
 *             for sample in rec.samples:
 *                 if keep_nonsyn_calls or sample in orgsvcf:
 */
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_syncounter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        if (unlikely((PyObject_SetItem(__pyx_t_22, __pyx_n_u_PID, __pyx_t_1) < 0))) __PYX_ERR(0, 504, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":503
 *                     new_rec.info[key] = rec.info[key]
 *             # add Parent information
 *             if add_syn_anns:             # <<<<<<<<<<<<<<
 *                 new_rec.info['PID'] = syncounter
 *             for sample in rec.samples:
 */
      }

      /* "msyd/pyxfiles/io.pyx":505
 *             if add_syn_anns:
 *                 new_rec.info['PID'] = syncounter
 *             for sample in rec.samples:             # <<<<<<<<<<<<<<
 *                 if keep_nonsyn_calls or sample in orgsvcf:
 *                     new_rec.samples[sample].update(rec.samples[sample])
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_22 = __pyx_t_1; __Pyx_INCREF(__pyx_t_22);
        __pyx_t_23 = 0;
        __pyx_t_24 = NULL;
      } else {
        __pyx_t_23 = -1; __pyx_t_22 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 505, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_24 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_22); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 505, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_24)) {
          if (likely(PyList_CheckExact(__pyx_t_22))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_22);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 505, __pyx_L1_error)
              #endif
              if (__pyx_t_23 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_22, __pyx_t_23); __Pyx_INCREF(__pyx_t_1); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 505, __pyx_L1_error)
            #else
            __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_22, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_22);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 505, __pyx_L1_error)
              #endif
              if (__pyx_t_23 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_22, __pyx_t_23); __Pyx_INCREF(__pyx_t_1); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 505, __pyx_L1_error)
            #else
            __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_22, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_24(__pyx_t_22);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 505, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":506
 *                 new_rec.info['PID'] = syncounter
 *             for sample in rec.samples:
 *                 if keep_nonsyn_calls or sample in orgsvcf:             # <<<<<<<<<<<<<<
 *                     new_rec.samples[sample].update(rec.samples[sample])
 * 
 */
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_keep_nonsyn_calls); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 506, __pyx_L1_error)
        if (!__pyx_t_6) {
        } else {
          __pyx_t_11 = __pyx_t_6;
          goto __pyx_L55_bool_binop_done;
        }
        __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_v_sample, __pyx_v_orgsvcf, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 506, __pyx_L1_error)
        __pyx_t_11 = __pyx_t_6;
        __pyx_L55_bool_binop_done:;
        if (__pyx_t_11) {

          /* "msyd/pyxfiles/io.pyx":507
 *             for sample in rec.samples:
 *                 if keep_nonsyn_calls or sample in orgsvcf:
 *                     new_rec.samples[sample].update(rec.samples[sample])             # <<<<<<<<<<<<<<
 * 
 *             # read in coords from INFO column, add to single sample
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_20 = __Pyx_PyObject_GetItem(__pyx_t_16, __pyx_v_sample); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_update); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_20, __pyx_v_sample); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_t_5};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "msyd/pyxfiles/io.pyx":506
 *                 new_rec.info['PID'] = syncounter
 *             for sample in rec.samples:
 *                 if keep_nonsyn_calls or sample in orgsvcf:             # <<<<<<<<<<<<<<
 *                     new_rec.samples[sample].update(rec.samples[sample])
 * 
 */
        }

        /* "msyd/pyxfiles/io.pyx":505
 *             if add_syn_anns:
 *                 new_rec.info['PID'] = syncounter
 *             for sample in rec.samples:             # <<<<<<<<<<<<<<
 *                 if keep_nonsyn_calls or sample in orgsvcf:
 *                     new_rec.samples[sample].update(rec.samples[sample])
 */
      }
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

      /* "msyd/pyxfiles/io.pyx":511
 *             # read in coords from INFO column, add to single sample
 *             # TODO get this to work, also re-look at the if below, seeems not right (rec shouldn't be writeable)
 *             if coords_in_info:             # <<<<<<<<<<<<<<
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:
 */
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_coords_in_info); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 511, __pyx_L1_error)
      if (__pyx_t_11) {

        /* "msyd/pyxfiles/io.pyx":512
 *             # TODO get this to work, also re-look at the if below, seeems not right (rec shouldn't be writeable)
 *             if coords_in_info:
 *                 sample = orgsvcf[0] # there can only be one sample             # <<<<<<<<<<<<<<
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:
 *                     if info in rec.info:
 */
        __pyx_t_22 = __Pyx_GetItemInt_List(__pyx_v_orgsvcf, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 512, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_22);
        __pyx_t_22 = 0;

        /* "msyd/pyxfiles/io.pyx":513
 *             if coords_in_info:
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:             # <<<<<<<<<<<<<<
 *                     if info in rec.info:
 *                         new_rec.samples[sample][ft] = rec.info[info]
 */
        __pyx_t_22 = __pyx_tuple__35; __Pyx_INCREF(__pyx_t_22);
        __pyx_t_23 = 0;
        for (;;) {
          if (__pyx_t_23 >= 3) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_22, __pyx_t_23); __Pyx_INCREF(__pyx_t_1); __pyx_t_23++; if (unlikely((0 < 0))) __PYX_ERR(0, 513, __pyx_L1_error)
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_22, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
          if (likely(__pyx_t_1 != Py_None)) {
            PyObject* sequence = __pyx_t_1;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 513, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_5);
            #else
            __pyx_t_16 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 513, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          } else {
            __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 513, __pyx_L1_error)
          }
          __Pyx_XDECREF_SET(__pyx_v_info, __pyx_t_16);
          __pyx_t_16 = 0;
          __Pyx_XDECREF_SET(__pyx_v_ft, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "msyd/pyxfiles/io.pyx":514
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:
 *                     if info in rec.info:             # <<<<<<<<<<<<<<
 *                         new_rec.samples[sample][ft] = rec.info[info]
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_v_info, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 514, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_11) {

            /* "msyd/pyxfiles/io.pyx":515
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:
 *                     if info in rec.info:
 *                         new_rec.samples[sample][ft] = rec.info[info]             # <<<<<<<<<<<<<<
 * 
 *             vcfout.write(new_rec)
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_16 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_sample); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 515, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely((PyObject_SetItem(__pyx_t_16, __pyx_v_ft, __pyx_t_5) < 0))) __PYX_ERR(0, 515, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "msyd/pyxfiles/io.pyx":514
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:
 *                     if info in rec.info:             # <<<<<<<<<<<<<<
 *                         new_rec.samples[sample][ft] = rec.info[info]
 * 
 */
          }

          /* "msyd/pyxfiles/io.pyx":513
 *             if coords_in_info:
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:             # <<<<<<<<<<<<<<
 *                     if info in rec.info:
 *                         new_rec.samples[sample][ft] = rec.info[info]
 */
        }
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

        /* "msyd/pyxfiles/io.pyx":511
 *             # read in coords from INFO column, add to single sample
 *             # TODO get this to work, also re-look at the if below, seeems not right (rec shouldn't be writeable)
 *             if coords_in_info:             # <<<<<<<<<<<<<<
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:
 */
      }

      /* "msyd/pyxfiles/io.pyx":517
 *                         new_rec.samples[sample][ft] = rec.info[info]
 * 
 *             vcfout.write(new_rec)             # <<<<<<<<<<<<<<
 *     #vcfout.close()
 *     #vcfin.close()
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_vcfout, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_new_rec};
        __pyx_t_22 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 517, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

      /* "msyd/pyxfiles/io.pyx":475
 * 
 *         # write the small variants in the pansyn region
 *         for rec in vcfin.fetch(rng.chr, rng.start, rng.end + 1): # pysam is half-inclusive             # <<<<<<<<<<<<<<
 *             # double check if the chr has been added, was throwing errors for some reason...
 *             if rec.chrom not in header_chrs:
 */
      __pyx_L34_continue:;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":453
 * 
 *     # add pansyn regions and contained records
 *     for syn in syns.iterrows():             # <<<<<<<<<<<<<<
 *         syn = syn[1][0]
 *         rng = syn.ref
 */
    __pyx_L19_continue:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":408
 *     return tmpfiles
 * 
 * cpdef void extract_syntenic_from_vcf(syns, inpath:Union[str, os.PathLike], outpath: Union[str, os.PathLike], force_index=True, synorg='ref', ref=None, keep_nonsyn_calls=False, add_syn_anns=True, add_cigar=False, add_identity=True, no_complex=False, coords_in_info=False):             # <<<<<<<<<<<<<<
 *     """
 *     Extract syntenic annotations from a given VCF.
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("msyd.io.extract_syntenic_from_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vcfin);
  __Pyx_XDECREF(__pyx_v_vcfout);
  __Pyx_XDECREF(__pyx_v_orgs);
  __Pyx_XDECREF(__pyx_v_header_chrs);
  __Pyx_XDECREF(__pyx_v_removing);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_orgsvcf);
  __Pyx_XDECREF(__pyx_v_syn);
  __Pyx_XDECREF(__pyx_v_rng);
  __Pyx_XDECREF(__pyx_v_rec);
  __Pyx_XDECREF(__pyx_v_new_rec);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_sample);
  __Pyx_XDECREF(__pyx_v_info);
  __Pyx_XDECREF(__pyx_v_ft);
  __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_allele);
  __Pyx_XDECREF(__pyx_v_inpath);
  __Pyx_XDECREF(__pyx_v_ref);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_17extract_syntenic_from_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_16extract_syntenic_from_vcf, "\n    Extract syntenic annotations from a given VCF.\n    A tabix-indexed VCF is required for this; by default, the input VCF is reindexed (and gzipped) with the call.\n    If the supplied VCF already has a tabix index, `force_index` may be set to false.\n    ");
static PyMethodDef __pyx_mdef_4msyd_2io_17extract_syntenic_from_vcf = {"extract_syntenic_from_vcf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_17extract_syntenic_from_vcf, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_16extract_syntenic_from_vcf};
static PyObject *__pyx_pw_4msyd_2io_17extract_syntenic_from_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_syns = 0;
  PyObject *__pyx_v_inpath = 0;
  PyObject *__pyx_v_outpath = 0;
  PyObject *__pyx_v_force_index = 0;
  PyObject *__pyx_v_synorg = 0;
  PyObject *__pyx_v_ref = 0;
  PyObject *__pyx_v_keep_nonsyn_calls = 0;
  PyObject *__pyx_v_add_syn_anns = 0;
  PyObject *__pyx_v_add_cigar = 0;
  PyObject *__pyx_v_add_identity = 0;
  PyObject *__pyx_v_no_complex = 0;
  PyObject *__pyx_v_coords_in_info = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_syntenic_from_vcf (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syns,&__pyx_n_s_inpath,&__pyx_n_s_outpath,&__pyx_n_s_force_index,&__pyx_n_s_synorg,&__pyx_n_s_ref,&__pyx_n_s_keep_nonsyn_calls,&__pyx_n_s_add_syn_anns,&__pyx_n_s_add_cigar,&__pyx_n_s_add_identity,&__pyx_n_s_no_complex,&__pyx_n_s_coords_in_info,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_ref));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[6] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[7] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[8] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[9] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[10] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[11] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 12: values[11] = __Pyx_Arg_FASTCALL(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_FASTCALL(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_syns)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inpath)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("extract_syntenic_from_vcf", 0, 3, 12, 1); __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_outpath)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("extract_syntenic_from_vcf", 0, 3, 12, 2); __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_force_index);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_synorg);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ref);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_keep_nonsyn_calls);
          if (value) { values[6] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_syn_anns);
          if (value) { values[7] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_cigar);
          if (value) { values[8] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_identity);
          if (value) { values[9] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_no_complex);
          if (value) { values[10] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_coords_in_info);
          if (value) { values[11] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extract_syntenic_from_vcf") < 0)) __PYX_ERR(0, 408, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 12: values[11] = __Pyx_Arg_FASTCALL(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_FASTCALL(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_syns = values[0];
    __pyx_v_inpath = values[1];
    __pyx_v_outpath = values[2];
    __pyx_v_force_index = values[3];
    __pyx_v_synorg = values[4];
    __pyx_v_ref = values[5];
    __pyx_v_keep_nonsyn_calls = values[6];
    __pyx_v_add_syn_anns = values[7];
    __pyx_v_add_cigar = values[8];
    __pyx_v_add_identity = values[9];
    __pyx_v_no_complex = values[10];
    __pyx_v_coords_in_info = values[11];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_syntenic_from_vcf", 0, 3, 12, __pyx_nargs); __PYX_ERR(0, 408, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.extract_syntenic_from_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_16extract_syntenic_from_vcf(__pyx_self, __pyx_v_syns, __pyx_v_inpath, __pyx_v_outpath, __pyx_v_force_index, __pyx_v_synorg, __pyx_v_ref, __pyx_v_keep_nonsyn_calls, __pyx_v_add_syn_anns, __pyx_v_add_cigar, __pyx_v_add_identity, __pyx_v_no_complex, __pyx_v_coords_in_info);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_16extract_syntenic_from_vcf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_inpath, PyObject *__pyx_v_outpath, PyObject *__pyx_v_force_index, PyObject *__pyx_v_synorg, PyObject *__pyx_v_ref, PyObject *__pyx_v_keep_nonsyn_calls, PyObject *__pyx_v_add_syn_anns, PyObject *__pyx_v_add_cigar, PyObject *__pyx_v_add_identity, PyObject *__pyx_v_no_complex, PyObject *__pyx_v_coords_in_info) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_4msyd_2io_extract_syntenic_from_vcf __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syntenic_from_vcf", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1.__pyx_n = 9;
  __pyx_t_1.force_index = __pyx_v_force_index;
  __pyx_t_1.synorg = __pyx_v_synorg;
  __pyx_t_1.ref = __pyx_v_ref;
  __pyx_t_1.keep_nonsyn_calls = __pyx_v_keep_nonsyn_calls;
  __pyx_t_1.add_syn_anns = __pyx_v_add_syn_anns;
  __pyx_t_1.add_cigar = __pyx_v_add_cigar;
  __pyx_t_1.add_identity = __pyx_v_add_identity;
  __pyx_t_1.no_complex = __pyx_v_no_complex;
  __pyx_t_1.coords_in_info = __pyx_v_coords_in_info;
  __pyx_f_4msyd_2io_extract_syntenic_from_vcf(__pyx_v_syns, __pyx_v_inpath, __pyx_v_outpath, 0, &__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_2 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msyd.io.extract_syntenic_from_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":521
 *     #vcfin.close()
 * 
 * cpdef void reduce_vcfs(vcfs: List[Union[str, os.PathLike]], opath: Union[str, os.PathLike], add_syn_anns=True):             # <<<<<<<<<<<<<<
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 */

static PyObject *__pyx_pw_4msyd_2io_19reduce_vcfs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static void __pyx_f_4msyd_2io_reduce_vcfs(PyObject *__pyx_v_vcfs, PyObject *__pyx_v_opath, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_reduce_vcfs *__pyx_optional_args) {
  PyObject *__pyx_v_tmpfiles = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED Py_ssize_t __pyx_9genexpr22__pyx_v__;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduce_vcfs", 1);
  if (__pyx_optional_args) {
  }

  /* "msyd/pyxfiles/io.pyx":524
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 *     if len(vcfs) < 1:             # <<<<<<<<<<<<<<
 *         logger.error("reduce_vcfs called with empty vcfs!")
 *         return
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vcfs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 524, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 < 1);
  if (__pyx_t_2) {

    /* "msyd/pyxfiles/io.pyx":525
 * 
 *     if len(vcfs) < 1:
 *         logger.error("reduce_vcfs called with empty vcfs!")             # <<<<<<<<<<<<<<
 *         return
 *     elif len(vcfs) == 1:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_reduce_vcfs_called_with_empty_vc};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":526
 *     if len(vcfs) < 1:
 *         logger.error("reduce_vcfs called with empty vcfs!")
 *         return             # <<<<<<<<<<<<<<
 *     elif len(vcfs) == 1:
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")
 */
    goto __pyx_L0;

    /* "msyd/pyxfiles/io.pyx":524
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 *     if len(vcfs) < 1:             # <<<<<<<<<<<<<<
 *         logger.error("reduce_vcfs called with empty vcfs!")
 *         return
 */
  }

  /* "msyd/pyxfiles/io.pyx":527
 *         logger.error("reduce_vcfs called with empty vcfs!")
 *         return
 *     elif len(vcfs) == 1:             # <<<<<<<<<<<<<<
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")
 *         return
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vcfs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "msyd/pyxfiles/io.pyx":528
 *         return
 *     elif len(vcfs) == 1:
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")             # <<<<<<<<<<<<<<
 *         return
 *     elif len(vcfs) == 2:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_vcfs, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_reduce_vcfs_called_with_only_one, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":529
 *     elif len(vcfs) == 1:
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")
 *         return             # <<<<<<<<<<<<<<
 *     elif len(vcfs) == 2:
 *         merge_vcfs(vcfs[0], vcfs[1], opath)
 */
    goto __pyx_L0;

    /* "msyd/pyxfiles/io.pyx":527
 *         logger.error("reduce_vcfs called with empty vcfs!")
 *         return
 *     elif len(vcfs) == 1:             # <<<<<<<<<<<<<<
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")
 *         return
 */
  }

  /* "msyd/pyxfiles/io.pyx":530
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")
 *         return
 *     elif len(vcfs) == 2:             # <<<<<<<<<<<<<<
 *         merge_vcfs(vcfs[0], vcfs[1], opath)
 *         return
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vcfs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (__pyx_t_2) {

    /* "msyd/pyxfiles/io.pyx":531
 *         return
 *     elif len(vcfs) == 2:
 *         merge_vcfs(vcfs[0], vcfs[1], opath)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_vcfs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vcfs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __pyx_f_4msyd_2io_merge_vcfs(__pyx_t_3, __pyx_t_4, __pyx_v_opath, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "msyd/pyxfiles/io.pyx":532
 *     elif len(vcfs) == 2:
 *         merge_vcfs(vcfs[0], vcfs[1], opath)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     tmpfiles = [util.gettmpfile() for _ in range(2, len(vcfs))] # the first two and last vcfs don't need to be stored as tempfiles
 */
    goto __pyx_L0;

    /* "msyd/pyxfiles/io.pyx":530
 *         logger.warning(f"reduce_vcfs called with only one vcf: {vcfs}")
 *         return
 *     elif len(vcfs) == 2:             # <<<<<<<<<<<<<<
 *         merge_vcfs(vcfs[0], vcfs[1], opath)
 *         return
 */
  }

  /* "msyd/pyxfiles/io.pyx":534
 *         return
 * 
 *     tmpfiles = [util.gettmpfile() for _ in range(2, len(vcfs))] # the first two and last vcfs don't need to be stored as tempfiles             # <<<<<<<<<<<<<<
 *     merge_vcfs(vcfs[0], vcfs[1], tmpfiles[0])
 *     for i in range(1, len(vcfs)-2):
 */
  { /* enter inner scope */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = PyObject_Length(__pyx_v_vcfs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 534, __pyx_L1_error)
    __pyx_t_8 = __pyx_t_1;
    for (__pyx_t_9 = 2; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_9genexpr22__pyx_v__ = __pyx_t_9;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_gettmpfile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  } /* exit inner scope */
  __pyx_v_tmpfiles = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "msyd/pyxfiles/io.pyx":535
 * 
 *     tmpfiles = [util.gettmpfile() for _ in range(2, len(vcfs))] # the first two and last vcfs don't need to be stored as tempfiles
 *     merge_vcfs(vcfs[0], vcfs[1], tmpfiles[0])             # <<<<<<<<<<<<<<
 *     for i in range(1, len(vcfs)-2):
 *         merge_vcfs(tmpfiles[i-1], vcfs[i+1], tmpfiles[i])
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_vcfs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_vcfs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_tmpfiles, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __pyx_f_4msyd_2io_merge_vcfs(__pyx_t_7, __pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":536
 *     tmpfiles = [util.gettmpfile() for _ in range(2, len(vcfs))] # the first two and last vcfs don't need to be stored as tempfiles
 *     merge_vcfs(vcfs[0], vcfs[1], tmpfiles[0])
 *     for i in range(1, len(vcfs)-2):             # <<<<<<<<<<<<<<
 *         merge_vcfs(tmpfiles[i-1], vcfs[i+1], tmpfiles[i])
 *     # incorporate the last vcf, save directly to output
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_vcfs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 536, __pyx_L1_error)
  __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_1 - 2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_1)) __PYX_ERR(0, 536, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 536, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 536, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 536, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 536, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 536, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_10(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 536, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":537
 *     merge_vcfs(vcfs[0], vcfs[1], tmpfiles[0])
 *     for i in range(1, len(vcfs)-2):
 *         merge_vcfs(tmpfiles[i-1], vcfs[i+1], tmpfiles[i])             # <<<<<<<<<<<<<<
 *     # incorporate the last vcf, save directly to output
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)
 */
    __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_tmpfiles, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_vcfs, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_tmpfiles, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __pyx_f_4msyd_2io_merge_vcfs(__pyx_t_4, __pyx_t_7, __pyx_t_3, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "msyd/pyxfiles/io.pyx":536
 *     tmpfiles = [util.gettmpfile() for _ in range(2, len(vcfs))] # the first two and last vcfs don't need to be stored as tempfiles
 *     merge_vcfs(vcfs[0], vcfs[1], tmpfiles[0])
 *     for i in range(1, len(vcfs)-2):             # <<<<<<<<<<<<<<
 *         merge_vcfs(tmpfiles[i-1], vcfs[i+1], tmpfiles[i])
 *     # incorporate the last vcf, save directly to output
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "msyd/pyxfiles/io.pyx":539
 *         merge_vcfs(tmpfiles[i-1], vcfs[i+1], tmpfiles[i])
 *     # incorporate the last vcf, save directly to output
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)             # <<<<<<<<<<<<<<
 * 
 * cpdef add_syn_anns_to_vcf(syns, vcfin: Union[str, os.PathLike], vcfout: Union[str, os.PathLike], ref=None):
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_vcfs, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_GetItemInt_List(__pyx_v_tmpfiles, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = __pyx_f_4msyd_2io_merge_vcfs(__pyx_t_5, __pyx_t_11, __pyx_v_opath, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":521
 *     #vcfin.close()
 * 
 * cpdef void reduce_vcfs(vcfs: List[Union[str, os.PathLike]], opath: Union[str, os.PathLike], add_syn_anns=True):             # <<<<<<<<<<<<<<
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("msyd.io.reduce_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmpfiles);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_19reduce_vcfs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_19reduce_vcfs = {"reduce_vcfs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_19reduce_vcfs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_19reduce_vcfs(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_vcfs = 0;
  PyObject *__pyx_v_opath = 0;
  PyObject *__pyx_v_add_syn_anns = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduce_vcfs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vcfs,&__pyx_n_s_opath,&__pyx_n_s_add_syn_anns,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vcfs)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_opath)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("reduce_vcfs", 0, 2, 3, 1); __PYX_ERR(0, 521, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_syn_anns);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reduce_vcfs") < 0)) __PYX_ERR(0, 521, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vcfs = values[0];
    __pyx_v_opath = values[1];
    __pyx_v_add_syn_anns = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reduce_vcfs", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 521, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.reduce_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_18reduce_vcfs(__pyx_self, __pyx_v_vcfs, __pyx_v_opath, __pyx_v_add_syn_anns);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_18reduce_vcfs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_vcfs, PyObject *__pyx_v_opath, PyObject *__pyx_v_add_syn_anns) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_4msyd_2io_reduce_vcfs __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduce_vcfs", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1.__pyx_n = 1;
  __pyx_t_1.add_syn_anns = __pyx_v_add_syn_anns;
  __pyx_f_4msyd_2io_reduce_vcfs(__pyx_v_vcfs, __pyx_v_opath, 0, &__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_t_2 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msyd.io.reduce_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":541
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)
 * 
 * cpdef add_syn_anns_to_vcf(syns, vcfin: Union[str, os.PathLike], vcfout: Union[str, os.PathLike], ref=None):             # <<<<<<<<<<<<<<
 *     """Takes a VCF file, overwrites it adding annotations for core/cross-syn region. Other records are preserved as-is."""
 *     cdef:
 */

static PyObject *__pyx_pw_4msyd_2io_21add_syn_anns_to_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_add_syn_anns_to_vcf(PyObject *__pyx_v_syns, PyObject *__pyx_v_vcfin, PyObject *__pyx_v_vcfout, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_add_syn_anns_to_vcf *__pyx_optional_args) {
  PyObject *__pyx_v_ref = ((PyObject *)Py_None);
  PyObject *__pyx_v_oldvcf = 0;
  PyObject *__pyx_v_newvcf = 0;
  int __pyx_v_syncounter;
  CYTHON_UNUSED PyObject *__pyx_v_orgs = 0;
  PyObject *__pyx_v_headerset = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_sample = NULL;
  PyObject *__pyx_v_syniter = NULL;
  PyObject *__pyx_v_syn = NULL;
  PyObject *__pyx_v_oldrec = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  struct __pyx_opt_args_4msyd_2io_copy_record __pyx_t_13;
  struct __pyx_opt_args_4msyd_2io_add_syn_ann __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_syn_anns_to_vcf", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ref = __pyx_optional_args->ref;
    }
  }

  /* "msyd/pyxfiles/io.pyx":545
 *     cdef:
 *         # read in old file, initialise for overwriting
 *         oldvcf = pysam.VariantFile(vcfin, 'r')             # <<<<<<<<<<<<<<
 *         newvcf = pysam.VariantFile(vcfout, 'w')
 *         int syncounter = 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pysam); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_vcfin, __pyx_n_u_r};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_oldvcf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":546
 *         # read in old file, initialise for overwriting
 *         oldvcf = pysam.VariantFile(vcfin, 'r')
 *         newvcf = pysam.VariantFile(vcfout, 'w')             # <<<<<<<<<<<<<<
 *         int syncounter = 1
 *         orgs = sorted(util.get_orgs_from_df(syns))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_vcfout, __pyx_n_u_w};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_newvcf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":547
 *         oldvcf = pysam.VariantFile(vcfin, 'r')
 *         newvcf = pysam.VariantFile(vcfout, 'w')
 *         int syncounter = 1             # <<<<<<<<<<<<<<
 *         orgs = sorted(util.get_orgs_from_df(syns))
 *         #int orgsc = len(orgs)
 */
  __pyx_v_syncounter = 1;

  /* "msyd/pyxfiles/io.pyx":548
 *         newvcf = pysam.VariantFile(vcfout, 'w')
 *         int syncounter = 1
 *         orgs = sorted(util.get_orgs_from_df(syns))             # <<<<<<<<<<<<<<
 *         #int orgsc = len(orgs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_orgs_from_df); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_syns};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 548, __pyx_L1_error)
  __pyx_v_orgs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":552
 * 
 *     # copy header, deduplicate along the way
 *     headerset = set()             # <<<<<<<<<<<<<<
 *     for line in str(oldvcf.header).splitlines()[:-1]:
 *         #logger.info(line)
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_headerset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":553
 *     # copy header, deduplicate along the way
 *     headerset = set()
 *     for line in str(oldvcf.header).splitlines()[:-1]:             # <<<<<<<<<<<<<<
 *         #logger.info(line)
 *         if not line in headerset:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_splitlines); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, -1L, NULL, NULL, &__pyx_slice__5, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 553, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 553, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 553, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 553, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 553, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 553, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":555
 *     for line in str(oldvcf.header).splitlines()[:-1]:
 *         #logger.info(line)
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             newvcf.header.add_line(line)
 *             headerset.add(line)
 */
    __pyx_t_9 = (__Pyx_PySet_ContainsTF(__pyx_v_line, __pyx_v_headerset, Py_NE)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 555, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "msyd/pyxfiles/io.pyx":556
 *         #logger.info(line)
 *         if not line in headerset:
 *             newvcf.header.add_line(line)             # <<<<<<<<<<<<<<
 *             headerset.add(line)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_newvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_line); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_line};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 556, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "msyd/pyxfiles/io.pyx":557
 *         if not line in headerset:
 *             newvcf.header.add_line(line)
 *             headerset.add(line)             # <<<<<<<<<<<<<<
 * 
 *     # extend header if necessary
 */
      __pyx_t_6 = PySet_Add(__pyx_v_headerset, __pyx_v_line); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 557, __pyx_L1_error)

      /* "msyd/pyxfiles/io.pyx":555
 *     for line in str(oldvcf.header).splitlines()[:-1]:
 *         #logger.info(line)
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             newvcf.header.add_line(line)
 *             headerset.add(line)
 */
    }

    /* "msyd/pyxfiles/io.pyx":553
 *     # copy header, deduplicate along the way
 *     headerset = set()
 *     for line in str(oldvcf.header).splitlines()[:-1]:             # <<<<<<<<<<<<<<
 *         #logger.info(line)
 *         if not line in headerset:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":560
 * 
 *     # extend header if necessary
 *     for line in HEADER.splitlines():             # <<<<<<<<<<<<<<
 *         if not line in headerset:
 *             newvcf.header.add_line(line)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HEADER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_splitlines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 560, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 560, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 560, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 560, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 560, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 560, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":561
 *     # extend header if necessary
 *     for line in HEADER.splitlines():
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             newvcf.header.add_line(line)
 *             headerset.add(line)
 */
    __pyx_t_9 = (__Pyx_PySet_ContainsTF(__pyx_v_line, __pyx_v_headerset, Py_NE)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 561, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "msyd/pyxfiles/io.pyx":562
 *     for line in HEADER.splitlines():
 *         if not line in headerset:
 *             newvcf.header.add_line(line)             # <<<<<<<<<<<<<<
 *             headerset.add(line)
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_newvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_add_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_line};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":563
 *         if not line in headerset:
 *             newvcf.header.add_line(line)
 *             headerset.add(line)             # <<<<<<<<<<<<<<
 * 
 *     for sample in oldvcf.header.samples:
 */
      __pyx_t_6 = PySet_Add(__pyx_v_headerset, __pyx_v_line); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 563, __pyx_L1_error)

      /* "msyd/pyxfiles/io.pyx":561
 *     # extend header if necessary
 *     for line in HEADER.splitlines():
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             newvcf.header.add_line(line)
 *             headerset.add(line)
 */
    }

    /* "msyd/pyxfiles/io.pyx":560
 * 
 *     # extend header if necessary
 *     for line in HEADER.splitlines():             # <<<<<<<<<<<<<<
 *         if not line in headerset:
 *             newvcf.header.add_line(line)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":565
 *             headerset.add(line)
 * 
 *     for sample in oldvcf.header.samples:             # <<<<<<<<<<<<<<
 *         newvcf.header.add_sample(sample)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 565, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 565, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 565, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 565, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 565, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 565, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":566
 * 
 *     for sample in oldvcf.header.samples:
 *         newvcf.header.add_sample(sample)             # <<<<<<<<<<<<<<
 * 
 *     syniter = syns.iterrows()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_newvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_sample); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_sample};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":565
 *             headerset.add(line)
 * 
 *     for sample in oldvcf.header.samples:             # <<<<<<<<<<<<<<
 *         newvcf.header.add_sample(sample)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":568
 *         newvcf.header.add_sample(sample)
 * 
 *     syniter = syns.iterrows()             # <<<<<<<<<<<<<<
 *     syn = next(syniter)[1][0]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_syns, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_v_syniter = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":569
 * 
 *     syniter = syns.iterrows()
 *     syn = next(syniter)[1][0]             # <<<<<<<<<<<<<<
 * 
 *     for oldrec in oldvcf:
 */
  __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_syniter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_syn = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":571
 *     syn = next(syniter)[1][0]
 * 
 *     for oldrec in oldvcf:             # <<<<<<<<<<<<<<
 *         if oldrec.chrom < syn.ref.chr:
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding
 */
  if (likely(PyList_CheckExact(__pyx_v_oldvcf)) || PyTuple_CheckExact(__pyx_v_oldvcf)) {
    __pyx_t_3 = __pyx_v_oldvcf; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_oldvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 571, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 571, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 571, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_oldrec, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":572
 * 
 *     for oldrec in oldvcf:
 *         if oldrec.chrom < syn.ref.chr:             # <<<<<<<<<<<<<<
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding
 *                 #logger.info(f"add_syn_anns_to_vcf Adding {syn.ref.chr} to header")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldrec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_chr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_9) {

      /* "msyd/pyxfiles/io.pyx":573
 *     for oldrec in oldvcf:
 *         if oldrec.chrom < syn.ref.chr:
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding             # <<<<<<<<<<<<<<
 *                 #logger.info(f"add_syn_anns_to_vcf Adding {syn.ref.chr} to header")
 *                 ovcf.header.add_line("##contig=<ID={}>".format(oldref.chrom))
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldrec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_newvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_contigs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = (__Pyx_PySet_ContainsTF(__pyx_t_5, __pyx_t_2, Py_NE)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 573, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_9) {

        /* "msyd/pyxfiles/io.pyx":575
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding
 *                 #logger.info(f"add_syn_anns_to_vcf Adding {syn.ref.chr} to header")
 *                 ovcf.header.add_line("##contig=<ID={}>".format(oldref.chrom))             # <<<<<<<<<<<<<<
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 *         elif oldrec.start < syn.ref.start:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ovcf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_oldref); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_chrom); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_12};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __pyx_t_10 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_1};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":573
 *     for oldrec in oldvcf:
 *         if oldrec.chrom < syn.ref.chr:
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding             # <<<<<<<<<<<<<<
 *                 #logger.info(f"add_syn_anns_to_vcf Adding {syn.ref.chr} to header")
 *                 ovcf.header.add_line("##contig=<ID={}>".format(oldref.chrom))
 */
      }

      /* "msyd/pyxfiles/io.pyx":576
 *                 #logger.info(f"add_syn_anns_to_vcf Adding {syn.ref.chr} to header")
 *                 ovcf.header.add_line("##contig=<ID={}>".format(oldref.chrom))
 *             copy_record(oldrec, newvcf, pid=syncounter-1)             # <<<<<<<<<<<<<<
 *         elif oldrec.start < syn.ref.start:
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 */
      __pyx_t_13.__pyx_n = 1;
      __pyx_t_13.pid = (__pyx_v_syncounter - 1);
      __pyx_t_2 = __pyx_f_4msyd_2io_copy_record(__pyx_v_oldrec, __pyx_v_newvcf, &__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":572
 * 
 *     for oldrec in oldvcf:
 *         if oldrec.chrom < syn.ref.chr:             # <<<<<<<<<<<<<<
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding
 *                 #logger.info(f"add_syn_anns_to_vcf Adding {syn.ref.chr} to header")
 */
      goto __pyx_L16;
    }

    /* "msyd/pyxfiles/io.pyx":577
 *                 ovcf.header.add_line("##contig=<ID={}>".format(oldref.chrom))
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 *         elif oldrec.start < syn.ref.start:             # <<<<<<<<<<<<<<
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_oldrec, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_9) {

      /* "msyd/pyxfiles/io.pyx":578
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 *         elif oldrec.start < syn.ref.start:
 *             copy_record(oldrec, newvcf, pid=syncounter-1)             # <<<<<<<<<<<<<<
 *         else:
 *             # the record is not before the syn
 */
      __pyx_t_13.__pyx_n = 1;
      __pyx_t_13.pid = (__pyx_v_syncounter - 1);
      __pyx_t_5 = __pyx_f_4msyd_2io_copy_record(__pyx_v_oldrec, __pyx_v_newvcf, &__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "msyd/pyxfiles/io.pyx":577
 *                 ovcf.header.add_line("##contig=<ID={}>".format(oldref.chrom))
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 *         elif oldrec.start < syn.ref.start:             # <<<<<<<<<<<<<<
 *             copy_record(oldrec, newvcf, pid=syncounter-1)
 *         else:
 */
      goto __pyx_L16;
    }

    /* "msyd/pyxfiles/io.pyx":581
 *         else:
 *             # the record is not before the syn
 *             add_syn_ann(syn, newvcf, ref=ref, no=syncounter)             # <<<<<<<<<<<<<<
 *             copy_record(oldrec, newvcf, pid=syncounter)
 *             syncounter += 1
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_syncounter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 581, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14.__pyx_n = 2;
      __pyx_t_14.ref = __pyx_v_ref;
      __pyx_t_14.no = __pyx_t_5;
      __pyx_t_1 = __pyx_f_4msyd_2io_add_syn_ann(__pyx_v_syn, __pyx_v_newvcf, &__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":582
 *             # the record is not before the syn
 *             add_syn_ann(syn, newvcf, ref=ref, no=syncounter)
 *             copy_record(oldrec, newvcf, pid=syncounter)             # <<<<<<<<<<<<<<
 *             syncounter += 1
 *             try:
 */
      __pyx_t_13.__pyx_n = 1;
      __pyx_t_13.pid = __pyx_v_syncounter;
      __pyx_t_1 = __pyx_f_4msyd_2io_copy_record(__pyx_v_oldrec, __pyx_v_newvcf, &__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":583
 *             add_syn_ann(syn, newvcf, ref=ref, no=syncounter)
 *             copy_record(oldrec, newvcf, pid=syncounter)
 *             syncounter += 1             # <<<<<<<<<<<<<<
 *             try:
 *                 syn = next(syniter)[1][0]
 */
      __pyx_v_syncounter = (__pyx_v_syncounter + 1);

      /* "msyd/pyxfiles/io.pyx":584
 *             copy_record(oldrec, newvcf, pid=syncounter)
 *             syncounter += 1
 *             try:             # <<<<<<<<<<<<<<
 *                 syn = next(syniter)[1][0]
 *             except StopIteration:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_17);
        /*try:*/ {

          /* "msyd/pyxfiles/io.pyx":585
 *             syncounter += 1
 *             try:
 *                 syn = next(syniter)[1][0]             # <<<<<<<<<<<<<<
 *             except StopIteration:
 *                 syn.ref.start = 99999999999 # to disable ever entering the else case again
 */
          __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_syniter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 585, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF_SET(__pyx_v_syn, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "msyd/pyxfiles/io.pyx":584
 *             copy_record(oldrec, newvcf, pid=syncounter)
 *             syncounter += 1
 *             try:             # <<<<<<<<<<<<<<
 *                 syn = next(syniter)[1][0]
 *             except StopIteration:
 */
        }
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        goto __pyx_L25_try_end;
        __pyx_L18_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "msyd/pyxfiles/io.pyx":586
 *             try:
 *                 syn = next(syniter)[1][0]
 *             except StopIteration:             # <<<<<<<<<<<<<<
 *                 syn.ref.start = 99999999999 # to disable ever entering the else case again
 * 
 */
        __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
        if (__pyx_t_4) {
          __Pyx_AddTraceback("msyd.io.add_syn_anns_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_2) < 0) __PYX_ERR(0, 586, __pyx_L20_except_error)
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_2);

          /* "msyd/pyxfiles/io.pyx":587
 *                 syn = next(syniter)[1][0]
 *             except StopIteration:
 *                 syn.ref.start = 99999999999 # to disable ever entering the else case again             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 587, __pyx_L20_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_10, __pyx_n_s_start, __pyx_int_99999999999) < 0) __PYX_ERR(0, 587, __pyx_L20_except_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L19_exception_handled;
        }
        goto __pyx_L20_except_error;

        /* "msyd/pyxfiles/io.pyx":584
 *             copy_record(oldrec, newvcf, pid=syncounter)
 *             syncounter += 1
 *             try:             # <<<<<<<<<<<<<<
 *                 syn = next(syniter)[1][0]
 *             except StopIteration:
 */
        __pyx_L20_except_error:;
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        goto __pyx_L1_error;
        __pyx_L19_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        __pyx_L25_try_end:;
      }
    }
    __pyx_L16:;

    /* "msyd/pyxfiles/io.pyx":571
 *     syn = next(syniter)[1][0]
 * 
 *     for oldrec in oldvcf:             # <<<<<<<<<<<<<<
 *         if oldrec.chrom < syn.ref.chr:
 *             if oldrec.chrom not in set(newvcf.header.contigs): # check if chr needs adding
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":541
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)
 * 
 * cpdef add_syn_anns_to_vcf(syns, vcfin: Union[str, os.PathLike], vcfout: Union[str, os.PathLike], ref=None):             # <<<<<<<<<<<<<<
 *     """Takes a VCF file, overwrites it adding annotations for core/cross-syn region. Other records are preserved as-is."""
 *     cdef:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("msyd.io.add_syn_anns_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_oldvcf);
  __Pyx_XDECREF(__pyx_v_newvcf);
  __Pyx_XDECREF(__pyx_v_orgs);
  __Pyx_XDECREF(__pyx_v_headerset);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_sample);
  __Pyx_XDECREF(__pyx_v_syniter);
  __Pyx_XDECREF(__pyx_v_syn);
  __Pyx_XDECREF(__pyx_v_oldrec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_21add_syn_anns_to_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_20add_syn_anns_to_vcf, "Takes a VCF file, overwrites it adding annotations for core/cross-syn region. Other records are preserved as-is.");
static PyMethodDef __pyx_mdef_4msyd_2io_21add_syn_anns_to_vcf = {"add_syn_anns_to_vcf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_21add_syn_anns_to_vcf, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_20add_syn_anns_to_vcf};
static PyObject *__pyx_pw_4msyd_2io_21add_syn_anns_to_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_syns = 0;
  PyObject *__pyx_v_vcfin = 0;
  PyObject *__pyx_v_vcfout = 0;
  PyObject *__pyx_v_ref = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_syn_anns_to_vcf (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syns,&__pyx_n_s_vcfin,&__pyx_n_s_vcfout,&__pyx_n_s_ref,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_syns)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vcfin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("add_syn_anns_to_vcf", 0, 3, 4, 1); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vcfout)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("add_syn_anns_to_vcf", 0, 3, 4, 2); __PYX_ERR(0, 541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ref);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_syn_anns_to_vcf") < 0)) __PYX_ERR(0, 541, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_syns = values[0];
    __pyx_v_vcfin = values[1];
    __pyx_v_vcfout = values[2];
    __pyx_v_ref = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_syn_anns_to_vcf", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 541, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.add_syn_anns_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_20add_syn_anns_to_vcf(__pyx_self, __pyx_v_syns, __pyx_v_vcfin, __pyx_v_vcfout, __pyx_v_ref);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_20add_syn_anns_to_vcf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_vcfin, PyObject *__pyx_v_vcfout, PyObject *__pyx_v_ref) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4msyd_2io_add_syn_anns_to_vcf __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_syn_anns_to_vcf", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.ref = __pyx_v_ref;
  __pyx_t_1 = __pyx_f_4msyd_2io_add_syn_anns_to_vcf(__pyx_v_syns, __pyx_v_vcfin, __pyx_v_vcfout, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.add_syn_anns_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":590
 * 
 * 
 * cdef add_syn_ann(syn, ovcf, ref=None, no=None, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     rng = syn.ref
 *     rec = ovcf.new_record()
 */

static PyObject *__pyx_f_4msyd_2io_add_syn_ann(PyObject *__pyx_v_syn, PyObject *__pyx_v_ovcf, struct __pyx_opt_args_4msyd_2io_add_syn_ann *__pyx_optional_args) {
  PyObject *__pyx_v_ref = ((PyObject *)Py_None);
  PyObject *__pyx_v_no = ((PyObject *)Py_None);
  PyObject *__pyx_v_add_cigar = ((PyObject *)Py_False);
  PyObject *__pyx_v_add_identity = ((PyObject *)Py_True);
  PyObject *__pyx_v_rng = NULL;
  PyObject *__pyx_v_rec = NULL;
  PyObject *__pyx_v_chrom = NULL;
  PyObject *__pyx_v_org = NULL;
  PyObject *__pyx_v_cg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_syn_ann", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ref = __pyx_optional_args->ref;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_no = __pyx_optional_args->no;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_add_cigar = __pyx_optional_args->add_cigar;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_add_identity = __pyx_optional_args->add_identity;
          }
        }
      }
    }
  }

  /* "msyd/pyxfiles/io.pyx":591
 * 
 * cdef add_syn_ann(syn, ovcf, ref=None, no=None, add_cigar=False, add_identity=True):
 *     rng = syn.ref             # <<<<<<<<<<<<<<
 *     rec = ovcf.new_record()
 *     rec.start = rng.start
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rng = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":592
 * cdef add_syn_ann(syn, ovcf, ref=None, no=None, add_cigar=False, add_identity=True):
 *     rng = syn.ref
 *     rec = ovcf.new_record()             # <<<<<<<<<<<<<<
 *     rec.start = rng.start
 *     rec.pos = rec.start
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_new_record); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_rec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":593
 *     rng = syn.ref
 *     rec = ovcf.new_record()
 *     rec.start = rng.start             # <<<<<<<<<<<<<<
 *     rec.pos = rec.start
 *     rec.stop = rng.end
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_start, __pyx_t_1) < 0) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":594
 *     rec = ovcf.new_record()
 *     rec.start = rng.start
 *     rec.pos = rec.start             # <<<<<<<<<<<<<<
 *     rec.stop = rng.end
 *     chrom = rng.chr
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_pos, __pyx_t_1) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":595
 *     rec.start = rng.start
 *     rec.pos = rec.start
 *     rec.stop = rng.end             # <<<<<<<<<<<<<<
 *     chrom = rng.chr
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_stop, __pyx_t_1) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":596
 *     rec.pos = rec.start
 *     rec.stop = rng.end
 *     chrom = rng.chr             # <<<<<<<<<<<<<<
 * 
 *     if chrom not in set(ovcf.header.contigs):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_chr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chrom = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":598
 *     chrom = rng.chr
 * 
 *     if chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *         #logger.info(f"add_syn_ann Adding {chrom} to header")
 *         if ref:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_contigs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_v_chrom, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "msyd/pyxfiles/io.pyx":600
 *     if chrom not in set(ovcf.header.contigs):
 *         #logger.info(f"add_syn_ann Adding {chrom} to header")
 *         if ref:             # <<<<<<<<<<<<<<
 *             # add length if it is known from the reference
 *             ovcf.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 600, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "msyd/pyxfiles/io.pyx":602
 *         if ref:
 *             # add length if it is known from the reference
 *             ovcf.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))             # <<<<<<<<<<<<<<
 *         else:
 *             ovcf.header.add_line("##contig=<ID={}>".format(chrom))
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_line); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID_length, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_v_chrom); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_v_chrom, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":600
 *     if chrom not in set(ovcf.header.contigs):
 *         #logger.info(f"add_syn_ann Adding {chrom} to header")
 *         if ref:             # <<<<<<<<<<<<<<
 *             # add length if it is known from the reference
 *             ovcf.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))
 */
      goto __pyx_L4;
    }

    /* "msyd/pyxfiles/io.pyx":604
 *             ovcf.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))
 *         else:
 *             ovcf.header.add_line("##contig=<ID={}>".format(chrom))             # <<<<<<<<<<<<<<
 * 
 *     rec.chrom = chrom
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_chrom};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_6 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "msyd/pyxfiles/io.pyx":598
 *     chrom = rng.chr
 * 
 *     if chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *         #logger.info(f"add_syn_ann Adding {chrom} to header")
 *         if ref:
 */
  }

  /* "msyd/pyxfiles/io.pyx":606
 *             ovcf.header.add_line("##contig=<ID={}>".format(chrom))
 * 
 *     rec.chrom = chrom             # <<<<<<<<<<<<<<
 *     if set(ovcf.header.samples).issubset(syn.get_orgs()): # if the region is coresyn within the VCF
 *         if ref:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_chrom, __pyx_v_chrom) < 0) __PYX_ERR(0, 606, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":607
 * 
 *     rec.chrom = chrom
 *     if set(ovcf.header.samples).issubset(syn.get_orgs()): # if the region is coresyn within the VCF             # <<<<<<<<<<<<<<
 *         if ref:
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_issubset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_get_orgs); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "msyd/pyxfiles/io.pyx":608
 *     rec.chrom = chrom
 *     if set(ovcf.header.samples).issubset(syn.get_orgs()): # if the region is coresyn within the VCF
 *         if ref:             # <<<<<<<<<<<<<<
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 608, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "msyd/pyxfiles/io.pyx":609
 *     if set(ovcf.header.samples).issubset(syn.get_orgs()): # if the region is coresyn within the VCF
 *         if ref:
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]             # <<<<<<<<<<<<<<
 *         else:
 *             rec.alleles = ["<SYN>", "<CORESYN>"]
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(0, 609, __pyx_L1_error);
      __Pyx_INCREF(__pyx_kp_u_CORESYN);
      __Pyx_GIVEREF(__pyx_kp_u_CORESYN);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_CORESYN)) __PYX_ERR(0, 609, __pyx_L1_error);
      __pyx_t_2 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_1) < 0) __PYX_ERR(0, 609, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":608
 *     rec.chrom = chrom
 *     if set(ovcf.header.samples).issubset(syn.get_orgs()): # if the region is coresyn within the VCF
 *         if ref:             # <<<<<<<<<<<<<<
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 *         else:
 */
      goto __pyx_L6;
    }

    /* "msyd/pyxfiles/io.pyx":611
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 *         else:
 *             rec.alleles = ["<SYN>", "<CORESYN>"]             # <<<<<<<<<<<<<<
 *         rec.id = "CORESYN{}".format(no)
 *     else:
 */
    /*else*/ {
      __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_SYN_2);
      __Pyx_GIVEREF(__pyx_kp_u_SYN_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_SYN_2)) __PYX_ERR(0, 611, __pyx_L1_error);
      __Pyx_INCREF(__pyx_kp_u_CORESYN);
      __Pyx_GIVEREF(__pyx_kp_u_CORESYN);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_CORESYN)) __PYX_ERR(0, 611, __pyx_L1_error);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_1) < 0) __PYX_ERR(0, 611, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "msyd/pyxfiles/io.pyx":612
 *         else:
 *             rec.alleles = ["<SYN>", "<CORESYN>"]
 *         rec.id = "CORESYN{}".format(no)             # <<<<<<<<<<<<<<
 *     else:
 *         if ref:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_CORESYN_2, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_no};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_id, __pyx_t_1) < 0) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":607
 * 
 *     rec.chrom = chrom
 *     if set(ovcf.header.samples).issubset(syn.get_orgs()): # if the region is coresyn within the VCF             # <<<<<<<<<<<<<<
 *         if ref:
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 */
    goto __pyx_L5;
  }

  /* "msyd/pyxfiles/io.pyx":614
 *         rec.id = "CORESYN{}".format(no)
 *     else:
 *         if ref:             # <<<<<<<<<<<<<<
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]
 *         else:
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 614, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "msyd/pyxfiles/io.pyx":615
 *     else:
 *         if ref:
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]             # <<<<<<<<<<<<<<
 *         else:
 *             rec.alleles = ["<SYN>", "<CROSSSYN>"]
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error);
      __Pyx_INCREF(__pyx_kp_u_CROSSSYN);
      __Pyx_GIVEREF(__pyx_kp_u_CROSSSYN);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_CROSSSYN)) __PYX_ERR(0, 615, __pyx_L1_error);
      __pyx_t_3 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_1) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":614
 *         rec.id = "CORESYN{}".format(no)
 *     else:
 *         if ref:             # <<<<<<<<<<<<<<
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]
 *         else:
 */
      goto __pyx_L7;
    }

    /* "msyd/pyxfiles/io.pyx":617
 *             rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]
 *         else:
 *             rec.alleles = ["<SYN>", "<CROSSSYN>"]             # <<<<<<<<<<<<<<
 *         rec.id = "CROSSSYN{}".format(no)
 * 
 */
    /*else*/ {
      __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_kp_u_SYN_2);
      __Pyx_GIVEREF(__pyx_kp_u_SYN_2);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_SYN_2)) __PYX_ERR(0, 617, __pyx_L1_error);
      __Pyx_INCREF(__pyx_kp_u_CROSSSYN);
      __Pyx_GIVEREF(__pyx_kp_u_CROSSSYN);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_CROSSSYN)) __PYX_ERR(0, 617, __pyx_L1_error);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_1) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "msyd/pyxfiles/io.pyx":618
 *         else:
 *             rec.alleles = ["<SYN>", "<CROSSSYN>"]
 *         rec.id = "CROSSSYN{}".format(no)             # <<<<<<<<<<<<<<
 * 
 *     #rec.info['NS'] = syn.get_degree() # update NS column, include not only orgs in sample now
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_CROSSSYN_2, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_no};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_id, __pyx_t_1) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L5:;

  /* "msyd/pyxfiles/io.pyx":623
 * 
 *     # write the pansyn annotation
 *     for org in ovcf.header.samples:             # <<<<<<<<<<<<<<
 *         if org in syn.get_orgs():
 *             rng = syn.ranges_dict[org]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_8 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 623, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 623, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 623, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 623, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 623, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 623, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_10(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 623, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_org, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":624
 *     # write the pansyn annotation
 *     for org in ovcf.header.samples:
 *         if org in syn.get_orgs():             # <<<<<<<<<<<<<<
 *             rng = syn.ranges_dict[org]
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_get_orgs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 624, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_org, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_5) {

      /* "msyd/pyxfiles/io.pyx":625
 *     for org in ovcf.header.samples:
 *         if org in syn.get_orgs():
 *             rng = syn.ranges_dict[org]             # <<<<<<<<<<<<<<
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 *             if syn.cigars_dict:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_org); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 625, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_rng, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":626
 *         if org in syn.get_orgs():
 *             rng = syn.ranges_dict[org]
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})             # <<<<<<<<<<<<<<
 *             if syn.cigars_dict:
 *                 cg = syn.cigars_dict[org]
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_org); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_SYN, __pyx_int_1) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_chr); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_CHR, __pyx_t_7) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_start); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_START, __pyx_t_7) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_END, __pyx_t_7) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 626, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":627
 *             rng = syn.ranges_dict[org]
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 *             if syn.cigars_dict:             # <<<<<<<<<<<<<<
 *                 cg = syn.cigars_dict[org]
 *                 if add_cigar:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_cigars_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 627, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "msyd/pyxfiles/io.pyx":628
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 *             if syn.cigars_dict:
 *                 cg = syn.cigars_dict[org]             # <<<<<<<<<<<<<<
 *                 if add_cigar:
 *                     rec.samples[org].update({'CG': cg.to_string()})
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_cigars_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_org); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_cg, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "msyd/pyxfiles/io.pyx":629
 *             if syn.cigars_dict:
 *                 cg = syn.cigars_dict[org]
 *                 if add_cigar:             # <<<<<<<<<<<<<<
 *                     rec.samples[org].update({'CG': cg.to_string()})
 *                 if add_identity:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_add_cigar); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 629, __pyx_L1_error)
        if (__pyx_t_5) {

          /* "msyd/pyxfiles/io.pyx":630
 *                 cg = syn.cigars_dict[org]
 *                 if add_cigar:
 *                     rec.samples[org].update({'CG': cg.to_string()})             # <<<<<<<<<<<<<<
 *                 if add_identity:
 *                     rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_org); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_to_string); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_11 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
            __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_CG, __pyx_t_7) < 0) __PYX_ERR(0, 630, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":629
 *             if syn.cigars_dict:
 *                 cg = syn.cigars_dict[org]
 *                 if add_cigar:             # <<<<<<<<<<<<<<
 *                     rec.samples[org].update({'CG': cg.to_string()})
 *                 if add_identity:
 */
        }

        /* "msyd/pyxfiles/io.pyx":631
 *                 if add_cigar:
 *                     rec.samples[org].update({'CG': cg.to_string()})
 *                 if add_identity:             # <<<<<<<<<<<<<<
 *                     rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 *         else:
 */
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_add_identity); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 631, __pyx_L1_error)
        if (__pyx_t_5) {

          /* "msyd/pyxfiles/io.pyx":632
 *                     rec.samples[org].update({'CG': cg.to_string()})
 *                 if add_identity:
 *                     rec.samples[org].update({'AI': int(cg.get_identity()*100)})             # <<<<<<<<<<<<<<
 *         else:
 *             rec.samples[org].update({'SYN': 0})
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_org); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_get_identity); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_11 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
            __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __pyx_t_9 = __Pyx_PyInt_MultiplyObjC(__pyx_t_7, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = __Pyx_PyNumber_Int(__pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_AI, __pyx_t_7) < 0) __PYX_ERR(0, 632, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          __pyx_t_4 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_4 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":631
 *                 if add_cigar:
 *                     rec.samples[org].update({'CG': cg.to_string()})
 *                 if add_identity:             # <<<<<<<<<<<<<<
 *                     rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 *         else:
 */
        }

        /* "msyd/pyxfiles/io.pyx":627
 *             rng = syn.ranges_dict[org]
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 *             if syn.cigars_dict:             # <<<<<<<<<<<<<<
 *                 cg = syn.cigars_dict[org]
 *                 if add_cigar:
 */
      }

      /* "msyd/pyxfiles/io.pyx":624
 *     # write the pansyn annotation
 *     for org in ovcf.header.samples:
 *         if org in syn.get_orgs():             # <<<<<<<<<<<<<<
 *             rng = syn.ranges_dict[org]
 *             rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 */
      goto __pyx_L10;
    }

    /* "msyd/pyxfiles/io.pyx":634
 *                     rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 *         else:
 *             rec.samples[org].update({'SYN': 0})             # <<<<<<<<<<<<<<
 *     # write to file
 *     ovcf.write(rec)
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_org); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 634, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_SYN, __pyx_int_0) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L10:;

    /* "msyd/pyxfiles/io.pyx":623
 * 
 *     # write the pansyn annotation
 *     for org in ovcf.header.samples:             # <<<<<<<<<<<<<<
 *         if org in syn.get_orgs():
 *             rng = syn.ranges_dict[org]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":636
 *             rec.samples[org].update({'SYN': 0})
 *     # write to file
 *     ovcf.write(rec)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_rec};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":590
 * 
 * 
 * cdef add_syn_ann(syn, ovcf, ref=None, no=None, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     rng = syn.ref
 *     rec = ovcf.new_record()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("msyd.io.add_syn_ann", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rng);
  __Pyx_XDECREF(__pyx_v_rec);
  __Pyx_XDECREF(__pyx_v_chrom);
  __Pyx_XDECREF(__pyx_v_org);
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":639
 * 
 * 
 * cdef str merge_vcfs(lf: Union[str, os.PathLike], rf:Union[str, os.PathLike], of:Union[str, os.PathLike], condense_errors=True):             # <<<<<<<<<<<<<<
 *     logger.info(f"Merging {lf} and {rf} into {of}")
 *     # TODO reimplement this with common framework with merge pffs
 */

static PyObject *__pyx_f_4msyd_2io_merge_vcfs(PyObject *__pyx_v_lf, PyObject *__pyx_v_rf, PyObject *__pyx_v_of, struct __pyx_opt_args_4msyd_2io_merge_vcfs *__pyx_optional_args) {
  PyObject *__pyx_v_condense_errors = ((PyObject *)Py_True);
  PyObject *__pyx_v_lvcf = NULL;
  PyObject *__pyx_v_rvcf = NULL;
  PyObject *__pyx_v_ovcf = NULL;
  int __pyx_v_conflictinginfo;
  int __pyx_v_conflictingid;
  PyObject *__pyx_v_headerset = NULL;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_sample = NULL;
  PyObject *__pyx_v_lann = NULL;
  PyObject *__pyx_v_rann = NULL;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_chrom = NULL;
  PyObject *__pyx_v_mapping = NULL;
  PyObject *__pyx_v_record = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge_vcfs", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_condense_errors = __pyx_optional_args->condense_errors;
    }
  }
  __Pyx_INCREF(__pyx_v_condense_errors);

  /* "msyd/pyxfiles/io.pyx":640
 * 
 * cdef str merge_vcfs(lf: Union[str, os.PathLike], rf:Union[str, os.PathLike], of:Union[str, os.PathLike], condense_errors=True):
 *     logger.info(f"Merging {lf} and {rf} into {of}")             # <<<<<<<<<<<<<<
 *     # TODO reimplement this with common framework with merge pffs
 *     # do all this in memory to be faster
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_Merging);
  __pyx_t_4 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_Merging);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Merging);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_lf, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_and);
  __pyx_t_4 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_and);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_and);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_rf, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __Pyx_INCREF(__pyx_kp_u_into);
  __pyx_t_4 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_into);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_into);
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_of, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 6, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":643
 *     # TODO reimplement this with common framework with merge pffs
 *     # do all this in memory to be faster
 *     lvcf = pysam.VariantFile(lf, 'r')             # <<<<<<<<<<<<<<
 *     rvcf = pysam.VariantFile(rf, 'r')
 *     ovcf = pysam.VariantFile(of, 'w')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_lf, __pyx_n_u_r};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_v_lvcf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":644
 *     # do all this in memory to be faster
 *     lvcf = pysam.VariantFile(lf, 'r')
 *     rvcf = pysam.VariantFile(rf, 'r')             # <<<<<<<<<<<<<<
 *     ovcf = pysam.VariantFile(of, 'w')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pysam); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_rf, __pyx_n_u_r};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_rvcf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":645
 *     lvcf = pysam.VariantFile(lf, 'r')
 *     rvcf = pysam.VariantFile(rf, 'r')
 *     ovcf = pysam.VariantFile(of, 'w')             # <<<<<<<<<<<<<<
 * 
 *     condense_errors = condense_errors # this might be necessary to access parameters from within inner fns?
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pysam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_of, __pyx_n_u_w};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_v_ovcf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":647
 *     ovcf = pysam.VariantFile(of, 'w')
 * 
 *     condense_errors = condense_errors # this might be necessary to access parameters from within inner fns?             # <<<<<<<<<<<<<<
 *     conflictinginfo = False
 *     conflictingid = False
 */
  __Pyx_INCREF(__pyx_v_condense_errors);
  __Pyx_DECREF_SET(__pyx_v_condense_errors, __pyx_v_condense_errors);

  /* "msyd/pyxfiles/io.pyx":648
 * 
 *     condense_errors = condense_errors # this might be necessary to access parameters from within inner fns?
 *     conflictinginfo = False             # <<<<<<<<<<<<<<
 *     conflictingid = False
 * 
 */
  __pyx_v_conflictinginfo = 0;

  /* "msyd/pyxfiles/io.pyx":649
 *     condense_errors = condense_errors # this might be necessary to access parameters from within inner fns?
 *     conflictinginfo = False
 *     conflictingid = False             # <<<<<<<<<<<<<<
 * 
 *     # Prepare the header
 */
  __pyx_v_conflictingid = 0;

  /* "msyd/pyxfiles/io.pyx":652
 * 
 *     # Prepare the header
 *     if str(lvcf.header) != str(ovcf.header):             # <<<<<<<<<<<<<<
 *         logger.info(f"Headers not matching in {lf} and {rf}! Combining.")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_6, __pyx_t_3, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "msyd/pyxfiles/io.pyx":653
 *     # Prepare the header
 *     if str(lvcf.header) != str(ovcf.header):
 *         logger.info(f"Headers not matching in {lf} and {rf}! Combining.")             # <<<<<<<<<<<<<<
 * 
 *     # merge the headers, deduplicate along the way
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Headers_not_matching_in);
    __pyx_t_4 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_Headers_not_matching_in);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Headers_not_matching_in);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_lf, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_and);
    __pyx_t_4 += 5;
    __Pyx_GIVEREF(__pyx_kp_u_and);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_and);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_rf, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_Combining);
    __pyx_t_4 += 12;
    __Pyx_GIVEREF(__pyx_kp_u_Combining);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u_Combining);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_6, 5, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":652
 * 
 *     # Prepare the header
 *     if str(lvcf.header) != str(ovcf.header):             # <<<<<<<<<<<<<<
 *         logger.info(f"Headers not matching in {lf} and {rf}! Combining.")
 * 
 */
  }

  /* "msyd/pyxfiles/io.pyx":656
 * 
 *     # merge the headers, deduplicate along the way
 *     headerset = set()             # <<<<<<<<<<<<<<
 *     for line in str(lvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:
 */
  __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_headerset = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":657
 *     # merge the headers, deduplicate along the way
 *     headerset = set()
 *     for line in str(lvcf.header).splitlines()[1:-1]:             # <<<<<<<<<<<<<<
 *         if not line in headerset:
 *             ovcf.header.add_line(line)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_splitlines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 1, -1L, NULL, NULL, &__pyx_slice__27, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 657, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 657, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 657, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 657, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 657, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 657, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":658
 *     headerset = set()
 *     for line in str(lvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             ovcf.header.add_line(line)
 *     for line in str(rvcf.header).splitlines()[1:-1]:
 */
    __pyx_t_8 = (__Pyx_PySet_ContainsTF(__pyx_v_line, __pyx_v_headerset, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "msyd/pyxfiles/io.pyx":659
 *     for line in str(lvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:
 *             ovcf.header.add_line(line)             # <<<<<<<<<<<<<<
 *     for line in str(rvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_line); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_line};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":658
 *     headerset = set()
 *     for line in str(lvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             ovcf.header.add_line(line)
 *     for line in str(rvcf.header).splitlines()[1:-1]:
 */
    }

    /* "msyd/pyxfiles/io.pyx":657
 *     # merge the headers, deduplicate along the way
 *     headerset = set()
 *     for line in str(lvcf.header).splitlines()[1:-1]:             # <<<<<<<<<<<<<<
 *         if not line in headerset:
 *             ovcf.header.add_line(line)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":660
 *         if not line in headerset:
 *             ovcf.header.add_line(line)
 *     for line in str(rvcf.header).splitlines()[1:-1]:             # <<<<<<<<<<<<<<
 *         if not line in headerset:
 *             ovcf.header.add_line(line)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_splitlines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_3, 1, -1L, NULL, NULL, &__pyx_slice__27, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 660, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 660, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 660, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 660, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 660, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 660, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":661
 *             ovcf.header.add_line(line)
 *     for line in str(rvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             ovcf.header.add_line(line)
 * 
 */
    __pyx_t_8 = (__Pyx_PySet_ContainsTF(__pyx_v_line, __pyx_v_headerset, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 661, __pyx_L1_error)
    if (__pyx_t_8) {

      /* "msyd/pyxfiles/io.pyx":662
 *     for line in str(rvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:
 *             ovcf.header.add_line(line)             # <<<<<<<<<<<<<<
 * 
 *     # Panic on two empty vcfs
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_add_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_line};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":661
 *             ovcf.header.add_line(line)
 *     for line in str(rvcf.header).splitlines()[1:-1]:
 *         if not line in headerset:             # <<<<<<<<<<<<<<
 *             ovcf.header.add_line(line)
 * 
 */
    }

    /* "msyd/pyxfiles/io.pyx":660
 *         if not line in headerset:
 *             ovcf.header.add_line(line)
 *     for line in str(rvcf.header).splitlines()[1:-1]:             # <<<<<<<<<<<<<<
 *         if not line in headerset:
 *             ovcf.header.add_line(line)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":665
 * 
 *     # Panic on two empty vcfs
 *     if len(rvcf.header.samples) == 0 or len(lvcf.header.samples) == 0:             # <<<<<<<<<<<<<<
 *         logger.error("Merging VCFs with no samples is not supported, exiting!")
 *         #return
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = (__pyx_t_4 == 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_8 = __pyx_t_10;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = (__pyx_t_4 == 0);
  __pyx_t_8 = __pyx_t_10;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_8) {

    /* "msyd/pyxfiles/io.pyx":666
 *     # Panic on two empty vcfs
 *     if len(rvcf.header.samples) == 0 or len(lvcf.header.samples) == 0:
 *         logger.error("Merging VCFs with no samples is not supported, exiting!")             # <<<<<<<<<<<<<<
 *         #return
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_u_Merging_VCFs_with_no_samples_is};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":665
 * 
 *     # Panic on two empty vcfs
 *     if len(rvcf.header.samples) == 0 or len(lvcf.header.samples) == 0:             # <<<<<<<<<<<<<<
 *         logger.error("Merging VCFs with no samples is not supported, exiting!")
 *         #return
 */
  }

  /* "msyd/pyxfiles/io.pyx":669
 *         #return
 * 
 *     logger.info(f"Found samples: {list(lvcf.header.samples)}, {list(rvcf.header.samples)}")             # <<<<<<<<<<<<<<
 *     for sample in rvcf.header.samples:
 *         if sample in ovcf.header.samples:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  __Pyx_INCREF(__pyx_kp_u_Found_samples);
  __pyx_t_4 += 15;
  __Pyx_GIVEREF(__pyx_kp_u_Found_samples);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Found_samples);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_samples); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PySequence_ListKeepNew(__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_11);
  __pyx_t_11 = 0;
  __Pyx_INCREF(__pyx_kp_u__36);
  __pyx_t_4 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__36);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__36);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_samples); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PySequence_ListKeepNew(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
  __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 669, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":670
 * 
 *     logger.info(f"Found samples: {list(lvcf.header.samples)}, {list(rvcf.header.samples)}")
 *     for sample in rvcf.header.samples:             # <<<<<<<<<<<<<<
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 670, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 670, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 670, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 670, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 670, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 670, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":671
 *     logger.info(f"Found samples: {list(lvcf.header.samples)}, {list(rvcf.header.samples)}")
 *     for sample in rvcf.header.samples:
 *         if sample in ovcf.header.samples:             # <<<<<<<<<<<<<<
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")
 *             sample += '_'
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_samples); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_sample, __pyx_t_6, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_8) {

      /* "msyd/pyxfiles/io.pyx":672
 *     for sample in rvcf.header.samples:
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")             # <<<<<<<<<<<<<<
 *             sample += '_'
 *             sample += rf
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Duplicate_sample);
      __pyx_t_12 += 18;
      __Pyx_GIVEREF(__pyx_kp_u_Duplicate_sample);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Duplicate_sample);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_sample, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_5;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_encountered_in);
      __pyx_t_12 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_encountered_in);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_encountered_in);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_rf, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_5;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_Appending_filename_to_sample_na);
      __pyx_t_12 += 36;
      __Pyx_GIVEREF(__pyx_kp_u_Appending_filename_to_sample_na);
      PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_Appending_filename_to_sample_na);
      __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_11};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 672, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "msyd/pyxfiles/io.pyx":673
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")
 *             sample += '_'             # <<<<<<<<<<<<<<
 *             sample += rf
 *         ovcf.header.add_sample(sample)
 */
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_sample, __pyx_n_u__37); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_sample, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "msyd/pyxfiles/io.pyx":674
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")
 *             sample += '_'
 *             sample += rf             # <<<<<<<<<<<<<<
 *         ovcf.header.add_sample(sample)
 *     for sample in lvcf.header.samples:
 */
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_sample, __pyx_v_rf); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_sample, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "msyd/pyxfiles/io.pyx":671
 *     logger.info(f"Found samples: {list(lvcf.header.samples)}, {list(rvcf.header.samples)}")
 *     for sample in rvcf.header.samples:
 *         if sample in ovcf.header.samples:             # <<<<<<<<<<<<<<
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")
 *             sample += '_'
 */
    }

    /* "msyd/pyxfiles/io.pyx":675
 *             sample += '_'
 *             sample += rf
 *         ovcf.header.add_sample(sample)             # <<<<<<<<<<<<<<
 *     for sample in lvcf.header.samples:
 *         if sample in ovcf.header.samples:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_sample); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_sample};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 675, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":670
 * 
 *     logger.info(f"Found samples: {list(lvcf.header.samples)}, {list(rvcf.header.samples)}")
 *     for sample in rvcf.header.samples:             # <<<<<<<<<<<<<<
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {rf}. Appending filename to sample name.")
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":676
 *             sample += rf
 *         ovcf.header.add_sample(sample)
 *     for sample in lvcf.header.samples:             # <<<<<<<<<<<<<<
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lvcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_samples); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_3 = __pyx_t_6; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 676, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
        #else
        __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
          #endif
          if (__pyx_t_4 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 676, __pyx_L1_error)
        #else
        __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 676, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":677
 *         ovcf.header.add_sample(sample)
 *     for sample in lvcf.header.samples:
 *         if sample in ovcf.header.samples:             # <<<<<<<<<<<<<<
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")
 *             sample += '_'
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_samples); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = (__Pyx_PySequence_ContainsTF(__pyx_v_sample, __pyx_t_11, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_8) {

      /* "msyd/pyxfiles/io.pyx":678
 *     for sample in lvcf.header.samples:
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")             # <<<<<<<<<<<<<<
 *             sample += '_'
 *             sample += lf
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_12 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_Duplicate_sample);
      __pyx_t_12 += 18;
      __Pyx_GIVEREF(__pyx_kp_u_Duplicate_sample);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Duplicate_sample);
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_sample, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_encountered_in);
      __pyx_t_12 += 17;
      __Pyx_GIVEREF(__pyx_kp_u_encountered_in);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_encountered_in);
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_lf, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_Appending_filename_to_sample_na);
      __pyx_t_12 += 36;
      __Pyx_GIVEREF(__pyx_kp_u_Appending_filename_to_sample_na);
      PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u_Appending_filename_to_sample_na);
      __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_6, 5, __pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_1};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "msyd/pyxfiles/io.pyx":679
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")
 *             sample += '_'             # <<<<<<<<<<<<<<
 *             sample += lf
 *         ovcf.header.add_sample(sample)
 */
      __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_v_sample, __pyx_n_u__37); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 679, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF_SET(__pyx_v_sample, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "msyd/pyxfiles/io.pyx":680
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")
 *             sample += '_'
 *             sample += lf             # <<<<<<<<<<<<<<
 *         ovcf.header.add_sample(sample)
 *     #print(ovcf.header)
 */
      __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_v_sample, __pyx_v_lf); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 680, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF_SET(__pyx_v_sample, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "msyd/pyxfiles/io.pyx":677
 *         ovcf.header.add_sample(sample)
 *     for sample in lvcf.header.samples:
 *         if sample in ovcf.header.samples:             # <<<<<<<<<<<<<<
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")
 *             sample += '_'
 */
    }

    /* "msyd/pyxfiles/io.pyx":681
 *             sample += '_'
 *             sample += lf
 *         ovcf.header.add_sample(sample)             # <<<<<<<<<<<<<<
 *     #print(ovcf.header)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_sample};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "msyd/pyxfiles/io.pyx":676
 *             sample += rf
 *         ovcf.header.add_sample(sample)
 *     for sample in lvcf.header.samples:             # <<<<<<<<<<<<<<
 *         if sample in ovcf.header.samples:
 *             logger.warning(f"Duplicate sample '{sample}' encountered in {lf}. Appending filename to sample name.")
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":687
 *     # iterate through the VCFs, merging individual records
 *     # keeps only records that can be merged
 *     lann = None             # <<<<<<<<<<<<<<
 *     rann = None
 *     try:
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_lann = Py_None;

  /* "msyd/pyxfiles/io.pyx":688
 *     # keeps only records that can be merged
 *     lann = None
 *     rann = None             # <<<<<<<<<<<<<<
 *     try:
 *         lann = next(lvcf)
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_rann = Py_None;

  /* "msyd/pyxfiles/io.pyx":689
 *     lann = None
 *     rann = None
 *     try:             # <<<<<<<<<<<<<<
 *         lann = next(lvcf)
 *         rann = next(rvcf)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
    __Pyx_XGOTREF(__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_14);
    __Pyx_XGOTREF(__pyx_t_15);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":690
 *     rann = None
 *     try:
 *         lann = next(lvcf)             # <<<<<<<<<<<<<<
 *         rann = next(rvcf)
 *     except StopIteration:
 */
      __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_lvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 690, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_lann, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":691
 *     try:
 *         lann = next(lvcf)
 *         rann = next(rvcf)             # <<<<<<<<<<<<<<
 *     except StopIteration:
 *         logger.error(f"Empty VCF encountered. Outputting empty VCF!")
 */
      __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_rvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L23_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_rann, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":689
 *     lann = None
 *     rann = None
 *     try:             # <<<<<<<<<<<<<<
 *         lann = next(lvcf)
 *         rann = next(rvcf)
 */
    }
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    goto __pyx_L28_try_end;
    __pyx_L23_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":692
 *         lann = next(lvcf)
 *         rann = next(rvcf)
 *     except StopIteration:             # <<<<<<<<<<<<<<
 *         logger.error(f"Empty VCF encountered. Outputting empty VCF!")
 *         return of
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
    if (__pyx_t_7) {
      __Pyx_AddTraceback("msyd.io.merge_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_11, &__pyx_t_1) < 0) __PYX_ERR(0, 692, __pyx_L25_except_error)
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_1);

      /* "msyd/pyxfiles/io.pyx":693
 *         rann = next(rvcf)
 *     except StopIteration:
 *         logger.error(f"Empty VCF encountered. Outputting empty VCF!")             # <<<<<<<<<<<<<<
 *         return of
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_logger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 693, __pyx_L25_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_error); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 693, __pyx_L25_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u_Empty_VCF_encountered_Outputting};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L25_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":694
 *     except StopIteration:
 *         logger.error(f"Empty VCF encountered. Outputting empty VCF!")
 *         return of             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
      __Pyx_XDECREF(__pyx_r);
      if (!(likely(PyUnicode_CheckExact(__pyx_v_of))||((__pyx_v_of) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_of))) __PYX_ERR(0, 694, __pyx_L25_except_error)
      __Pyx_INCREF(__pyx_v_of);
      __pyx_r = ((PyObject*)__pyx_v_of);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L26_except_return;
    }
    goto __pyx_L25_except_error;

    /* "msyd/pyxfiles/io.pyx":689
 *     lann = None
 *     rann = None
 *     try:             # <<<<<<<<<<<<<<
 *         lann = next(lvcf)
 *         rann = next(rvcf)
 */
    __pyx_L25_except_error:;
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
    goto __pyx_L1_error;
    __pyx_L26_except_return:;
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
    goto __pyx_L0;
    __pyx_L28_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":696
 *         return of
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         while True:
 *             # skip until we are at the same position
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
    __Pyx_XGOTREF(__pyx_t_15);
    __Pyx_XGOTREF(__pyx_t_14);
    __Pyx_XGOTREF(__pyx_t_13);
    /*try:*/ {

      /* "msyd/pyxfiles/io.pyx":697
 * 
 *     try:
 *         while True:             # <<<<<<<<<<<<<<
 *             # skip until we are at the same position
 *             if lann.chrom != rann.chrom:
 */
      while (1) {

        /* "msyd/pyxfiles/io.pyx":699
 *         while True:
 *             # skip until we are at the same position
 *             if lann.chrom != rann.chrom:             # <<<<<<<<<<<<<<
 *                  # check if chr matches, otherwise skip till end
 *                 if lann.chrom < rann.chrom:
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 699, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_11, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 699, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":701
 *             if lann.chrom != rann.chrom:
 *                  # check if chr matches, otherwise skip till end
 *                 if lann.chrom < rann.chrom:             # <<<<<<<<<<<<<<
 *                     if lann.chrom not in set(ovcf.header.contigs):
 *                         #logger.info(f"merge_vcfs Adding {lann.chrom} to header")
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 701, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_11, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L31_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 701, __pyx_L31_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (__pyx_t_8) {

            /* "msyd/pyxfiles/io.pyx":702
 *                  # check if chr matches, otherwise skip till end
 *                 if lann.chrom < rann.chrom:
 *                     if lann.chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *                         #logger.info(f"merge_vcfs Adding {lann.chrom} to header")
 *                         ovcf.header.add_line("##contig=<ID={}>".format(lann.chrom))
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 702, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_contigs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 702, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 702, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = (__Pyx_PySet_ContainsTF(__pyx_t_1, __pyx_t_11, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 702, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_8) {

              /* "msyd/pyxfiles/io.pyx":704
 *                     if lann.chrom not in set(ovcf.header.contigs):
 *                         #logger.info(f"merge_vcfs Adding {lann.chrom} to header")
 *                         ovcf.header.add_line("##contig=<ID={}>".format(lann.chrom))             # <<<<<<<<<<<<<<
 *                     # skip till end
 *                     while lann.chrom < rann.chrom:
 */
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add_line); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 704, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 704, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_6 = NULL;
              __pyx_t_7 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_2))) {
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
                if (likely(__pyx_t_6)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                  __Pyx_INCREF(__pyx_t_6);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_2, function);
                  __pyx_t_7 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_16};
                __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              }
              __pyx_t_2 = NULL;
              __pyx_t_7 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_3))) {
                __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                if (likely(__pyx_t_2)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                  __Pyx_INCREF(__pyx_t_2);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_3, function);
                  __pyx_t_7 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_1};
                __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 704, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              }
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "msyd/pyxfiles/io.pyx":702
 *                  # check if chr matches, otherwise skip till end
 *                 if lann.chrom < rann.chrom:
 *                     if lann.chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *                         #logger.info(f"merge_vcfs Adding {lann.chrom} to header")
 *                         ovcf.header.add_line("##contig=<ID={}>".format(lann.chrom))
 */
            }

            /* "msyd/pyxfiles/io.pyx":706
 *                         ovcf.header.add_line("##contig=<ID={}>".format(lann.chrom))
 *                     # skip till end
 *                     while lann.chrom < rann.chrom:             # <<<<<<<<<<<<<<
 *                         copy_record(lann, ovcf)
 *                         lann = next(lvcf)
 */
            while (1) {
              __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 706, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_1 = PyObject_RichCompare(__pyx_t_11, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 706, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (!__pyx_t_8) break;

              /* "msyd/pyxfiles/io.pyx":707
 *                     # skip till end
 *                     while lann.chrom < rann.chrom:
 *                         copy_record(lann, ovcf)             # <<<<<<<<<<<<<<
 *                         lann = next(lvcf)
 *                     continue
 */
              __pyx_t_1 = __pyx_f_4msyd_2io_copy_record(__pyx_v_lann, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "msyd/pyxfiles/io.pyx":708
 *                     while lann.chrom < rann.chrom:
 *                         copy_record(lann, ovcf)
 *                         lann = next(lvcf)             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
 */
              __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_lvcf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF_SET(__pyx_v_lann, __pyx_t_1);
              __pyx_t_1 = 0;
            }

            /* "msyd/pyxfiles/io.pyx":709
 *                         copy_record(lann, ovcf)
 *                         lann = next(lvcf)
 *                     continue             # <<<<<<<<<<<<<<
 *                 else:
 *                     if rann.chrom not in set(ovcf.header.contigs):
 */
            goto __pyx_L37_continue;

            /* "msyd/pyxfiles/io.pyx":701
 *             if lann.chrom != rann.chrom:
 *                  # check if chr matches, otherwise skip till end
 *                 if lann.chrom < rann.chrom:             # <<<<<<<<<<<<<<
 *                     if lann.chrom not in set(ovcf.header.contigs):
 *                         #logger.info(f"merge_vcfs Adding {lann.chrom} to header")
 */
          }

          /* "msyd/pyxfiles/io.pyx":711
 *                     continue
 *                 else:
 *                     if rann.chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *                         logger.info(f"merge_vcfs Adding {rann.chrom} to header")
 *                         ovcf.header.add_line("##contig=<ID={}>".format(rann.chrom))
 */
          /*else*/ {
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_contigs); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 711, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PySet_New(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_8 = (__Pyx_PySet_ContainsTF(__pyx_t_1, __pyx_t_3, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 711, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_8) {

              /* "msyd/pyxfiles/io.pyx":712
 *                 else:
 *                     if rann.chrom not in set(ovcf.header.contigs):
 *                         logger.info(f"merge_vcfs Adding {rann.chrom} to header")             # <<<<<<<<<<<<<<
 *                         ovcf.header.add_line("##contig=<ID={}>".format(rann.chrom))
 *                     # skip till end
 */
              __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 712, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_4 = 0;
              __pyx_t_5 = 127;
              __Pyx_INCREF(__pyx_kp_u_merge_vcfs_Adding);
              __pyx_t_4 += 18;
              __Pyx_GIVEREF(__pyx_kp_u_merge_vcfs_Adding);
              PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_merge_vcfs_Adding);
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 712, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 712, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_5;
              __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
              __Pyx_GIVEREF(__pyx_t_16);
              PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_16);
              __pyx_t_16 = 0;
              __Pyx_INCREF(__pyx_kp_u_to_header);
              __pyx_t_4 += 10;
              __Pyx_GIVEREF(__pyx_kp_u_to_header);
              PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_to_header);
              __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 712, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = NULL;
              __pyx_t_7 = 0;
              #if CYTHON_UNPACK_METHODS
              if (unlikely(PyMethod_Check(__pyx_t_11))) {
                __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
                if (likely(__pyx_t_1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                  __Pyx_INCREF(__pyx_t_1);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_11, function);
                  __pyx_t_7 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_16};
                __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 712, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "msyd/pyxfiles/io.pyx":713
 *                     if rann.chrom not in set(ovcf.header.contigs):
 *                         logger.info(f"merge_vcfs Adding {rann.chrom} to header")
 *                         ovcf.header.add_line("##contig=<ID={}>".format(rann.chrom))             # <<<<<<<<<<<<<<
 *                     # skip till end
 *                     while rann.chrom < lann.chrom:
 */
              __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 713, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_add_line); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 713, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 713, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_6 = NULL;
              __pyx_t_7 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_6)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_6);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                  __pyx_t_7 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
                __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 713, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
              __pyx_t_1 = NULL;
              __pyx_t_7 = 0;
              #if CYTHON_UNPACK_METHODS
              if (likely(PyMethod_Check(__pyx_t_16))) {
                __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_16);
                if (likely(__pyx_t_1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                  __Pyx_INCREF(__pyx_t_1);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_16, function);
                  __pyx_t_7 = 1;
                }
              }
              #endif
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_11};
                __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              }
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "msyd/pyxfiles/io.pyx":711
 *                     continue
 *                 else:
 *                     if rann.chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *                         logger.info(f"merge_vcfs Adding {rann.chrom} to header")
 *                         ovcf.header.add_line("##contig=<ID={}>".format(rann.chrom))
 */
            }

            /* "msyd/pyxfiles/io.pyx":715
 *                         ovcf.header.add_line("##contig=<ID={}>".format(rann.chrom))
 *                     # skip till end
 *                     while rann.chrom < lann.chrom:             # <<<<<<<<<<<<<<
 *                         copy_record(rann, ovcf)
 *                         rann = next(rvcf)
 */
            while (1) {
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 715, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_11 = PyObject_RichCompare(__pyx_t_3, __pyx_t_16, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 715, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (!__pyx_t_8) break;

              /* "msyd/pyxfiles/io.pyx":716
 *                     # skip till end
 *                     while rann.chrom < lann.chrom:
 *                         copy_record(rann, ovcf)             # <<<<<<<<<<<<<<
 *                         rann = next(rvcf)
 *                     continue
 */
              __pyx_t_11 = __pyx_f_4msyd_2io_copy_record(__pyx_v_rann, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "msyd/pyxfiles/io.pyx":717
 *                     while rann.chrom < lann.chrom:
 *                         copy_record(rann, ovcf)
 *                         rann = next(rvcf)             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
              __pyx_t_11 = __Pyx_PyIter_Next(__pyx_v_rvcf); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 717, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF_SET(__pyx_v_rann, __pyx_t_11);
              __pyx_t_11 = 0;
            }

            /* "msyd/pyxfiles/io.pyx":718
 *                         copy_record(rann, ovcf)
 *                         rann = next(rvcf)
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             elif lann.pos < rann.pos:
 */
            goto __pyx_L37_continue;
          }

          /* "msyd/pyxfiles/io.pyx":699
 *         while True:
 *             # skip until we are at the same position
 *             if lann.chrom != rann.chrom:             # <<<<<<<<<<<<<<
 *                  # check if chr matches, otherwise skip till end
 *                 if lann.chrom < rann.chrom:
 */
        }

        /* "msyd/pyxfiles/io.pyx":720
 *                     continue
 * 
 *             elif lann.pos < rann.pos:             # <<<<<<<<<<<<<<
 *                 copy_record(lann, ovcf)
 *                 lann = next(lvcf)
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_pos); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 720, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_pos); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 720, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_11, __pyx_t_16, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 720, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 720, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":721
 * 
 *             elif lann.pos < rann.pos:
 *                 copy_record(lann, ovcf)             # <<<<<<<<<<<<<<
 *                 lann = next(lvcf)
 *                 continue
 */
          __pyx_t_3 = __pyx_f_4msyd_2io_copy_record(__pyx_v_lann, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 721, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":722
 *             elif lann.pos < rann.pos:
 *                 copy_record(lann, ovcf)
 *                 lann = next(lvcf)             # <<<<<<<<<<<<<<
 *                 continue
 *             elif rann.pos < lann.pos or rann.chrom < lann.chrom:
 */
          __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_lvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF_SET(__pyx_v_lann, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":723
 *                 copy_record(lann, ovcf)
 *                 lann = next(lvcf)
 *                 continue             # <<<<<<<<<<<<<<
 *             elif rann.pos < lann.pos or rann.chrom < lann.chrom:
 *                 copy_record(rann, ovcf)
 */
          goto __pyx_L37_continue;

          /* "msyd/pyxfiles/io.pyx":720
 *                     continue
 * 
 *             elif lann.pos < rann.pos:             # <<<<<<<<<<<<<<
 *                 copy_record(lann, ovcf)
 *                 lann = next(lvcf)
 */
        }

        /* "msyd/pyxfiles/io.pyx":724
 *                 lann = next(lvcf)
 *                 continue
 *             elif rann.pos < lann.pos or rann.chrom < lann.chrom:             # <<<<<<<<<<<<<<
 *                 copy_record(rann, ovcf)
 *                 rann = next(rvcf)
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_pos); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_11 = PyObject_RichCompare(__pyx_t_3, __pyx_t_16, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (!__pyx_t_10) {
        } else {
          __pyx_t_8 = __pyx_t_10;
          goto __pyx_L47_bool_binop_done;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_11, __pyx_t_16, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 724, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __pyx_t_10;
        __pyx_L47_bool_binop_done:;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":725
 *                 continue
 *             elif rann.pos < lann.pos or rann.chrom < lann.chrom:
 *                 copy_record(rann, ovcf)             # <<<<<<<<<<<<<<
 *                 rann = next(rvcf)
 *                 continue
 */
          __pyx_t_3 = __pyx_f_4msyd_2io_copy_record(__pyx_v_rann, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":726
 *             elif rann.pos < lann.pos or rann.chrom < lann.chrom:
 *                 copy_record(rann, ovcf)
 *                 rann = next(rvcf)             # <<<<<<<<<<<<<<
 *                 continue
 *             elif lann.alleles[0] != rann.alleles[0]:
 */
          __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_rvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 726, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF_SET(__pyx_v_rann, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":727
 *                 copy_record(rann, ovcf)
 *                 rann = next(rvcf)
 *                 continue             # <<<<<<<<<<<<<<
 *             elif lann.alleles[0] != rann.alleles[0]:
 *                 # there are multiple annotations on this position, and they aren't sorted
 */
          goto __pyx_L37_continue;

          /* "msyd/pyxfiles/io.pyx":724
 *                 lann = next(lvcf)
 *                 continue
 *             elif rann.pos < lann.pos or rann.chrom < lann.chrom:             # <<<<<<<<<<<<<<
 *                 copy_record(rann, ovcf)
 *                 rann = next(rvcf)
 */
        }

        /* "msyd/pyxfiles/io.pyx":728
 *                 rann = next(rvcf)
 *                 continue
 *             elif lann.alleles[0] != rann.alleles[0]:             # <<<<<<<<<<<<<<
 *                 # there are multiple annotations on this position, and they aren't sorted
 *                 # (if they are sorted the code above already works)
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 728, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 728, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_16, __pyx_t_11, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 728, __pyx_L31_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_8) {

          /* "msyd/pyxfiles/io.pyx":731
 *                 # there are multiple annotations on this position, and they aren't sorted
 *                 # (if they are sorted the code above already works)
 *                 pos = lann.pos             # <<<<<<<<<<<<<<
 *                 chrom = lann.chrom
 * 
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_XDECREF_SET(__pyx_v_pos, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":732
 *                 # (if they are sorted the code above already works)
 *                 pos = lann.pos
 *                 chrom = lann.chrom             # <<<<<<<<<<<<<<
 * 
 *                 # extract all records at this position in rann, store in dictionary
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 732, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_XDECREF_SET(__pyx_v_chrom, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":735
 * 
 *                 # extract all records at this position in rann, store in dictionary
 *                 mapping = {rann.alleles[0]: rann} if rann.alleles[0] != 'N' else dict()             # <<<<<<<<<<<<<<
 *                 rann = next(rvcf)
 *                 while rann.pos == pos and rann.chrom == chrom:
 */
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 735, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 735, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_N, Py_NE)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 735, __pyx_L31_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (__pyx_t_8) {
            __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 735, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 735, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_11, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (PyDict_SetItem(__pyx_t_16, __pyx_t_1, __pyx_v_rann) < 0) __PYX_ERR(0, 735, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_3 = __pyx_t_16;
            __pyx_t_16 = 0;
          } else {
            __pyx_t_16 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 735, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_3 = __pyx_t_16;
            __pyx_t_16 = 0;
          }
          __Pyx_XDECREF_SET(__pyx_v_mapping, ((PyObject*)__pyx_t_3));
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":736
 *                 # extract all records at this position in rann, store in dictionary
 *                 mapping = {rann.alleles[0]: rann} if rann.alleles[0] != 'N' else dict()
 *                 rann = next(rvcf)             # <<<<<<<<<<<<<<
 *                 while rann.pos == pos and rann.chrom == chrom:
 *                     if rann.alleles[0] == 'N': # to handle NOTAL and HDR records
 */
          __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_rvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 736, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF_SET(__pyx_v_rann, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":737
 *                 mapping = {rann.alleles[0]: rann} if rann.alleles[0] != 'N' else dict()
 *                 rann = next(rvcf)
 *                 while rann.pos == pos and rann.chrom == chrom:             # <<<<<<<<<<<<<<
 *                     if rann.alleles[0] == 'N': # to handle NOTAL and HDR records
 *                         pass
 */
          while (1) {
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = PyObject_RichCompare(__pyx_t_3, __pyx_v_pos, Py_EQ); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 737, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 737, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_10) {
            } else {
              __pyx_t_8 = __pyx_t_10;
              goto __pyx_L51_bool_binop_done;
            }
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 737, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_3 = PyObject_RichCompare(__pyx_t_16, __pyx_v_chrom, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 737, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = __pyx_t_10;
            __pyx_L51_bool_binop_done:;
            if (!__pyx_t_8) break;

            /* "msyd/pyxfiles/io.pyx":738
 *                 rann = next(rvcf)
 *                 while rann.pos == pos and rann.chrom == chrom:
 *                     if rann.alleles[0] == 'N': # to handle NOTAL and HDR records             # <<<<<<<<<<<<<<
 *                         pass
 *                     #elif rann.alleles[0] in mapping:
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 738, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 738, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_N, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 738, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_8) {
              goto __pyx_L53;
            }

            /* "msyd/pyxfiles/io.pyx":744
 *                     #    #merge_vcf_records(rann, mapping[rann.alleles[0]], ovcf)
 *                     else:
 *                         mapping[rann.alleles[0]] = rann             # <<<<<<<<<<<<<<
 *                     rann = next(rvcf)
 *                 # rann now contains the first record after this position
 */
            /*else*/ {
              if (unlikely(__pyx_v_mapping == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                __PYX_ERR(0, 744, __pyx_L31_error)
              }
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_rann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 744, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_16, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 744, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely((PyDict_SetItem(__pyx_v_mapping, __pyx_t_3, __pyx_v_rann) < 0))) __PYX_ERR(0, 744, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_L53:;

            /* "msyd/pyxfiles/io.pyx":745
 *                     else:
 *                         mapping[rann.alleles[0]] = rann
 *                     rann = next(rvcf)             # <<<<<<<<<<<<<<
 *                 # rann now contains the first record after this position
 * 
 */
            __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_rvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF_SET(__pyx_v_rann, __pyx_t_3);
            __pyx_t_3 = 0;
          }

          /* "msyd/pyxfiles/io.pyx":749
 * 
 *                 # match with records in lvcf one by one
 *                 while lann.pos == pos and lann.chrom == chrom:             # <<<<<<<<<<<<<<
 *                     if lann.alleles[0] != 'N' and lann.alleles[0] in mapping:
 *                         merge_vcf_records(lann, mapping[lann.alleles[0]], ovcf)
 */
          while (1) {
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_pos); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = PyObject_RichCompare(__pyx_t_3, __pyx_v_pos, Py_EQ); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 749, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 749, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_10) {
            } else {
              __pyx_t_8 = __pyx_t_10;
              goto __pyx_L56_bool_binop_done;
            }
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_chrom); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 749, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_3 = PyObject_RichCompare(__pyx_t_16, __pyx_v_chrom, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 749, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 749, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = __pyx_t_10;
            __pyx_L56_bool_binop_done:;
            if (!__pyx_t_8) break;

            /* "msyd/pyxfiles/io.pyx":750
 *                 # match with records in lvcf one by one
 *                 while lann.pos == pos and lann.chrom == chrom:
 *                     if lann.alleles[0] != 'N' and lann.alleles[0] in mapping:             # <<<<<<<<<<<<<<
 *                         merge_vcf_records(lann, mapping[lann.alleles[0]], ovcf)
 *                         del mapping[lann.alleles[0]]
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 750, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_N, Py_NE)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 750, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (__pyx_t_10) {
            } else {
              __pyx_t_8 = __pyx_t_10;
              goto __pyx_L59_bool_binop_done;
            }
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 750, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_16, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(__pyx_v_mapping == Py_None)) {
              PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
              __PYX_ERR(0, 750, __pyx_L31_error)
            }
            __pyx_t_10 = (__Pyx_PyDict_ContainsTF(__pyx_t_3, __pyx_v_mapping, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 750, __pyx_L31_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_8 = __pyx_t_10;
            __pyx_L59_bool_binop_done:;
            if (__pyx_t_8) {

              /* "msyd/pyxfiles/io.pyx":751
 *                 while lann.pos == pos and lann.chrom == chrom:
 *                     if lann.alleles[0] != 'N' and lann.alleles[0] in mapping:
 *                         merge_vcf_records(lann, mapping[lann.alleles[0]], ovcf)             # <<<<<<<<<<<<<<
 *                         del mapping[lann.alleles[0]]
 *                     else:
 */
              if (unlikely(__pyx_v_mapping == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                __PYX_ERR(0, 751, __pyx_L31_error)
              }
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 751, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 751, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_mapping, __pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 751, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_16 = __pyx_f_4msyd_2io_merge_vcf_records(__pyx_v_lann, __pyx_t_3, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 751, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

              /* "msyd/pyxfiles/io.pyx":752
 *                     if lann.alleles[0] != 'N' and lann.alleles[0] in mapping:
 *                         merge_vcf_records(lann, mapping[lann.alleles[0]], ovcf)
 *                         del mapping[lann.alleles[0]]             # <<<<<<<<<<<<<<
 *                     else:
 *                         copy_record(lann, ovcf)
 */
              if (unlikely(__pyx_v_mapping == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
                __PYX_ERR(0, 752, __pyx_L31_error)
              }
              __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_lann, __pyx_n_s_alleles); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 752, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_16, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely((PyDict_DelItem(__pyx_v_mapping, __pyx_t_3) < 0))) __PYX_ERR(0, 752, __pyx_L31_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "msyd/pyxfiles/io.pyx":750
 *                 # match with records in lvcf one by one
 *                 while lann.pos == pos and lann.chrom == chrom:
 *                     if lann.alleles[0] != 'N' and lann.alleles[0] in mapping:             # <<<<<<<<<<<<<<
 *                         merge_vcf_records(lann, mapping[lann.alleles[0]], ovcf)
 *                         del mapping[lann.alleles[0]]
 */
              goto __pyx_L58;
            }

            /* "msyd/pyxfiles/io.pyx":754
 *                         del mapping[lann.alleles[0]]
 *                     else:
 *                         copy_record(lann, ovcf)             # <<<<<<<<<<<<<<
 *                     lann = next(lvcf)
 *                 # lann now contains the first record after this position
 */
            /*else*/ {
              __pyx_t_3 = __pyx_f_4msyd_2io_copy_record(__pyx_v_lann, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 754, __pyx_L31_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_L58:;

            /* "msyd/pyxfiles/io.pyx":755
 *                     else:
 *                         copy_record(lann, ovcf)
 *                     lann = next(lvcf)             # <<<<<<<<<<<<<<
 *                 # lann now contains the first record after this position
 * 
 */
            __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_lvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF_SET(__pyx_v_lann, __pyx_t_3);
            __pyx_t_3 = 0;
          }

          /* "msyd/pyxfiles/io.pyx":759
 * 
 *                 # add records in rvcf that do not match any in lvcf
 *                 for record in mapping.values():             # <<<<<<<<<<<<<<
 *                     copy_record(record, ovcf)
 * 
 */
          __pyx_t_4 = 0;
          if (unlikely(__pyx_v_mapping == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
            __PYX_ERR(0, 759, __pyx_L31_error)
          }
          __pyx_t_16 = __Pyx_dict_iterator(__pyx_v_mapping, 1, __pyx_n_s_values, (&__pyx_t_12), (&__pyx_t_7)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 759, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_XDECREF(__pyx_t_3);
          __pyx_t_3 = __pyx_t_16;
          __pyx_t_16 = 0;
          while (1) {
            __pyx_t_17 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_12, &__pyx_t_4, NULL, &__pyx_t_16, NULL, __pyx_t_7);
            if (unlikely(__pyx_t_17 == 0)) break;
            if (unlikely(__pyx_t_17 == -1)) __PYX_ERR(0, 759, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_XDECREF_SET(__pyx_v_record, __pyx_t_16);
            __pyx_t_16 = 0;

            /* "msyd/pyxfiles/io.pyx":760
 *                 # add records in rvcf that do not match any in lvcf
 *                 for record in mapping.values():
 *                     copy_record(record, ovcf)             # <<<<<<<<<<<<<<
 * 
 *                 # all variants up to this position have been added, continue as normal
 */
            __pyx_t_16 = __pyx_f_4msyd_2io_copy_record(__pyx_v_record, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 760, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":763
 * 
 *                 # all variants up to this position have been added, continue as normal
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             merge_vcf_records(lann, rann, ovcf)
 */
          goto __pyx_L37_continue;

          /* "msyd/pyxfiles/io.pyx":728
 *                 rann = next(rvcf)
 *                 continue
 *             elif lann.alleles[0] != rann.alleles[0]:             # <<<<<<<<<<<<<<
 *                 # there are multiple annotations on this position, and they aren't sorted
 *                 # (if they are sorted the code above already works)
 */
        }

        /* "msyd/pyxfiles/io.pyx":765
 *                 continue
 * 
 *             merge_vcf_records(lann, rann, ovcf)             # <<<<<<<<<<<<<<
 *             # discard these two records, look at the next
 *             lann = next(lvcf)
 */
        __pyx_t_3 = __pyx_f_4msyd_2io_merge_vcf_records(__pyx_v_lann, __pyx_v_rann, __pyx_v_ovcf, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 765, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "msyd/pyxfiles/io.pyx":767
 *             merge_vcf_records(lann, rann, ovcf)
 *             # discard these two records, look at the next
 *             lann = next(lvcf)             # <<<<<<<<<<<<<<
 *             rann = next(rvcf)
 *             continue
 */
        __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_lvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_lann, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "msyd/pyxfiles/io.pyx":768
 *             # discard these two records, look at the next
 *             lann = next(lvcf)
 *             rann = next(rvcf)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
        __pyx_t_3 = __Pyx_PyIter_Next(__pyx_v_rvcf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF_SET(__pyx_v_rann, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "msyd/pyxfiles/io.pyx":769
 *             lann = next(lvcf)
 *             rann = next(rvcf)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *     except StopIteration:
 */
        goto __pyx_L37_continue;
        __pyx_L37_continue:;
      }

      /* "msyd/pyxfiles/io.pyx":696
 *         return of
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         while True:
 *             # skip until we are at the same position
 */
    }
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    goto __pyx_L36_try_end;
    __pyx_L31_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "msyd/pyxfiles/io.pyx":771
 *             continue
 * 
 *     except StopIteration:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
    if (__pyx_t_7) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L32_exception_handled;
    }
    goto __pyx_L33_except_error;

    /* "msyd/pyxfiles/io.pyx":696
 *         return of
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         while True:
 *             # skip until we are at the same position
 */
    __pyx_L33_except_error:;
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
    goto __pyx_L1_error;
    __pyx_L32_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_XGIVEREF(__pyx_t_13);
    __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_14, __pyx_t_13);
    __pyx_L36_try_end:;
  }

  /* "msyd/pyxfiles/io.pyx":774
 *         pass
 * 
 *     if condense_errors: # not working currently             # <<<<<<<<<<<<<<
 *         if conflictinginfo:
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_condense_errors); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 774, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "msyd/pyxfiles/io.pyx":775
 * 
 *     if condense_errors: # not working currently
 *         if conflictinginfo:             # <<<<<<<<<<<<<<
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 *         if conflictingid:
 */
    if (__pyx_v_conflictinginfo) {

      /* "msyd/pyxfiles/io.pyx":776
 *     if condense_errors: # not working currently
 *         if conflictinginfo:
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")             # <<<<<<<<<<<<<<
 *         if conflictingid:
 *             logger.warning(f"There were VCF records at the same position with different IDs! {lf} IDs were used")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = PyTuple_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_12 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_There_was_conflicting_informatio);
      __pyx_t_12 += 50;
      __Pyx_GIVEREF(__pyx_kp_u_There_was_conflicting_informatio);
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_There_was_conflicting_informatio);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_rf, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_5;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_values_were_overwritten);
      __pyx_t_12 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_values_were_overwritten);
      PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_kp_u_values_were_overwritten);
      __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_16, 3, __pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 776, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_11};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 776, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":775
 * 
 *     if condense_errors: # not working currently
 *         if conflictinginfo:             # <<<<<<<<<<<<<<
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 *         if conflictingid:
 */
    }

    /* "msyd/pyxfiles/io.pyx":777
 *         if conflictinginfo:
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 *         if conflictingid:             # <<<<<<<<<<<<<<
 *             logger.warning(f"There were VCF records at the same position with different IDs! {lf} IDs were used")
 * 
 */
    if (__pyx_v_conflictingid) {

      /* "msyd/pyxfiles/io.pyx":778
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 *         if conflictingid:
 *             logger.warning(f"There were VCF records at the same position with different IDs! {lf} IDs were used")             # <<<<<<<<<<<<<<
 * 
 *     return of # to enable reduction operation
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = 0;
      __pyx_t_5 = 127;
      __Pyx_INCREF(__pyx_kp_u_There_were_VCF_records_at_the_sa);
      __pyx_t_12 += 64;
      __Pyx_GIVEREF(__pyx_kp_u_There_were_VCF_records_at_the_sa);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_There_were_VCF_records_at_the_sa);
      __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_lf, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_5;
      __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_INCREF(__pyx_kp_u_IDs_were_used);
      __pyx_t_12 += 14;
      __Pyx_GIVEREF(__pyx_kp_u_IDs_were_used);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_IDs_were_used);
      __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 778, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_7 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_7 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_16};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":777
 *         if conflictinginfo:
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 *         if conflictingid:             # <<<<<<<<<<<<<<
 *             logger.warning(f"There were VCF records at the same position with different IDs! {lf} IDs were used")
 * 
 */
    }

    /* "msyd/pyxfiles/io.pyx":774
 *         pass
 * 
 *     if condense_errors: # not working currently             # <<<<<<<<<<<<<<
 *         if conflictinginfo:
 *             logger.warning(f"There was conflicting information stored in INFO! {rf} values were overwritten!")
 */
  }

  /* "msyd/pyxfiles/io.pyx":780
 *             logger.warning(f"There were VCF records at the same position with different IDs! {lf} IDs were used")
 * 
 *     return of # to enable reduction operation             # <<<<<<<<<<<<<<
 * 
 * cdef copy_record(rec: VariantRecord, ovcf:VariantFile, int pid=0):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_of))||((__pyx_v_of) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_of))) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_of);
  __pyx_r = ((PyObject*)__pyx_v_of);
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":639
 * 
 * 
 * cdef str merge_vcfs(lf: Union[str, os.PathLike], rf:Union[str, os.PathLike], of:Union[str, os.PathLike], condense_errors=True):             # <<<<<<<<<<<<<<
 *     logger.info(f"Merging {lf} and {rf} into {of}")
 *     # TODO reimplement this with common framework with merge pffs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("msyd.io.merge_vcfs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lvcf);
  __Pyx_XDECREF(__pyx_v_rvcf);
  __Pyx_XDECREF(__pyx_v_ovcf);
  __Pyx_XDECREF(__pyx_v_headerset);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_sample);
  __Pyx_XDECREF(__pyx_v_lann);
  __Pyx_XDECREF(__pyx_v_rann);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_chrom);
  __Pyx_XDECREF(__pyx_v_mapping);
  __Pyx_XDECREF(__pyx_v_record);
  __Pyx_XDECREF(__pyx_v_condense_errors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":782
 *     return of # to enable reduction operation
 * 
 * cdef copy_record(rec: VariantRecord, ovcf:VariantFile, int pid=0):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to copy a record to another VCF, because pysam needs some conversions done.
 */

static PyObject *__pyx_f_4msyd_2io_copy_record(PyObject *__pyx_v_rec, PyObject *__pyx_v_ovcf, struct __pyx_opt_args_4msyd_2io_copy_record *__pyx_optional_args) {
  int __pyx_v_pid = ((int)0);
  PyObject *__pyx_v_new_rec = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_sample = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_record", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_pid = __pyx_optional_args->pid;
    }
  }

  /* "msyd/pyxfiles/io.pyx":786
 *     Utility function to copy a record to another VCF, because pysam needs some conversions done.
 *     """
 *     if rec.chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *         logger.info(f"copy_record Adding {rec.chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(rec.chrom))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_contigs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (__Pyx_PySet_ContainsTF(__pyx_t_1, __pyx_t_2, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "msyd/pyxfiles/io.pyx":787
 *     """
 *     if rec.chrom not in set(ovcf.header.contigs):
 *         logger.info(f"copy_record Adding {rec.chrom} to header")             # <<<<<<<<<<<<<<
 *         ovcf.header.add_line("##contig=<ID={}>".format(rec.chrom))
 *     new_rec = ovcf.new_record()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_6 = 127;
    __Pyx_INCREF(__pyx_kp_u_copy_record_Adding);
    __pyx_t_5 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_copy_record_Adding);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_copy_record_Adding);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
    __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_to_header);
    __pyx_t_5 += 10;
    __Pyx_GIVEREF(__pyx_kp_u_to_header);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_to_header);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":788
 *     if rec.chrom not in set(ovcf.header.contigs):
 *         logger.info(f"copy_record Adding {rec.chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(rec.chrom))             # <<<<<<<<<<<<<<
 *     new_rec = ovcf.new_record()
 *     new_rec.pos = rec.pos
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add_line); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":786
 *     Utility function to copy a record to another VCF, because pysam needs some conversions done.
 *     """
 *     if rec.chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *         logger.info(f"copy_record Adding {rec.chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(rec.chrom))
 */
  }

  /* "msyd/pyxfiles/io.pyx":789
 *         logger.info(f"copy_record Adding {rec.chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(rec.chrom))
 *     new_rec = ovcf.new_record()             # <<<<<<<<<<<<<<
 *     new_rec.pos = rec.pos
 *     new_rec.chrom = rec.chrom
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_new_record); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_v_new_rec = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":790
 *         ovcf.header.add_line("##contig=<ID={}>".format(rec.chrom))
 *     new_rec = ovcf.new_record()
 *     new_rec.pos = rec.pos             # <<<<<<<<<<<<<<
 *     new_rec.chrom = rec.chrom
 *     new_rec.id = rec.id
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_pos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_pos, __pyx_t_2) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":791
 *     new_rec = ovcf.new_record()
 *     new_rec.pos = rec.pos
 *     new_rec.chrom = rec.chrom             # <<<<<<<<<<<<<<
 *     new_rec.id = rec.id
 *     new_rec.alleles = rec.alleles
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_chrom, __pyx_t_2) < 0) __PYX_ERR(0, 791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":792
 *     new_rec.pos = rec.pos
 *     new_rec.chrom = rec.chrom
 *     new_rec.id = rec.id             # <<<<<<<<<<<<<<
 *     new_rec.alleles = rec.alleles
 *     for key in rec.info:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_id, __pyx_t_2) < 0) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":793
 *     new_rec.chrom = rec.chrom
 *     new_rec.id = rec.id
 *     new_rec.alleles = rec.alleles             # <<<<<<<<<<<<<<
 *     for key in rec.info:
 *         new_rec.info[key] = rec.info[key]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_new_rec, __pyx_n_s_alleles, __pyx_t_2) < 0) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":794
 *     new_rec.id = rec.id
 *     new_rec.alleles = rec.alleles
 *     for key in rec.info:             # <<<<<<<<<<<<<<
 *         new_rec.info[key] = rec.info[key]
 *     for sample in rec.samples:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_8 = __pyx_t_2; __Pyx_INCREF(__pyx_t_8);
    __pyx_t_5 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 794, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 794, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 794, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 794, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 794, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_11(__pyx_t_8);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 794, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":795
 *     new_rec.alleles = rec.alleles
 *     for key in rec.info:
 *         new_rec.info[key] = rec.info[key]             # <<<<<<<<<<<<<<
 *     for sample in rec.samples:
 *         new_rec.samples[sample].update(rec.samples[sample])
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely((PyObject_SetItem(__pyx_t_2, __pyx_v_key, __pyx_t_3) < 0))) __PYX_ERR(0, 795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":794
 *     new_rec.id = rec.id
 *     new_rec.alleles = rec.alleles
 *     for key in rec.info:             # <<<<<<<<<<<<<<
 *         new_rec.info[key] = rec.info[key]
 *     for sample in rec.samples:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "msyd/pyxfiles/io.pyx":796
 *     for key in rec.info:
 *         new_rec.info[key] = rec.info[key]
 *     for sample in rec.samples:             # <<<<<<<<<<<<<<
 *         new_rec.samples[sample].update(rec.samples[sample])
 *     if pid != 0: # set parent ID if necessary
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 796, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 796, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 796, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 796, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 796, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 796, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 796, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_11(__pyx_t_3);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 796, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "msyd/pyxfiles/io.pyx":797
 *         new_rec.info[key] = rec.info[key]
 *     for sample in rec.samples:
 *         new_rec.samples[sample].update(rec.samples[sample])             # <<<<<<<<<<<<<<
 *     if pid != 0: # set parent ID if necessary
 *         new_rec.info['PID'] = pid
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_sample); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_7};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 797, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "msyd/pyxfiles/io.pyx":796
 *     for key in rec.info:
 *         new_rec.info[key] = rec.info[key]
 *     for sample in rec.samples:             # <<<<<<<<<<<<<<
 *         new_rec.samples[sample].update(rec.samples[sample])
 *     if pid != 0: # set parent ID if necessary
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":798
 *     for sample in rec.samples:
 *         new_rec.samples[sample].update(rec.samples[sample])
 *     if pid != 0: # set parent ID if necessary             # <<<<<<<<<<<<<<
 *         new_rec.info['PID'] = pid
 *     ovcf.write(new_rec)
 */
  __pyx_t_4 = (__pyx_v_pid != 0);
  if (__pyx_t_4) {

    /* "msyd/pyxfiles/io.pyx":799
 *         new_rec.samples[sample].update(rec.samples[sample])
 *     if pid != 0: # set parent ID if necessary
 *         new_rec.info['PID'] = pid             # <<<<<<<<<<<<<<
 *     ovcf.write(new_rec)
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely((PyObject_SetItem(__pyx_t_8, __pyx_n_u_PID, __pyx_t_3) < 0))) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":798
 *     for sample in rec.samples:
 *         new_rec.samples[sample].update(rec.samples[sample])
 *     if pid != 0: # set parent ID if necessary             # <<<<<<<<<<<<<<
 *         new_rec.info['PID'] = pid
 *     ovcf.write(new_rec)
 */
  }

  /* "msyd/pyxfiles/io.pyx":800
 *     if pid != 0: # set parent ID if necessary
 *         new_rec.info['PID'] = pid
 *     ovcf.write(new_rec)             # <<<<<<<<<<<<<<
 * 
 * cdef merge_vcf_records(lrec: VariantRecord, rrec:VariantRecord, ovcf:VariantFile, condense_errors=True):
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = NULL;
  __pyx_t_9 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_9 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_new_rec};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":782
 *     return of # to enable reduction operation
 * 
 * cdef copy_record(rec: VariantRecord, ovcf:VariantFile, int pid=0):             # <<<<<<<<<<<<<<
 *     """
 *     Utility function to copy a record to another VCF, because pysam needs some conversions done.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("msyd.io.copy_record", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_new_rec);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_sample);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":859
 *             # apparently pysam treats the genotype specially without documenting that behaviour...
 *             gt = rec.samples[sample]['GT']
 *             mapper = lambda x: gtmap[alleles[x]] if x is not None else gtmap[alleles[0]]             # <<<<<<<<<<<<<<
 *             if not gt:
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_17merge_vcf_records_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_17merge_vcf_records_lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_17merge_vcf_records_lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_17merge_vcf_records_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 859, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 859, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.merge_vcf_records.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_x);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *__pyx_cur_scope;
  struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 1);
  __pyx_outer_scope = (struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (__pyx_v_x != Py_None);
  if (__pyx_t_2) {
    if (unlikely(!__pyx_cur_scope->__pyx_v_gtmap)) { __Pyx_RaiseClosureNameError("gtmap"); __PYX_ERR(0, 859, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_gtmap == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 859, __pyx_L1_error)
    }
    if (unlikely(!__pyx_cur_scope->__pyx_v_alleles)) { __Pyx_RaiseClosureNameError("alleles"); __PYX_ERR(0, 859, __pyx_L1_error) }
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_alleles, __pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_gtmap, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    if (unlikely(!__pyx_cur_scope->__pyx_v_gtmap)) { __Pyx_RaiseClosureNameError("gtmap"); __PYX_ERR(0, 859, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_v_gtmap == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 859, __pyx_L1_error)
    }
    if (unlikely(!__pyx_cur_scope->__pyx_v_alleles)) { __Pyx_RaiseClosureNameError("alleles"); __PYX_ERR(0, 859, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_alleles, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_gtmap, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("msyd.io.merge_vcf_records.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":802
 *     ovcf.write(new_rec)
 * 
 * cdef merge_vcf_records(lrec: VariantRecord, rrec:VariantRecord, ovcf:VariantFile, condense_errors=True):             # <<<<<<<<<<<<<<
 *     """
 *     Merge two vcf records from different files, append to ovcf.
 */

static PyObject *__pyx_f_4msyd_2io_merge_vcf_records(PyObject *__pyx_v_lrec, PyObject *__pyx_v_rrec, PyObject *__pyx_v_ovcf, struct __pyx_opt_args_4msyd_2io_merge_vcf_records *__pyx_optional_args) {
  struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *__pyx_cur_scope;
  PyObject *__pyx_v_condense_errors = ((PyObject *)Py_True);
  PyObject *__pyx_v_rec = NULL;
  PyObject *__pyx_v_chrom = NULL;
  PyObject *__pyx_v_lref = NULL;
  PyObject *__pyx_v_rref = NULL;
  CYTHON_UNUSED int __pyx_v_conflictingid;
  PyObject *__pyx_v_samples = NULL;
  PyObject *__pyx_v_sample = NULL;
  PyObject *__pyx_v_gt = NULL;
  PyObject *__pyx_v_mapper = NULL;
  PyObject *__pyx_v_key = NULL;
  CYTHON_UNUSED int __pyx_v_conflictinginfo;
  PyObject *__pyx_9genexpr23__pyx_v_ind = NULL;
  PyObject *__pyx_9genexpr23__pyx_v_gt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge_vcf_records", 0);
  __pyx_cur_scope = (struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *)__pyx_tp_new_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records(__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 802, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_condense_errors = __pyx_optional_args->condense_errors;
    }
  }

  /* "msyd/pyxfiles/io.pyx":806
 *     Merge two vcf records from different files, append to ovcf.
 *     """
 *     rec = ovcf.new_record()             # <<<<<<<<<<<<<<
 *     rec.pos = lrec.pos # shoud be equal anyway
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_new_record); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_rec = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":807
 *     """
 *     rec = ovcf.new_record()
 *     rec.pos = lrec.pos # shoud be equal anyway             # <<<<<<<<<<<<<<
 * 
 *     chrom = lrec.chrom
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_pos, __pyx_t_1) < 0) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":809
 *     rec.pos = lrec.pos # shoud be equal anyway
 * 
 *     chrom = lrec.chrom             # <<<<<<<<<<<<<<
 *     # this should not be necessary, but for some reason the chrs do not seem to be added by merging the header?
 *     if chrom not in set(ovcf.header.contigs):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chrom = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":811
 *     chrom = lrec.chrom
 *     # this should not be necessary, but for some reason the chrs do not seem to be added by merging the header?
 *     if chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *         logger.info(f"merge_vcf_records Adding {chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(chrom))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_contigs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__Pyx_PySet_ContainsTF(__pyx_v_chrom, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "msyd/pyxfiles/io.pyx":812
 *     # this should not be necessary, but for some reason the chrs do not seem to be added by merging the header?
 *     if chrom not in set(ovcf.header.contigs):
 *         logger.info(f"merge_vcf_records Adding {chrom} to header")             # <<<<<<<<<<<<<<
 *         ovcf.header.add_line("##contig=<ID={}>".format(chrom))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_merge_vcf_records_Adding);
    __pyx_t_6 += 25;
    __Pyx_GIVEREF(__pyx_kp_u_merge_vcf_records_Adding);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_merge_vcf_records_Adding);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_chrom, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_to_header);
    __pyx_t_6 += 10;
    __Pyx_GIVEREF(__pyx_kp_u_to_header);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_to_header);
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":813
 *     if chrom not in set(ovcf.header.contigs):
 *         logger.info(f"merge_vcf_records Adding {chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(chrom))             # <<<<<<<<<<<<<<
 * 
 *     rec.chrom = chrom
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_header); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_add_line); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_chrom};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":811
 *     chrom = lrec.chrom
 *     # this should not be necessary, but for some reason the chrs do not seem to be added by merging the header?
 *     if chrom not in set(ovcf.header.contigs):             # <<<<<<<<<<<<<<
 *         logger.info(f"merge_vcf_records Adding {chrom} to header")
 *         ovcf.header.add_line("##contig=<ID={}>".format(chrom))
 */
  }

  /* "msyd/pyxfiles/io.pyx":815
 *         ovcf.header.add_line("##contig=<ID={}>".format(chrom))
 * 
 *     rec.chrom = chrom             # <<<<<<<<<<<<<<
 * 
 *     lref = lrec.alleles[0]
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_chrom, __pyx_v_chrom) < 0) __PYX_ERR(0, 815, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":817
 *     rec.chrom = chrom
 * 
 *     lref = lrec.alleles[0]             # <<<<<<<<<<<<<<
 *     rref = rrec.alleles[0]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lref = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "msyd/pyxfiles/io.pyx":818
 * 
 *     lref = lrec.alleles[0]
 *     rref = rrec.alleles[0]             # <<<<<<<<<<<<<<
 * 
 *     rec.stop = lrec.stop
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_rref = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":820
 *     rref = rrec.alleles[0]
 * 
 *     rec.stop = lrec.stop             # <<<<<<<<<<<<<<
 * 
 *     if lref != rref:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_stop, __pyx_t_1) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":822
 *     rec.stop = lrec.stop
 * 
 *     if lref != rref:             # <<<<<<<<<<<<<<
 *         logger.error("Trying to join records with different references!")
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_lref, __pyx_v_rref, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "msyd/pyxfiles/io.pyx":823
 * 
 *     if lref != rref:
 *         logger.error("Trying to join records with different references!")             # <<<<<<<<<<<<<<
 * 
 *     # construct joined gt -> index map
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_kp_u_Trying_to_join_records_with_diff};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":822
 *     rec.stop = lrec.stop
 * 
 *     if lref != rref:             # <<<<<<<<<<<<<<
 *         logger.error("Trying to join records with different references!")
 * 
 */
  }

  /* "msyd/pyxfiles/io.pyx":826
 * 
 *     # construct joined gt -> index map
 *     gtmap = {gt:ind+1 for ind, gt in enumerate(set(lrec.alleles[1:] + rrec.alleles[1:]))}             # <<<<<<<<<<<<<<
 * 
 *     alleles = [rref] + list(gtmap.keys())
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_3 = __pyx_int_0;
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_t_2, 1, 0, NULL, NULL, &__pyx_slice__11, 1, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_t_2, 1, 0, NULL, NULL, &__pyx_slice__11, 1, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_9, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_set_iterator(__pyx_t_11, 1, (&__pyx_t_10), (&__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_8);
    __pyx_t_8 = __pyx_t_2;
    __pyx_t_2 = 0;
    while (1) {
      __pyx_t_12 = __Pyx_set_iter_next(__pyx_t_8, __pyx_t_10, &__pyx_t_6, &__pyx_t_2, __pyx_t_4);
      if (unlikely(__pyx_t_12 == 0)) break;
      if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 826, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_9genexpr23__pyx_v_gt, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_9genexpr23__pyx_v_ind, __pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_9genexpr23__pyx_v_ind, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_9genexpr23__pyx_v_gt, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 826, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_gt); __pyx_9genexpr23__pyx_v_gt = 0;
    __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_ind); __pyx_9genexpr23__pyx_v_ind = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_gt); __pyx_9genexpr23__pyx_v_gt = 0;
    __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_ind); __pyx_9genexpr23__pyx_v_ind = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_gtmap = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":828
 *     gtmap = {gt:ind+1 for ind, gt in enumerate(set(lrec.alleles[1:] + rrec.alleles[1:]))}
 * 
 *     alleles = [rref] + list(gtmap.keys())             # <<<<<<<<<<<<<<
 *     gtmap[rref] = None # add the reference to gtmap
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_rref);
  __Pyx_GIVEREF(__pyx_v_rref);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_rref)) __PYX_ERR(0, 828, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_v_gtmap); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PySequence_ListKeepNew(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_alleles = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":829
 * 
 *     alleles = [rref] + list(gtmap.keys())
 *     gtmap[rref] = None # add the reference to gtmap             # <<<<<<<<<<<<<<
 * 
 *     # <NOTAL> annotations have only one allele in SyRI VCF files
 */
  if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_gtmap, __pyx_v_rref, Py_None) < 0))) __PYX_ERR(0, 829, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":834
 *     # pysam throws an error when storing variants with only one allele,
 *     # but can read them just fine
 *     if len(alleles) == 1:             # <<<<<<<<<<<<<<
 *         alleles.append(' ') # try to trick pysam
 *     rec.alleles = alleles
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_alleles;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_10 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_10 == 1);
  if (__pyx_t_5) {

    /* "msyd/pyxfiles/io.pyx":835
 *     # but can read them just fine
 *     if len(alleles) == 1:
 *         alleles.append(' ') # try to trick pysam             # <<<<<<<<<<<<<<
 *     rec.alleles = alleles
 * 
 */
    __pyx_t_13 = __Pyx_PyObject_Append(__pyx_cur_scope->__pyx_v_alleles, __pyx_kp_u__9); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 835, __pyx_L1_error)

    /* "msyd/pyxfiles/io.pyx":834
 *     # pysam throws an error when storing variants with only one allele,
 *     # but can read them just fine
 *     if len(alleles) == 1:             # <<<<<<<<<<<<<<
 *         alleles.append(' ') # try to trick pysam
 *     rec.alleles = alleles
 */
  }

  /* "msyd/pyxfiles/io.pyx":836
 *     if len(alleles) == 1:
 *         alleles.append(' ') # try to trick pysam
 *     rec.alleles = alleles             # <<<<<<<<<<<<<<
 * 
 *     if lrec.id != rrec.id:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_cur_scope->__pyx_v_alleles) < 0) __PYX_ERR(0, 836, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":838
 *     rec.alleles = alleles
 * 
 *     if lrec.id != rrec.id:             # <<<<<<<<<<<<<<
 *         if condense_errors:
 *             conflictingid = True
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "msyd/pyxfiles/io.pyx":839
 * 
 *     if lrec.id != rrec.id:
 *         if condense_errors:             # <<<<<<<<<<<<<<
 *             conflictingid = True
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_condense_errors); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 839, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "msyd/pyxfiles/io.pyx":840
 *     if lrec.id != rrec.id:
 *         if condense_errors:
 *             conflictingid = True             # <<<<<<<<<<<<<<
 *         else:
 *             logger.warning(f"id not matching in {lrec.id} and {rrec.id}! Choosing {lrec.id}")
 */
      __pyx_v_conflictingid = 1;

      /* "msyd/pyxfiles/io.pyx":839
 * 
 *     if lrec.id != rrec.id:
 *         if condense_errors:             # <<<<<<<<<<<<<<
 *             conflictingid = True
 *         else:
 */
      goto __pyx_L13;
    }

    /* "msyd/pyxfiles/io.pyx":842
 *             conflictingid = True
 *         else:
 *             logger.warning(f"id not matching in {lrec.id} and {rrec.id}! Choosing {lrec.id}")             # <<<<<<<<<<<<<<
 *     rec.id = lrec.id
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_warning); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = 0;
      __pyx_t_7 = 127;
      __Pyx_INCREF(__pyx_kp_u_id_not_matching_in);
      __pyx_t_10 += 19;
      __Pyx_GIVEREF(__pyx_kp_u_id_not_matching_in);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_id_not_matching_in);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_and);
      __pyx_t_10 += 5;
      __Pyx_GIVEREF(__pyx_kp_u_and);
      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_and);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_Choosing);
      __pyx_t_10 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_Choosing);
      PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u_Choosing);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_8, 6, __pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L13:;

    /* "msyd/pyxfiles/io.pyx":838
 *     rec.alleles = alleles
 * 
 *     if lrec.id != rrec.id:             # <<<<<<<<<<<<<<
 *         if condense_errors:
 *             conflictingid = True
 */
  }

  /* "msyd/pyxfiles/io.pyx":843
 *         else:
 *             logger.warning(f"id not matching in {lrec.id} and {rrec.id}! Choosing {lrec.id}")
 *     rec.id = lrec.id             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_id, __pyx_t_1) < 0) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":847
 * 
 *     # rec.samples.update() throws internal pysam errors, circumvent it by directly calling update for each sample
 *     for samples in [lrec.samples, rrec.samples]:             # <<<<<<<<<<<<<<
 *         for sample in samples:
 *             rec.samples[sample].update(samples[sample])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_t_11; __Pyx_INCREF(__pyx_t_3);
  __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  for (;;) {
    if (__pyx_t_10 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_11); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 847, __pyx_L1_error)
    #else
    __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_samples, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "msyd/pyxfiles/io.pyx":848
 *     # rec.samples.update() throws internal pysam errors, circumvent it by directly calling update for each sample
 *     for samples in [lrec.samples, rrec.samples]:
 *         for sample in samples:             # <<<<<<<<<<<<<<
 *             rec.samples[sample].update(samples[sample])
 * 
 */
    if (likely(PyList_CheckExact(__pyx_v_samples)) || PyTuple_CheckExact(__pyx_v_samples)) {
      __pyx_t_11 = __pyx_v_samples; __Pyx_INCREF(__pyx_t_11);
      __pyx_t_6 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_v_samples); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 848, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_11))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 848, __pyx_L1_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 848, __pyx_L1_error)
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 848, __pyx_L1_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 848, __pyx_L1_error)
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_14(__pyx_t_11);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 848, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":849
 *     for samples in [lrec.samples, rrec.samples]:
 *         for sample in samples:
 *             rec.samples[sample].update(samples[sample])             # <<<<<<<<<<<<<<
 * 
 *     # handle GT column separately, incorporating the gtmap constructed earlier
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_sample); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_samples, __pyx_v_sample); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_2};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":848
 *     # rec.samples.update() throws internal pysam errors, circumvent it by directly calling update for each sample
 *     for samples in [lrec.samples, rrec.samples]:
 *         for sample in samples:             # <<<<<<<<<<<<<<
 *             rec.samples[sample].update(samples[sample])
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "msyd/pyxfiles/io.pyx":847
 * 
 *     # rec.samples.update() throws internal pysam errors, circumvent it by directly calling update for each sample
 *     for samples in [lrec.samples, rrec.samples]:             # <<<<<<<<<<<<<<
 *         for sample in samples:
 *             rec.samples[sample].update(samples[sample])
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":853
 *     # handle GT column separately, incorporating the gtmap constructed earlier
 *     #for samples in [lrec.samples, rrec.samples]:
 *     for (samples, alleles) in [(lrec.samples, lrec.alleles), (rrec.samples, rrec.alleles)]:             # <<<<<<<<<<<<<<
 *         for sample in samples:
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_11)) __PYX_ERR(0, 853, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_samples); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_alleles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11)) __PYX_ERR(0, 853, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8)) __PYX_ERR(0, 853, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __pyx_t_3; __Pyx_INCREF(__pyx_t_8);
  __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_10 >= 2) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 853, __pyx_L1_error)
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (likely(__pyx_t_3 != Py_None)) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 853, __pyx_L1_error)
    }
    __Pyx_XDECREF_SET(__pyx_v_samples, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_alleles);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_alleles, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    __pyx_t_11 = 0;

    /* "msyd/pyxfiles/io.pyx":854
 *     #for samples in [lrec.samples, rrec.samples]:
 *     for (samples, alleles) in [(lrec.samples, lrec.alleles), (rrec.samples, rrec.alleles)]:
 *         for sample in samples:             # <<<<<<<<<<<<<<
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating
 *                 continue
 */
    if (likely(PyList_CheckExact(__pyx_v_samples)) || PyTuple_CheckExact(__pyx_v_samples)) {
      __pyx_t_3 = __pyx_v_samples; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 854, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 854, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 854, __pyx_L1_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 854, __pyx_L1_error)
          #else
          __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 854, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 854, __pyx_L1_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 854, __pyx_L1_error)
          #else
          __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 854, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_14(__pyx_t_3);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 854, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_v_sample, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "msyd/pyxfiles/io.pyx":855
 *     for (samples, alleles) in [(lrec.samples, lrec.alleles), (rrec.samples, rrec.alleles)]:
 *         for sample in samples:
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating             # <<<<<<<<<<<<<<
 *                 continue
 *             # apparently pysam treats the genotype specially without documenting that behaviour...
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_v_sample); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_GT, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_15) {
      } else {
        __pyx_t_5 = __pyx_t_15;
        goto __pyx_L25_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_alleles, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = __pyx_t_15;
      __pyx_L25_bool_binop_done:;
      if (__pyx_t_5) {

        /* "msyd/pyxfiles/io.pyx":856
 *         for sample in samples:
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating
 *                 continue             # <<<<<<<<<<<<<<
 *             # apparently pysam treats the genotype specially without documenting that behaviour...
 *             gt = rec.samples[sample]['GT']
 */
        goto __pyx_L22_continue;

        /* "msyd/pyxfiles/io.pyx":855
 *     for (samples, alleles) in [(lrec.samples, lrec.alleles), (rrec.samples, rrec.alleles)]:
 *         for sample in samples:
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating             # <<<<<<<<<<<<<<
 *                 continue
 *             # apparently pysam treats the genotype specially without documenting that behaviour...
 */
      }

      /* "msyd/pyxfiles/io.pyx":858
 *                 continue
 *             # apparently pysam treats the genotype specially without documenting that behaviour...
 *             gt = rec.samples[sample]['GT']             # <<<<<<<<<<<<<<
 *             mapper = lambda x: gtmap[alleles[x]] if x is not None else gtmap[alleles[0]]
 *             if not gt:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_sample); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_11, __pyx_n_u_GT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_gt, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":859
 *             # apparently pysam treats the genotype specially without documenting that behaviour...
 *             gt = rec.samples[sample]['GT']
 *             mapper = lambda x: gtmap[alleles[x]] if x is not None else gtmap[alleles[0]]             # <<<<<<<<<<<<<<
 *             if not gt:
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 */
      __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_17merge_vcf_records_lambda, 0, __pyx_n_s_merge_vcf_records_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_msyd_io, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_mapper, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "msyd/pyxfiles/io.pyx":860
 *             gt = rec.samples[sample]['GT']
 *             mapper = lambda x: gtmap[alleles[x]] if x is not None else gtmap[alleles[0]]
 *             if not gt:             # <<<<<<<<<<<<<<
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 *                 continue
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_gt); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 860, __pyx_L1_error)
      __pyx_t_15 = (!__pyx_t_5);
      if (__pyx_t_15) {

        /* "msyd/pyxfiles/io.pyx":861
 *             mapper = lambda x: gtmap[alleles[x]] if x is not None else gtmap[alleles[0]]
 *             if not gt:
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")             # <<<<<<<<<<<<<<
 *                 continue
 *             elif len(gt) == 2:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_warning); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyTuple_New(6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_16 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Invalid_GT_found);
        __pyx_t_16 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Invalid_GT_found);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_u_Invalid_GT_found);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_gt, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_for);
        __pyx_t_16 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_for);
        PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_kp_u_for);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_sample, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_in);
        __pyx_t_16 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_in);
        PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_kp_u_in);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_17);
        __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_11, 6, __pyx_t_16, __pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_17};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":862
 *             if not gt:
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 *                 continue             # <<<<<<<<<<<<<<
 *             elif len(gt) == 2:
 *                 rec.samples[sample]['GT'] = (mapper(gt[0]), mapper(gt[1]))
 */
        goto __pyx_L22_continue;

        /* "msyd/pyxfiles/io.pyx":860
 *             gt = rec.samples[sample]['GT']
 *             mapper = lambda x: gtmap[alleles[x]] if x is not None else gtmap[alleles[0]]
 *             if not gt:             # <<<<<<<<<<<<<<
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 *                 continue
 */
      }

      /* "msyd/pyxfiles/io.pyx":863
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 *                 continue
 *             elif len(gt) == 2:             # <<<<<<<<<<<<<<
 *                 rec.samples[sample]['GT'] = (mapper(gt[0]), mapper(gt[1]))
 *             elif len(gt) == 1:
 */
      __pyx_t_16 = PyObject_Length(__pyx_v_gt); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 863, __pyx_L1_error)
      __pyx_t_15 = (__pyx_t_16 == 2);
      if (__pyx_t_15) {

        /* "msyd/pyxfiles/io.pyx":864
 *                 continue
 *             elif len(gt) == 2:
 *                 rec.samples[sample]['GT'] = (mapper(gt[0]), mapper(gt[1]))             # <<<<<<<<<<<<<<
 *             elif len(gt) == 1:
 *                 # there is an unphased GT
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_gt, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_lambda_funcdef_lambda(__pyx_v_mapper, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_gt, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_17 = __pyx_lambda_funcdef_lambda(__pyx_v_mapper, __pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_2);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_17);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_17)) __PYX_ERR(0, 864, __pyx_L1_error);
        __pyx_t_2 = 0;
        __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_17, __pyx_v_sample); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely((PyObject_SetItem(__pyx_t_2, __pyx_n_u_GT, __pyx_t_1) < 0))) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":863
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")
 *                 continue
 *             elif len(gt) == 2:             # <<<<<<<<<<<<<<
 *                 rec.samples[sample]['GT'] = (mapper(gt[0]), mapper(gt[1]))
 *             elif len(gt) == 1:
 */
        goto __pyx_L27;
      }

      /* "msyd/pyxfiles/io.pyx":865
 *             elif len(gt) == 2:
 *                 rec.samples[sample]['GT'] = (mapper(gt[0]), mapper(gt[1]))
 *             elif len(gt) == 1:             # <<<<<<<<<<<<<<
 *                 # there is an unphased GT
 *                 rec.samples[sample]['GT'] = mapper(gt[0])
 */
      __pyx_t_16 = PyObject_Length(__pyx_v_gt); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(0, 865, __pyx_L1_error)
      __pyx_t_15 = (__pyx_t_16 == 1);
      if (__pyx_t_15) {

        /* "msyd/pyxfiles/io.pyx":867
 *             elif len(gt) == 1:
 *                 # there is an unphased GT
 *                 rec.samples[sample]['GT'] = mapper(gt[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 # there is an invalid GT
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_gt, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_lambda_funcdef_lambda(__pyx_v_mapper, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_17 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_sample); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely((PyObject_SetItem(__pyx_t_17, __pyx_n_u_GT, __pyx_t_2) < 0))) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":865
 *             elif len(gt) == 2:
 *                 rec.samples[sample]['GT'] = (mapper(gt[0]), mapper(gt[1]))
 *             elif len(gt) == 1:             # <<<<<<<<<<<<<<
 *                 # there is an unphased GT
 *                 rec.samples[sample]['GT'] = mapper(gt[0])
 */
        goto __pyx_L27;
      }

      /* "msyd/pyxfiles/io.pyx":870
 *             else:
 *                 # there is an invalid GT
 *                 logger.warning(f"Invalid GT found: {gt} for {sample} in {rec.id}")             # <<<<<<<<<<<<<<
 * 
 *             #logger.info(f"{gt}, {gtmap}, {alleles}, {rec.samples[sample]['GT']}")
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyTuple_New(6); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_16 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Invalid_GT_found);
        __pyx_t_16 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Invalid_GT_found);
        PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_kp_u_Invalid_GT_found);
        __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_gt, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_kp_u_for);
        __pyx_t_16 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_for);
        PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_kp_u_for);
        __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_v_sample, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_17, 3, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_INCREF(__pyx_kp_u_in);
        __pyx_t_16 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_in);
        PyTuple_SET_ITEM(__pyx_t_17, 4, __pyx_kp_u_in);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_id); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_16 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_17, 5, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_17, 6, __pyx_t_16, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_9};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 870, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L27:;

      /* "msyd/pyxfiles/io.pyx":854
 *     #for samples in [lrec.samples, rrec.samples]:
 *     for (samples, alleles) in [(lrec.samples, lrec.alleles), (rrec.samples, rrec.alleles)]:
 *         for sample in samples:             # <<<<<<<<<<<<<<
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating
 *                 continue
 */
      __pyx_L22_continue:;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":853
 *     # handle GT column separately, incorporating the gtmap constructed earlier
 *     #for samples in [lrec.samples, rrec.samples]:
 *     for (samples, alleles) in [(lrec.samples, lrec.alleles), (rrec.samples, rrec.alleles)]:             # <<<<<<<<<<<<<<
 *         for sample in samples:
 *             if not 'GT' in rec.samples[sample] or alleles == None: # nothing needs updating
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "msyd/pyxfiles/io.pyx":879
 * 
 *     # pysam does not allow setting the info field all at once, do it iteratively:
 *     for key in lrec.info:             # <<<<<<<<<<<<<<
 *         rec.info[key] = lrec.info[key]
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_10 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 879, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
          #endif
          if (__pyx_t_10 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
          #endif
          if (__pyx_t_10 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 879, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_14(__pyx_t_3);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 879, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "msyd/pyxfiles/io.pyx":880
 *     # pysam does not allow setting the info field all at once, do it iteratively:
 *     for key in lrec.info:
 *         rec.info[key] = lrec.info[key]             # <<<<<<<<<<<<<<
 * 
 *     for key in rrec.info:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely((PyObject_SetItem(__pyx_t_8, __pyx_v_key, __pyx_t_2) < 0))) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":879
 * 
 *     # pysam does not allow setting the info field all at once, do it iteratively:
 *     for key in lrec.info:             # <<<<<<<<<<<<<<
 *         rec.info[key] = lrec.info[key]
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":882
 *         rec.info[key] = lrec.info[key]
 * 
 *     for key in rrec.info:             # <<<<<<<<<<<<<<
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:
 *             if condense_errors:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_10 = 0;
    __pyx_t_14 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 882, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_14)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 882, __pyx_L1_error)
          #endif
          if (__pyx_t_10 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 882, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 882, __pyx_L1_error)
          #endif
          if (__pyx_t_10 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 882, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_14(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 882, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":883
 * 
 *     for key in rrec.info:
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:             # <<<<<<<<<<<<<<
 *             if condense_errors:
 *                 conflictinginfo = True
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_key, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_5) {
    } else {
      __pyx_t_15 = __pyx_t_5;
      goto __pyx_L36_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_15 = __pyx_t_5;
    __pyx_L36_bool_binop_done:;
    if (__pyx_t_15) {

      /* "msyd/pyxfiles/io.pyx":884
 *     for key in rrec.info:
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:
 *             if condense_errors:             # <<<<<<<<<<<<<<
 *                 conflictinginfo = True
 *             else:
 */
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_condense_errors); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 884, __pyx_L1_error)
      if (__pyx_t_15) {

        /* "msyd/pyxfiles/io.pyx":885
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:
 *             if condense_errors:
 *                 conflictinginfo = True             # <<<<<<<<<<<<<<
 *             else:
 *                 logger.warning(f"Conflicting info stored for {key} in {rec.id}: {lrec.info[key]} != {rrec.info[key]}! Choosing {lrec.info[key]}")
 */
        __pyx_v_conflictinginfo = 1;

        /* "msyd/pyxfiles/io.pyx":884
 *     for key in rrec.info:
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:
 *             if condense_errors:             # <<<<<<<<<<<<<<
 *                 conflictinginfo = True
 *             else:
 */
        goto __pyx_L38;
      }

      /* "msyd/pyxfiles/io.pyx":887
 *                 conflictinginfo = True
 *             else:
 *                 logger.warning(f"Conflicting info stored for {key} in {rec.id}: {lrec.info[key]} != {rrec.info[key]}! Choosing {lrec.info[key]}")             # <<<<<<<<<<<<<<
 *             #continue
 *         else:
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warning); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Conflicting_info_stored_for);
        __pyx_t_6 += 28;
        __Pyx_GIVEREF(__pyx_kp_u_Conflicting_info_stored_for);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Conflicting_info_stored_for);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_key, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_in);
        __pyx_t_6 += 4;
        __Pyx_GIVEREF(__pyx_kp_u_in);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_in);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_INCREF(__pyx_kp_u__38);
        __pyx_t_6 += 2;
        __Pyx_GIVEREF(__pyx_kp_u__38);
        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__38);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_17, __pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_INCREF(__pyx_kp_u__39);
        __pyx_t_6 += 4;
        __Pyx_GIVEREF(__pyx_kp_u__39);
        PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__39);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_17, __pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_INCREF(__pyx_kp_u_Choosing);
        __pyx_t_6 += 11;
        __Pyx_GIVEREF(__pyx_kp_u_Choosing);
        PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_Choosing);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_lrec, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_17, __pyx_v_key); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_17);
        __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_1, 10, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 887, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_17};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_L38:;

      /* "msyd/pyxfiles/io.pyx":883
 * 
 *     for key in rrec.info:
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:             # <<<<<<<<<<<<<<
 *             if condense_errors:
 *                 conflictinginfo = True
 */
      goto __pyx_L35;
    }

    /* "msyd/pyxfiles/io.pyx":890
 *             #continue
 *         else:
 *             rec.info[key] = rrec.info[key]             # <<<<<<<<<<<<<<
 * 
 *     ovcf.write(rec)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rrec, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely((PyObject_SetItem(__pyx_t_3, __pyx_v_key, __pyx_t_8) < 0))) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L35:;

    /* "msyd/pyxfiles/io.pyx":882
 *         rec.info[key] = lrec.info[key]
 * 
 *     for key in rrec.info:             # <<<<<<<<<<<<<<
 *         if key in lrec.info and lrec.info[key] != rrec.info[key]:
 *             if condense_errors:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":892
 *             rec.info[key] = rrec.info[key]
 * 
 *     ovcf.write(rec)             # <<<<<<<<<<<<<<
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_ovcf, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_rec};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":802
 *     ovcf.write(new_rec)
 * 
 * cdef merge_vcf_records(lrec: VariantRecord, rrec:VariantRecord, ovcf:VariantFile, condense_errors=True):             # <<<<<<<<<<<<<<
 *     """
 *     Merge two vcf records from different files, append to ovcf.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("msyd.io.merge_vcf_records", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rec);
  __Pyx_XDECREF(__pyx_v_chrom);
  __Pyx_XDECREF(__pyx_v_lref);
  __Pyx_XDECREF(__pyx_v_rref);
  __Pyx_XDECREF(__pyx_v_samples);
  __Pyx_XDECREF(__pyx_v_sample);
  __Pyx_XDECREF(__pyx_v_gt);
  __Pyx_XDECREF(__pyx_v_mapper);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_ind);
  __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_gt);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":894
 *     ovcf.write(rec)
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)
 */

static PyObject *__pyx_pw_4msyd_2io_23extract_syri_regions_from_file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_extract_syri_regions_from_file(PyObject *__pyx_v_fin, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_extract_syri_regions_from_file *__pyx_optional_args) {
  PyObject *__pyx_v_ref = ((PyObject *)__pyx_n_u_a);
  PyObject *__pyx_v_anns = __pyx_k__40;
  PyObject *__pyx_v_reforg = ((PyObject *)__pyx_n_u_ref);
  PyObject *__pyx_v_qryorg = ((PyObject *)__pyx_n_u_qry);
  PyObject *__pyx_v_raw = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_chr_mapping = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  struct __pyx_opt_args_4msyd_2io_extract_syri_regions __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_regions_from_file", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ref = __pyx_optional_args->ref;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_anns = __pyx_optional_args->anns;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_reforg = __pyx_optional_args->reforg;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_qryorg = __pyx_optional_args->qryorg;
          }
        }
      }
    }
  }

  /* "msyd/pyxfiles/io.pyx":895
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping             # <<<<<<<<<<<<<<
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)
 * 
 */
  __pyx_t_1 = __pyx_f_4msyd_2io_readsyriout(__pyx_v_fin, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 895, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 895, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_raw = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_chr_mapping = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":896
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6.__pyx_n = 4;
  __pyx_t_6.ref = __pyx_v_ref;
  __pyx_t_6.anns = __pyx_v_anns;
  __pyx_t_6.reforg = __pyx_v_reforg;
  __pyx_t_6.qryorg = __pyx_v_qryorg;
  __pyx_t_1 = __pyx_f_4msyd_2io_extract_syri_regions(__pyx_v_raw, 0, &__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":894
 *     ovcf.write(rec)
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_raw);
  __Pyx_XDECREF(__pyx_v_chr_mapping);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_23extract_syri_regions_from_file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_23extract_syri_regions_from_file = {"extract_syri_regions_from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_23extract_syri_regions_from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_23extract_syri_regions_from_file(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fin = 0;
  PyObject *__pyx_v_ref = 0;
  PyObject *__pyx_v_anns = 0;
  PyObject *__pyx_v_reforg = 0;
  PyObject *__pyx_v_qryorg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_syri_regions_from_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fin,&__pyx_n_s_ref,&__pyx_n_s_anns,&__pyx_n_s_reforg,&__pyx_n_s_qryorg,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_a));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(__pyx_k__40);
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_ref));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_qry));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ref);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_anns);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reforg);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_qryorg);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extract_syri_regions_from_file") < 0)) __PYX_ERR(0, 894, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fin = values[0];
    __pyx_v_ref = values[1];
    __pyx_v_anns = values[2];
    __pyx_v_reforg = values[3];
    __pyx_v_qryorg = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_syri_regions_from_file", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 894, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_22extract_syri_regions_from_file(__pyx_self, __pyx_v_fin, __pyx_v_ref, __pyx_v_anns, __pyx_v_reforg, __pyx_v_qryorg);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_22extract_syri_regions_from_file(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fin, PyObject *__pyx_v_ref, PyObject *__pyx_v_anns, PyObject *__pyx_v_reforg, PyObject *__pyx_v_qryorg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4msyd_2io_extract_syri_regions_from_file __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_regions_from_file", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.ref = __pyx_v_ref;
  __pyx_t_2.anns = __pyx_v_anns;
  __pyx_t_2.reforg = __pyx_v_reforg;
  __pyx_t_2.qryorg = __pyx_v_qryorg;
  __pyx_t_1 = __pyx_f_4msyd_2io_extract_syri_regions_from_file(__pyx_v_fin, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":899
 * 
 * 
 * cpdef extract_syri_regions(rawsyriout, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     """
 *     Given a syri output file, extract all regions matching a given annotation.
 */

static PyObject *__pyx_pw_4msyd_2io_25extract_syri_regions(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_extract_syri_regions(PyObject *__pyx_v_rawsyriout, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_extract_syri_regions *__pyx_optional_args) {
  PyObject *__pyx_v_ref = ((PyObject *)__pyx_n_u_a);
  PyObject *__pyx_v_anns = __pyx_k__41;
  PyObject *__pyx_v_reforg = ((PyObject *)__pyx_n_u_ref);
  PyObject *__pyx_v_qryorg = ((PyObject *)__pyx_n_u_qry);
  PyObject *__pyx_v_refchr = NULL;
  PyObject *__pyx_v_refhaplo = NULL;
  PyObject *__pyx_v_refstart = NULL;
  PyObject *__pyx_v_refend = NULL;
  PyObject *__pyx_v_qry = NULL;
  PyObject *__pyx_v_qrychr = NULL;
  PyObject *__pyx_v_qryhaplo = NULL;
  PyObject *__pyx_v_qrystart = NULL;
  PyObject *__pyx_v_qryend = NULL;
  PyObject *__pyx_v_buf = NULL;
  PyObject *__pyx_v_merged = NULL;
  PyObject *__pyx_v_row = NULL;
  PyObject *__pyx_9genexpr24__pyx_v_ann = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_regions", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ref = __pyx_optional_args->ref;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_anns = __pyx_optional_args->anns;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_reforg = __pyx_optional_args->reforg;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_qryorg = __pyx_optional_args->qryorg;
          }
        }
      }
    }
  }

  /* "msyd/pyxfiles/io.pyx":904
 *     """
 *     # columns to look for as start/end positions
 *     refchr = ref + "chr"             # <<<<<<<<<<<<<<
 *     refhaplo = "x"
 *     refstart = ref + "start"
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_ref, __pyx_n_u_chr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_refchr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":905
 *     # columns to look for as start/end positions
 *     refchr = ref + "chr"
 *     refhaplo = "x"             # <<<<<<<<<<<<<<
 *     refstart = ref + "start"
 *     refend = ref + "end"
 */
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_v_refhaplo = __pyx_n_u_x;

  /* "msyd/pyxfiles/io.pyx":906
 *     refchr = ref + "chr"
 *     refhaplo = "x"
 *     refstart = ref + "start"             # <<<<<<<<<<<<<<
 *     refend = ref + "end"
 * 
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_ref, __pyx_n_u_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_refstart = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":907
 *     refhaplo = "x"
 *     refstart = ref + "start"
 *     refend = ref + "end"             # <<<<<<<<<<<<<<
 * 
 *     qry = 'b' if ref == 'a' else 'a' # these seem to be the only two values in syri output
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_ref, __pyx_n_u_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_refend = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":909
 *     refend = ref + "end"
 * 
 *     qry = 'b' if ref == 'a' else 'a' # these seem to be the only two values in syri output             # <<<<<<<<<<<<<<
 *     qrychr = qry + "chr"
 *     qryhaplo = "x"
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_ref, __pyx_n_u_a, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 909, __pyx_L1_error)
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_n_u_b);
    __pyx_t_1 = __pyx_n_u_b;
  } else {
    __Pyx_INCREF(__pyx_n_u_a);
    __pyx_t_1 = __pyx_n_u_a;
  }
  __pyx_v_qry = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":910
 * 
 *     qry = 'b' if ref == 'a' else 'a' # these seem to be the only two values in syri output
 *     qrychr = qry + "chr"             # <<<<<<<<<<<<<<
 *     qryhaplo = "x"
 *     qrystart = qry + "start"
 */
  __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_qry, __pyx_n_u_chr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qrychr = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":911
 *     qry = 'b' if ref == 'a' else 'a' # these seem to be the only two values in syri output
 *     qrychr = qry + "chr"
 *     qryhaplo = "x"             # <<<<<<<<<<<<<<
 *     qrystart = qry + "start"
 *     qryend = qry + "end"
 */
  __Pyx_INCREF(__pyx_n_u_x);
  __pyx_v_qryhaplo = __pyx_n_u_x;

  /* "msyd/pyxfiles/io.pyx":912
 *     qrychr = qry + "chr"
 *     qryhaplo = "x"
 *     qrystart = qry + "start"             # <<<<<<<<<<<<<<
 *     qryend = qry + "end"
 * 
 */
  __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_qry, __pyx_n_u_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qrystart = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":913
 *     qryhaplo = "x"
 *     qrystart = qry + "start"
 *     qryend = qry + "end"             # <<<<<<<<<<<<<<
 * 
 *     buf = deque()
 */
  __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_qry, __pyx_n_u_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_qryend = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":915
 *     qryend = qry + "end"
 * 
 *     buf = deque()             # <<<<<<<<<<<<<<
 *     merged = pd.concat([rawsyriout.loc[rawsyriout['type'] == ann if 'type' in rawsyriout.columns else rawsyriout['vartype'] == ann] for ann in anns]) # different syri versions seem to use different names for the type
 *     # if implementing filtering later, filter here
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_deque); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_buf = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":916
 * 
 *     buf = deque()
 *     merged = pd.concat([rawsyriout.loc[rawsyriout['type'] == ann if 'type' in rawsyriout.columns else rawsyriout['vartype'] == ann] for ann in anns]) # different syri versions seem to use different names for the type             # <<<<<<<<<<<<<<
 *     # if implementing filtering later, filter here
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_concat); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 916, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_anns)) || PyTuple_CheckExact(__pyx_v_anns)) {
      __pyx_t_6 = __pyx_v_anns; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_anns); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 916, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 916, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 916, __pyx_L5_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 916, __pyx_L5_error)
          #else
          __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 916, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 916, __pyx_L5_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 916, __pyx_L5_error)
          #else
          __pyx_t_9 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 916, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 916, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr24__pyx_v_ann, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_rawsyriout, __pyx_n_s_loc); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 916, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_rawsyriout, __pyx_n_s_columns); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 916, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_type, __pyx_t_11, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 916, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_2) {
        __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rawsyriout, __pyx_n_u_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 916, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyObject_RichCompare(__pyx_t_11, __pyx_9genexpr24__pyx_v_ann, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 916, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_10 = __pyx_t_12;
        __pyx_t_12 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_rawsyriout, __pyx_n_u_vartype); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 916, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyObject_RichCompare(__pyx_t_12, __pyx_9genexpr24__pyx_v_ann, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 916, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_10 = __pyx_t_11;
        __pyx_t_11 = 0;
      }
      __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 916, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 916, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_ann); __pyx_9genexpr24__pyx_v_ann = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_ann); __pyx_9genexpr24__pyx_v_ann = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_merged = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":919
 *     # if implementing filtering later, filter here
 * 
 *     for row in merged.iterrows():             # <<<<<<<<<<<<<<
 *         row = row[1]
 *         # removed util.chrom_to_int, was causing problems
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_merged, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 919, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 919, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 919, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 919, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 919, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 919, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_row, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":920
 * 
 *     for row in merged.iterrows():
 *         row = row[1]             # <<<<<<<<<<<<<<
 *         # removed util.chrom_to_int, was causing problems
 *         buf.append([Range(reforg, row[refchr], refhaplo, row[refstart], row[refend]),
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_row, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_row, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":922
 *         row = row[1]
 *         # removed util.chrom_to_int, was causing problems
 *         buf.append([Range(reforg, row[refchr], refhaplo, row[refstart], row[refend]),             # <<<<<<<<<<<<<<
 *             Range(qryorg, row[qrychr], qryhaplo, row[qrystart], row[qryend])
 *             ])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Range); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_row, __pyx_v_refchr); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_row, __pyx_v_refstart); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_v_row, __pyx_v_refend); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[6] = {__pyx_t_9, __pyx_v_reforg, __pyx_t_6, __pyx_v_refhaplo, __pyx_t_11, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 5+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "msyd/pyxfiles/io.pyx":923
 *         # removed util.chrom_to_int, was causing problems
 *         buf.append([Range(reforg, row[refchr], refhaplo, row[refstart], row[refend]),
 *             Range(qryorg, row[qrychr], qryhaplo, row[qrystart], row[qryend])             # <<<<<<<<<<<<<<
 *             ])
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Range); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_row, __pyx_v_qrychr); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_row, __pyx_v_qrystart); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_v_row, __pyx_v_qryend); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_10, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[6] = {__pyx_t_12, __pyx_v_qryorg, __pyx_t_11, __pyx_v_qryhaplo, __pyx_t_6, __pyx_t_9};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 5+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }

    /* "msyd/pyxfiles/io.pyx":922
 *         row = row[1]
 *         # removed util.chrom_to_int, was causing problems
 *         buf.append([Range(reforg, row[refchr], refhaplo, row[refstart], row[refend]),             # <<<<<<<<<<<<<<
 *             Range(qryorg, row[qrychr], qryhaplo, row[qrystart], row[qryend])
 *             ])
 */
    __pyx_t_10 = PyList_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_13 = __Pyx_PyObject_Append(__pyx_v_buf, __pyx_t_10); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "msyd/pyxfiles/io.pyx":919
 *     # if implementing filtering later, filter here
 * 
 *     for row in merged.iterrows():             # <<<<<<<<<<<<<<
 *         row = row[1]
 *         # removed util.chrom_to_int, was causing problems
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":926
 *             ])
 * 
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])             # <<<<<<<<<<<<<<
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pd); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PySequence_List(__pyx_v_buf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_data, __pyx_t_3) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_reforg);
  __Pyx_GIVEREF(__pyx_v_reforg);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_reforg)) __PYX_ERR(0, 926, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_qryorg);
  __Pyx_GIVEREF(__pyx_v_qryorg);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_qryorg)) __PYX_ERR(0, 926, __pyx_L1_error);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_columns, __pyx_t_3) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":899
 * 
 * 
 * cpdef extract_syri_regions(rawsyriout, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     """
 *     Given a syri output file, extract all regions matching a given annotation.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_refchr);
  __Pyx_XDECREF(__pyx_v_refhaplo);
  __Pyx_XDECREF(__pyx_v_refstart);
  __Pyx_XDECREF(__pyx_v_refend);
  __Pyx_XDECREF(__pyx_v_qry);
  __Pyx_XDECREF(__pyx_v_qrychr);
  __Pyx_XDECREF(__pyx_v_qryhaplo);
  __Pyx_XDECREF(__pyx_v_qrystart);
  __Pyx_XDECREF(__pyx_v_qryend);
  __Pyx_XDECREF(__pyx_v_buf);
  __Pyx_XDECREF(__pyx_v_merged);
  __Pyx_XDECREF(__pyx_v_row);
  __Pyx_XDECREF(__pyx_9genexpr24__pyx_v_ann);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_25extract_syri_regions(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_24extract_syri_regions, "\n    Given a syri output file, extract all regions matching a given annotation.\n    ");
static PyMethodDef __pyx_mdef_4msyd_2io_25extract_syri_regions = {"extract_syri_regions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_25extract_syri_regions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_24extract_syri_regions};
static PyObject *__pyx_pw_4msyd_2io_25extract_syri_regions(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_rawsyriout = 0;
  PyObject *__pyx_v_ref = 0;
  PyObject *__pyx_v_anns = 0;
  PyObject *__pyx_v_reforg = 0;
  PyObject *__pyx_v_qryorg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_syri_regions (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rawsyriout,&__pyx_n_s_ref,&__pyx_n_s_anns,&__pyx_n_s_reforg,&__pyx_n_s_qryorg,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_a));
    values[2] = __Pyx_Arg_NewRef_FASTCALL(__pyx_k__41);
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_ref));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_n_u_qry));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rawsyriout)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ref);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_anns);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reforg);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_qryorg);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 899, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "extract_syri_regions") < 0)) __PYX_ERR(0, 899, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rawsyriout = values[0];
    __pyx_v_ref = values[1];
    __pyx_v_anns = values[2];
    __pyx_v_reforg = values[3];
    __pyx_v_qryorg = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_syri_regions", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 899, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.extract_syri_regions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_24extract_syri_regions(__pyx_self, __pyx_v_rawsyriout, __pyx_v_ref, __pyx_v_anns, __pyx_v_reforg, __pyx_v_qryorg);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_24extract_syri_regions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_rawsyriout, PyObject *__pyx_v_ref, PyObject *__pyx_v_anns, PyObject *__pyx_v_reforg, PyObject *__pyx_v_qryorg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4msyd_2io_extract_syri_regions __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_regions", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.ref = __pyx_v_ref;
  __pyx_t_2.anns = __pyx_v_anns;
  __pyx_t_2.reforg = __pyx_v_reforg;
  __pyx_t_2.qryorg = __pyx_v_qryorg;
  __pyx_t_1 = __pyx_f_4msyd_2io_extract_syri_regions(__pyx_v_rawsyriout, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":928
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     `extract_syri_regions`, but for processing a list of inputs
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_27extract_syri_regions_to_list_from_files(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_26extract_syri_regions_to_list_from_files, "\n    `extract_syri_regions`, but for processing a list of inputs\n    ");
static PyMethodDef __pyx_mdef_4msyd_2io_27extract_syri_regions_to_list_from_files = {"extract_syri_regions_to_list_from_files", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_27extract_syri_regions_to_list_from_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_26extract_syri_regions_to_list_from_files};
static PyObject *__pyx_pw_4msyd_2io_27extract_syri_regions_to_list_from_files(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fins = 0;
  PyObject *__pyx_v_qrynames = 0;
  PyObject *__pyx_v_cores = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extract_syri_regions_to_list_from_files (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fins,&__pyx_n_s_qrynames,&__pyx_n_s_cores,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject *)__pyx_int_1)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fins)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_qrynames)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("extract_syri_regions_to_list_from_files", 0, 2, 3, 1); __PYX_ERR(0, 928, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cores);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 928, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "extract_syri_regions_to_list_from_files") < 0)) __PYX_ERR(0, 928, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fins = values[0];
    __pyx_v_qrynames = values[1];
    __pyx_v_cores = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extract_syri_regions_to_list_from_files", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 928, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_CLEAR(__pyx_v_kwargs);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_to_list_from_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_26extract_syri_regions_to_list_from_files(__pyx_self, __pyx_v_fins, __pyx_v_qrynames, __pyx_v_cores, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":934
 *     if len(fins) != len(qrynames):
 *         logger.error(f"Infiles and qrynames lists lengths not matching. Offending lists: {fins} and {qrynames}")
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     if cores == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_39extract_syri_regions_to_list_from_files_lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_39extract_syri_regions_to_list_from_files_lambda1 = {"lambda1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_39extract_syri_regions_to_list_from_files_lambda1, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_39extract_syri_regions_to_list_from_files_lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_qryname = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_qryname,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_qryname)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("lambda1", 1, 2, 2, 1); __PYX_ERR(0, 934, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda1") < 0)) __PYX_ERR(0, 934, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_qryname = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda1", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 934, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_to_list_from_files.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, __pyx_v_x, __pyx_v_qryname);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_qryname) {
  struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *__pyx_cur_scope;
  struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 1);
  __pyx_outer_scope = (struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_extract_syri_regions_from_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_x)) __PYX_ERR(0, 934, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_qryorg, __pyx_v_qryname) < 0) __PYX_ERR(0, 934, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_kwargs)) { __Pyx_RaiseClosureNameError("kwargs"); __PYX_ERR(0, 934, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 934, __pyx_L1_error)
  }
  if (__Pyx_MergeKeywords(__pyx_t_3, __pyx_cur_scope->__pyx_v_kwargs) < 0) __PYX_ERR(0, 934, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_to_list_from_files.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":928
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     `extract_syri_regions`, but for processing a list of inputs
 */

static PyObject *__pyx_pf_4msyd_2io_26extract_syri_regions_to_list_from_files(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fins, PyObject *__pyx_v_qrynames, PyObject *__pyx_v_cores, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *__pyx_cur_scope;
  PyObject *__pyx_v_partial = NULL;
  PyObject *__pyx_v_syns = NULL;
  PyObject *__pyx_v_pool = NULL;
  PyObject *__pyx_9genexpr25__pyx_v_fin = NULL;
  PyObject *__pyx_9genexpr25__pyx_v_qryname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extract_syri_regions_to_list_from_files", 0);
  __pyx_cur_scope = (struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *)__pyx_tp_new_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files(__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 928, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_kwargs = __pyx_v_kwargs;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_kwargs);

  /* "msyd/pyxfiles/io.pyx":932
 *     `extract_syri_regions`, but for processing a list of inputs
 *     """
 *     if len(fins) != len(qrynames):             # <<<<<<<<<<<<<<
 *         logger.error(f"Infiles and qrynames lists lengths not matching. Offending lists: {fins} and {qrynames}")
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_fins); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_t_2 = PyObject_Length(__pyx_v_qrynames); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_1 != __pyx_t_2);
  if (__pyx_t_3) {

    /* "msyd/pyxfiles/io.pyx":933
 *     """
 *     if len(fins) != len(qrynames):
 *         logger.error(f"Infiles and qrynames lists lengths not matching. Offending lists: {fins} and {qrynames}")             # <<<<<<<<<<<<<<
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Infiles_and_qrynames_lists_lengt);
    __pyx_t_2 += 66;
    __Pyx_GIVEREF(__pyx_kp_u_Infiles_and_qrynames_lists_lengt);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Infiles_and_qrynames_lists_lengt);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_fins, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_kp_u_and);
    __pyx_t_2 += 5;
    __Pyx_GIVEREF(__pyx_kp_u_and);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_and);
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_v_qrynames, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_7;
    __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_5, 4, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_9 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "msyd/pyxfiles/io.pyx":932
 *     `extract_syri_regions`, but for processing a list of inputs
 *     """
 *     if len(fins) != len(qrynames):             # <<<<<<<<<<<<<<
 *         logger.error(f"Infiles and qrynames lists lengths not matching. Offending lists: {fins} and {qrynames}")
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)
 */
  }

  /* "msyd/pyxfiles/io.pyx":934
 *     if len(fins) != len(qrynames):
 *         logger.error(f"Infiles and qrynames lists lengths not matching. Offending lists: {fins} and {qrynames}")
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     if cores == 1:
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_39extract_syri_regions_to_list_from_files_lambda1, 0, __pyx_n_s_extract_syri_regions_to_list_fro, ((PyObject*)__pyx_cur_scope), __pyx_n_s_msyd_io, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_partial = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":936
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)
 * 
 *     if cores == 1:             # <<<<<<<<<<<<<<
 *         syns = [partial(fin, qryname) for fin, qryname in zip(fins, qrynames)]
 *     else:
 */
  __pyx_t_3 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_cores, __pyx_int_1, 1, 0)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 936, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "msyd/pyxfiles/io.pyx":937
 * 
 *     if cores == 1:
 *         syns = [partial(fin, qryname) for fin, qryname in zip(fins, qrynames)]             # <<<<<<<<<<<<<<
 *     else:
 *         with Pool(cores) as pool:
 */
    { /* enter inner scope */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_fins);
      __Pyx_GIVEREF(__pyx_v_fins);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_fins)) __PYX_ERR(0, 937, __pyx_L7_error);
      __Pyx_INCREF(__pyx_v_qrynames);
      __Pyx_GIVEREF(__pyx_v_qrynames);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_qrynames)) __PYX_ERR(0, 937, __pyx_L7_error);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6);
        __pyx_t_2 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_2 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 937, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 937, __pyx_L7_error)
              #endif
              if (__pyx_t_2 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_8); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 937, __pyx_L7_error)
            #else
            __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 937, __pyx_L7_error)
              #endif
              if (__pyx_t_2 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_8); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 937, __pyx_L7_error)
            #else
            __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_10(__pyx_t_6);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 937, __pyx_L7_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
          PyObject* sequence = __pyx_t_8;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 937, __pyx_L7_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          #else
          __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 937, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_12 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 937, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12);
          index = 0; __pyx_t_5 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_5)) goto __pyx_L10_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L10_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_11);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 937, __pyx_L7_error)
          __pyx_t_13 = NULL;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L11_unpacking_done;
          __pyx_L10_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 937, __pyx_L7_error)
          __pyx_L11_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr25__pyx_v_fin, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_9genexpr25__pyx_v_qryname, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_8 = __pyx_lambda_funcdef_lambda1(__pyx_v_partial, __pyx_9genexpr25__pyx_v_fin, __pyx_9genexpr25__pyx_v_qryname); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 937, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_9genexpr25__pyx_v_fin); __pyx_9genexpr25__pyx_v_fin = 0;
      __Pyx_XDECREF(__pyx_9genexpr25__pyx_v_qryname); __pyx_9genexpr25__pyx_v_qryname = 0;
      goto __pyx_L13_exit_scope;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_9genexpr25__pyx_v_fin); __pyx_9genexpr25__pyx_v_fin = 0;
      __Pyx_XDECREF(__pyx_9genexpr25__pyx_v_qryname); __pyx_9genexpr25__pyx_v_qryname = 0;
      goto __pyx_L1_error;
      __pyx_L13_exit_scope:;
    } /* exit inner scope */
    __pyx_v_syns = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "msyd/pyxfiles/io.pyx":936
 *     partial = lambda x, qryname: extract_syri_regions_from_file(x, qryorg=qryname, **kwargs)
 * 
 *     if cores == 1:             # <<<<<<<<<<<<<<
 *         syns = [partial(fin, qryname) for fin, qryname in zip(fins, qrynames)]
 *     else:
 */
    goto __pyx_L4;
  }

  /* "msyd/pyxfiles/io.pyx":939
 *         syns = [partial(fin, qryname) for fin, qryname in zip(fins, qrynames)]
 *     else:
 *         with Pool(cores) as pool:             # <<<<<<<<<<<<<<
 *             syns = pool.map(partial, fins)
 * 
 */
  /*else*/ {
    /*with:*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Pool); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_cores};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_14 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 939, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 939, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      __pyx_t_9 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_9 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_t_8 = __pyx_t_6;
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_17);
          /*try:*/ {
            __pyx_v_pool = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "msyd/pyxfiles/io.pyx":940
 *     else:
 *         with Pool(cores) as pool:
 *             syns = pool.map(partial, fins)             # <<<<<<<<<<<<<<
 * 
 *     return syns
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_map); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 940, __pyx_L18_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_6 = NULL;
            __pyx_t_9 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_9 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_partial, __pyx_v_fins};
              __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 940, __pyx_L18_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __pyx_v_syns = __pyx_t_8;
            __pyx_t_8 = 0;

            /* "msyd/pyxfiles/io.pyx":939
 *         syns = [partial(fin, qryname) for fin, qryname in zip(fins, qrynames)]
 *     else:
 *         with Pool(cores) as pool:             # <<<<<<<<<<<<<<
 *             syns = pool.map(partial, fins)
 * 
 */
          }
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          goto __pyx_L23_try_end;
          __pyx_L18_error:;
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("msyd.io.extract_syri_regions_to_list_from_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_4, &__pyx_t_6) < 0) __PYX_ERR(0, 939, __pyx_L20_except_error)
            __Pyx_XGOTREF(__pyx_t_8);
            __Pyx_XGOTREF(__pyx_t_4);
            __Pyx_XGOTREF(__pyx_t_6);
            __pyx_t_11 = PyTuple_Pack(3, __pyx_t_8, __pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 939, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_11, NULL);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 939, __pyx_L20_except_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            if (__pyx_t_3 < 0) __PYX_ERR(0, 939, __pyx_L20_except_error)
            __pyx_t_19 = (!__pyx_t_3);
            if (unlikely(__pyx_t_19)) {
              __Pyx_GIVEREF(__pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_6);
              __Pyx_ErrRestoreWithState(__pyx_t_8, __pyx_t_4, __pyx_t_6);
              __pyx_t_8 = 0; __pyx_t_4 = 0; __pyx_t_6 = 0; 
              __PYX_ERR(0, 939, __pyx_L20_except_error)
            }
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            goto __pyx_L19_exception_handled;
          }
          __pyx_L20_except_error:;
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          goto __pyx_L1_error;
          __pyx_L19_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          __pyx_L23_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_14) {
            __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_tuple__7, NULL);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 939, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      goto __pyx_L27;
      __pyx_L14_error:;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      goto __pyx_L1_error;
      __pyx_L27:;
    }
  }
  __pyx_L4:;

  /* "msyd/pyxfiles/io.pyx":942
 *             syns = pool.map(partial, fins)
 * 
 *     return syns             # <<<<<<<<<<<<<<
 *     #return [extract_syri_regions(fin, **kwargs,\
 *     #        #reforg=fin.split('/')[-1].split('_')[0],\
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_syns)) { __Pyx_RaiseUnboundLocalError("syns"); __PYX_ERR(0, 942, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_v_syns);
  __pyx_r = __pyx_v_syns;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":928
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     `extract_syri_regions`, but for processing a list of inputs
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("msyd.io.extract_syri_regions_to_list_from_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_partial);
  __Pyx_XDECREF(__pyx_v_syns);
  __Pyx_XDECREF(__pyx_v_pool);
  __Pyx_XDECREF(__pyx_9genexpr25__pyx_v_fin);
  __Pyx_XDECREF(__pyx_9genexpr25__pyx_v_qryname);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":948
 *     #        for fin in fins]
 * 
 * cpdef void save_to_vcf(syns: Union[str, os.PathLike], outf: Union[str, os.PathLike], ref=None, cores=1, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     #TODO add functionality to incorporate reference information as optional argument
 *     cdef:
 */

static PyObject *__pyx_pw_4msyd_2io_29save_to_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static void __pyx_f_4msyd_2io_save_to_vcf(PyObject *__pyx_v_syns, PyObject *__pyx_v_outf, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_save_to_vcf *__pyx_optional_args) {
  PyObject *__pyx_v_ref = ((PyObject *)Py_None);
  PyObject *__pyx_v_add_cigar = ((PyObject *)Py_False);
  PyObject *__pyx_v_add_identity = ((PyObject *)Py_True);
  PyObject *__pyx_v_out = 0;
  int __pyx_v_corecounter;
  int __pyx_v_crosscounter;
  PyObject *__pyx_v_orgs = 0;
  int __pyx_v_orgsc;
  PyObject *__pyx_v_header_chrs = 0;
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_org = NULL;
  PyObject *__pyx_v_syn = NULL;
  PyObject *__pyx_v_rec = NULL;
  PyObject *__pyx_v_chrom = NULL;
  PyObject *__pyx_v_rng = NULL;
  PyObject *__pyx_v_cg = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_to_vcf", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_ref = __pyx_optional_args->ref;
      if (__pyx_optional_args->__pyx_n > 2) {
        __pyx_v_add_cigar = __pyx_optional_args->add_cigar;
        if (__pyx_optional_args->__pyx_n > 3) {
          __pyx_v_add_identity = __pyx_optional_args->add_identity;
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_ref);

  /* "msyd/pyxfiles/io.pyx":951
 *     #TODO add functionality to incorporate reference information as optional argument
 *     cdef:
 *         out = pysam.VariantFile(outf, 'w')             # <<<<<<<<<<<<<<
 *         int corecounter = 1 # 1-based region indexing
 *         int crosscounter = 1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pysam); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_VariantFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_outf, __pyx_n_u_w};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_out = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":952
 *     cdef:
 *         out = pysam.VariantFile(outf, 'w')
 *         int corecounter = 1 # 1-based region indexing             # <<<<<<<<<<<<<<
 *         int crosscounter = 1
 *         # ensure consistent, alphabetical sorting of organisms
 */
  __pyx_v_corecounter = 1;

  /* "msyd/pyxfiles/io.pyx":953
 *         out = pysam.VariantFile(outf, 'w')
 *         int corecounter = 1 # 1-based region indexing
 *         int crosscounter = 1             # <<<<<<<<<<<<<<
 *         # ensure consistent, alphabetical sorting of organisms
 *         orgs = sorted(util.get_orgs_from_df(syns))
 */
  __pyx_v_crosscounter = 1;

  /* "msyd/pyxfiles/io.pyx":955
 *         int crosscounter = 1
 *         # ensure consistent, alphabetical sorting of organisms
 *         orgs = sorted(util.get_orgs_from_df(syns))             # <<<<<<<<<<<<<<
 *         int orgsc = len(orgs)
 *         header_chrs = set() # do dynamically in python, hopefully more efficiently than looping twice
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_util); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_orgs_from_df); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_syns};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_v_orgs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":956
 *         # ensure consistent, alphabetical sorting of organisms
 *         orgs = sorted(util.get_orgs_from_df(syns))
 *         int orgsc = len(orgs)             # <<<<<<<<<<<<<<
 *         header_chrs = set() # do dynamically in python, hopefully more efficiently than looping twice
 * 
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_orgs); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_v_orgsc = __pyx_t_7;

  /* "msyd/pyxfiles/io.pyx":957
 *         orgs = sorted(util.get_orgs_from_df(syns))
 *         int orgsc = len(orgs)
 *         header_chrs = set() # do dynamically in python, hopefully more efficiently than looping twice             # <<<<<<<<<<<<<<
 * 
 *     # prepare appropriate header file
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_header_chrs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":960
 * 
 *     # prepare appropriate header file
 *     for line in HEADER.splitlines():             # <<<<<<<<<<<<<<
 *         out.header.add_line(line)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HEADER); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_splitlines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 960, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 960, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 960, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 960, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 960, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 960, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_line, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":961
 *     # prepare appropriate header file
 *     for line in HEADER.splitlines():
 *         out.header.add_line(line)             # <<<<<<<<<<<<<<
 * 
 *     if ref and type(ref) != dict:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_header); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_add_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_line};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":960
 * 
 *     # prepare appropriate header file
 *     for line in HEADER.splitlines():             # <<<<<<<<<<<<<<
 *         out.header.add_line(line)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":963
 *         out.header.add_line(line)
 * 
 *     if ref and type(ref) != dict:             # <<<<<<<<<<<<<<
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 963, __pyx_L1_error)
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_ref)), ((PyObject *)(&PyDict_Type)), Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __pyx_t_10;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_9) {

    /* "msyd/pyxfiles/io.pyx":964
 * 
 *     if ref and type(ref) != dict:
 *         logger.info("Reading in Reference Fasta")             # <<<<<<<<<<<<<<
 *         ref = readfasta(ref)
 *     elif not ref:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_u_Reading_in_Reference_Fasta};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":965
 *     if ref and type(ref) != dict:
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)             # <<<<<<<<<<<<<<
 *     elif not ref:
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_readfasta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_ref};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_ref, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":963
 *         out.header.add_line(line)
 * 
 *     if ref and type(ref) != dict:             # <<<<<<<<<<<<<<
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 */
    goto __pyx_L6;
  }

  /* "msyd/pyxfiles/io.pyx":966
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 *     elif not ref:             # <<<<<<<<<<<<<<
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 966, __pyx_L1_error)
  __pyx_t_10 = (!__pyx_t_9);
  if (__pyx_t_10) {

    /* "msyd/pyxfiles/io.pyx":967
 *         ref = readfasta(ref)
 *     elif not ref:
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")             # <<<<<<<<<<<<<<
 * 
 *     #out.header.add_samples(util.get_orgs_from_df(syns)) # according to the documentation, this works, but the function doesn't seem to exist...
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_No_Reference_specified_not_savin};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":966
 *         logger.info("Reading in Reference Fasta")
 *         ref = readfasta(ref)
 *     elif not ref:             # <<<<<<<<<<<<<<
 *         logger.warning("No Reference specified, not saving Ref Sequence in VCF!")
 * 
 */
  }
  __pyx_L6:;

  /* "msyd/pyxfiles/io.pyx":970
 * 
 *     #out.header.add_samples(util.get_orgs_from_df(syns)) # according to the documentation, this works, but the function doesn't seem to exist...
 *     for org in orgs:             # <<<<<<<<<<<<<<
 *         out.header.add_sample(org)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_orgs)) || PyTuple_CheckExact(__pyx_v_orgs)) {
    __pyx_t_3 = __pyx_v_orgs; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_orgs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 970, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 970, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 970, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 970, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 970, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 970, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_org, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":971
 *     #out.header.add_samples(util.get_orgs_from_df(syns)) # according to the documentation, this works, but the function doesn't seem to exist...
 *     for org in orgs:
 *         out.header.add_sample(org)             # <<<<<<<<<<<<<<
 * 
 *     # add each pansyn object
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_sample); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_org};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":970
 * 
 *     #out.header.add_samples(util.get_orgs_from_df(syns)) # according to the documentation, this works, but the function doesn't seem to exist...
 *     for org in orgs:             # <<<<<<<<<<<<<<
 *         out.header.add_sample(org)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":974
 * 
 *     # add each pansyn object
 *     for syn in syns.iterrows():             # <<<<<<<<<<<<<<
 *         syn = syn[1][0]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_syns, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = __pyx_t_3; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 974, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 974, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 974, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 974, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 974, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_1);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 974, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_syn, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":975
 *     # add each pansyn object
 *     for syn in syns.iterrows():
 *         syn = syn[1][0]             # <<<<<<<<<<<<<<
 * 
 *         rec = out.new_record()
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_syn, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_syn, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":977
 *         syn = syn[1][0]
 * 
 *         rec = out.new_record()             # <<<<<<<<<<<<<<
 *         # instantiate empty, then fill later
 *         # instantiating with keyword arguments is unstable according to the documentation
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_new_record); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_rec, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":980
 *         # instantiate empty, then fill later
 *         # instantiating with keyword arguments is unstable according to the documentation
 *         rec.start = syn.ref.start             # <<<<<<<<<<<<<<
 *         rec.pos = syn.ref.start
 *         ## Chr needs to be a number, format it:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_start, __pyx_t_3) < 0) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":981
 *         # instantiating with keyword arguments is unstable according to the documentation
 *         rec.start = syn.ref.start
 *         rec.pos = syn.ref.start             # <<<<<<<<<<<<<<
 *         ## Chr needs to be a number, format it:
 *         #match = re.fullmatch(r"\D*?(\d+)\D*", syn.ref.chr)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_pos, __pyx_t_5) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":990
 * 
 *         ## store Chr as string for now, maybe change later
 *         chrom = syn.ref.chr             # <<<<<<<<<<<<<<
 *         if chrom not in header_chrs:
 *             #logger.info(f"save_to_vcf Adding {chrom} to header")
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_chr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_chrom, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":991
 *         ## store Chr as string for now, maybe change later
 *         chrom = syn.ref.chr
 *         if chrom not in header_chrs:             # <<<<<<<<<<<<<<
 *             #logger.info(f"save_to_vcf Adding {chrom} to header")
 *             header_chrs.add(chrom)
 */
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_v_chrom, __pyx_v_header_chrs, Py_NE)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 991, __pyx_L1_error)
    if (__pyx_t_10) {

      /* "msyd/pyxfiles/io.pyx":993
 *         if chrom not in header_chrs:
 *             #logger.info(f"save_to_vcf Adding {chrom} to header")
 *             header_chrs.add(chrom)             # <<<<<<<<<<<<<<
 *             if ref:
 *                 # add length if it is known from the reference
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_header_chrs, __pyx_n_s_add); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_chrom};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 993, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":994
 *             #logger.info(f"save_to_vcf Adding {chrom} to header")
 *             header_chrs.add(chrom)
 *             if ref:             # <<<<<<<<<<<<<<
 *                 # add length if it is known from the reference
 *                 out.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))
 */
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 994, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "msyd/pyxfiles/io.pyx":996
 *             if ref:
 *                 # add length if it is known from the reference
 *                 out.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))             # <<<<<<<<<<<<<<
 *             else:
 *                 out.header.add_line("##contig=<ID={}>".format(chrom))
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_header); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_add_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID_length, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_v_chrom); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = PyObject_Length(__pyx_t_12); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_v_chrom, __pyx_t_12};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 996, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_5};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "msyd/pyxfiles/io.pyx":994
 *             #logger.info(f"save_to_vcf Adding {chrom} to header")
 *             header_chrs.add(chrom)
 *             if ref:             # <<<<<<<<<<<<<<
 *                 # add length if it is known from the reference
 *                 out.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))
 */
        goto __pyx_L15;
      }

      /* "msyd/pyxfiles/io.pyx":998
 *                 out.header.add_line("##contig=<ID={},length={}>".format(chrom, len(ref[chrom])))
 *             else:
 *                 out.header.add_line("##contig=<ID={}>".format(chrom))             # <<<<<<<<<<<<<<
 * 
 *         rec.chrom = chrom
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_header); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_add_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_contig_ID, __pyx_n_s_format); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_v_chrom};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_2};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_L15:;

      /* "msyd/pyxfiles/io.pyx":991
 *         ## store Chr as string for now, maybe change later
 *         chrom = syn.ref.chr
 *         if chrom not in header_chrs:             # <<<<<<<<<<<<<<
 *             #logger.info(f"save_to_vcf Adding {chrom} to header")
 *             header_chrs.add(chrom)
 */
    }

    /* "msyd/pyxfiles/io.pyx":1000
 *                 out.header.add_line("##contig=<ID={}>".format(chrom))
 * 
 *         rec.chrom = chrom             # <<<<<<<<<<<<<<
 * 
 *         rec.stop = syn.ref.end # apparently this exists? what does it do?
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_chrom, __pyx_v_chrom) < 0) __PYX_ERR(0, 1000, __pyx_L1_error)

    /* "msyd/pyxfiles/io.pyx":1002
 *         rec.chrom = chrom
 * 
 *         rec.stop = syn.ref.end # apparently this exists? what does it do?             # <<<<<<<<<<<<<<
 *         if syn.get_degree() == orgsc:
 *             if ref:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_end); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_stop, __pyx_t_5) < 0) __PYX_ERR(0, 1002, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "msyd/pyxfiles/io.pyx":1003
 * 
 *         rec.stop = syn.ref.end # apparently this exists? what does it do?
 *         if syn.get_degree() == orgsc:             # <<<<<<<<<<<<<<
 *             if ref:
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_get_degree); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_orgsc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {

      /* "msyd/pyxfiles/io.pyx":1004
 *         rec.stop = syn.ref.end # apparently this exists? what does it do?
 *         if syn.get_degree() == orgsc:
 *             if ref:             # <<<<<<<<<<<<<<
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 *             else:
 */
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1004, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "msyd/pyxfiles/io.pyx":1005
 *         if syn.get_degree() == orgsc:
 *             if ref:
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]             # <<<<<<<<<<<<<<
 *             else:
 *                 rec.alleles = ["<SYN>", "<CORESYN>"]
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_5);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_5)) __PYX_ERR(0, 1005, __pyx_L1_error);
        __Pyx_INCREF(__pyx_kp_u_CORESYN);
        __Pyx_GIVEREF(__pyx_kp_u_CORESYN);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_CORESYN)) __PYX_ERR(0, 1005, __pyx_L1_error);
        __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_2) < 0) __PYX_ERR(0, 1005, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":1004
 *         rec.stop = syn.ref.end # apparently this exists? what does it do?
 *         if syn.get_degree() == orgsc:
 *             if ref:             # <<<<<<<<<<<<<<
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 *             else:
 */
        goto __pyx_L17;
      }

      /* "msyd/pyxfiles/io.pyx":1007
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 *             else:
 *                 rec.alleles = ["<SYN>", "<CORESYN>"]             # <<<<<<<<<<<<<<
 *             rec.id = "CORESYN{}".format(corecounter)
 *             corecounter += 1
 */
      /*else*/ {
        __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1007, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_kp_u_SYN_2);
        __Pyx_GIVEREF(__pyx_kp_u_SYN_2);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_SYN_2)) __PYX_ERR(0, 1007, __pyx_L1_error);
        __Pyx_INCREF(__pyx_kp_u_CORESYN);
        __Pyx_GIVEREF(__pyx_kp_u_CORESYN);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_CORESYN)) __PYX_ERR(0, 1007, __pyx_L1_error);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_2) < 0) __PYX_ERR(0, 1007, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L17:;

      /* "msyd/pyxfiles/io.pyx":1008
 *             else:
 *                 rec.alleles = ["<SYN>", "<CORESYN>"]
 *             rec.id = "CORESYN{}".format(corecounter)             # <<<<<<<<<<<<<<
 *             corecounter += 1
 *         else:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_CORESYN_2, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_corecounter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_id, __pyx_t_2) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":1009
 *                 rec.alleles = ["<SYN>", "<CORESYN>"]
 *             rec.id = "CORESYN{}".format(corecounter)
 *             corecounter += 1             # <<<<<<<<<<<<<<
 *         else:
 *             if ref:
 */
      __pyx_v_corecounter = (__pyx_v_corecounter + 1);

      /* "msyd/pyxfiles/io.pyx":1003
 * 
 *         rec.stop = syn.ref.end # apparently this exists? what does it do?
 *         if syn.get_degree() == orgsc:             # <<<<<<<<<<<<<<
 *             if ref:
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CORESYN>"]
 */
      goto __pyx_L16;
    }

    /* "msyd/pyxfiles/io.pyx":1011
 *             corecounter += 1
 *         else:
 *             if ref:             # <<<<<<<<<<<<<<
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]
 *             else:
 */
    /*else*/ {
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_ref); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1011, __pyx_L1_error)
      if (__pyx_t_10) {

        /* "msyd/pyxfiles/io.pyx":1012
 *         else:
 *             if ref:
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]             # <<<<<<<<<<<<<<
 *             else:
 *                 rec.alleles = ["<SYN>", "<CROSSSYN>"]
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_chrom); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_ref, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_3);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error);
        __Pyx_INCREF(__pyx_kp_u_CROSSSYN);
        __Pyx_GIVEREF(__pyx_kp_u_CROSSSYN);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_CROSSSYN)) __PYX_ERR(0, 1012, __pyx_L1_error);
        __pyx_t_3 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_2) < 0) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":1011
 *             corecounter += 1
 *         else:
 *             if ref:             # <<<<<<<<<<<<<<
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]
 *             else:
 */
        goto __pyx_L18;
      }

      /* "msyd/pyxfiles/io.pyx":1014
 *                 rec.alleles = [ref[rec.chrom][rec.start], "<CROSSSYN>"]
 *             else:
 *                 rec.alleles = ["<SYN>", "<CROSSSYN>"]             # <<<<<<<<<<<<<<
 *             rec.id = "CROSSSYN{}".format(crosscounter)
 *             crosscounter += 1
 */
      /*else*/ {
        __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1014, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_kp_u_SYN_2);
        __Pyx_GIVEREF(__pyx_kp_u_SYN_2);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_SYN_2)) __PYX_ERR(0, 1014, __pyx_L1_error);
        __Pyx_INCREF(__pyx_kp_u_CROSSSYN);
        __Pyx_GIVEREF(__pyx_kp_u_CROSSSYN);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_CROSSSYN)) __PYX_ERR(0, 1014, __pyx_L1_error);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_alleles, __pyx_t_2) < 0) __PYX_ERR(0, 1014, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L18:;

      /* "msyd/pyxfiles/io.pyx":1015
 *             else:
 *                 rec.alleles = ["<SYN>", "<CROSSSYN>"]
 *             rec.id = "CROSSSYN{}".format(crosscounter)             # <<<<<<<<<<<<<<
 *             crosscounter += 1
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_CROSSSYN_2, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_crosscounter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_rec, __pyx_n_s_id, __pyx_t_2) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":1016
 *                 rec.alleles = ["<SYN>", "<CROSSSYN>"]
 *             rec.id = "CROSSSYN{}".format(crosscounter)
 *             crosscounter += 1             # <<<<<<<<<<<<<<
 * 
 *         #rec.info['NS'] = syn.get_degree() # update NS column, include not only orgs in sample now
 */
      __pyx_v_crosscounter = (__pyx_v_crosscounter + 1);
    }
    __pyx_L16:;

    /* "msyd/pyxfiles/io.pyx":1021
 * 
 *         # input the values for every organism
 *         for org in orgs:             # <<<<<<<<<<<<<<
 *             if org in syn.get_orgs():
 *                 rng = syn.ranges_dict[org]
 */
    if (likely(PyList_CheckExact(__pyx_v_orgs)) || PyTuple_CheckExact(__pyx_v_orgs)) {
      __pyx_t_2 = __pyx_v_orgs; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_13 = 0;
      __pyx_t_15 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_orgs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_15 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1021, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_15)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
            #endif
            if (__pyx_t_13 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
            #endif
            if (__pyx_t_13 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1021, __pyx_L1_error)
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_15(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1021, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_org, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":1022
 *         # input the values for every organism
 *         for org in orgs:
 *             if org in syn.get_orgs():             # <<<<<<<<<<<<<<
 *                 rng = syn.ranges_dict[org]
 *                 ## comment out chr to int conversion for now
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_get_orgs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      __pyx_t_4 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_v_org, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_10) {

        /* "msyd/pyxfiles/io.pyx":1023
 *         for org in orgs:
 *             if org in syn.get_orgs():
 *                 rng = syn.ranges_dict[org]             # <<<<<<<<<<<<<<
 *                 ## comment out chr to int conversion for now
 *                 # Chr needs to be a number, format it:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1023, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_org); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1023, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_rng, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "msyd/pyxfiles/io.pyx":1034
 *                 #else:
 *                 #    chrom = int(match[1])
 *                 rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})             # <<<<<<<<<<<<<<
 * 
 *                 if syn.cigars_dict:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_org); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_SYN, __pyx_int_1) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_chr); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_CHR, __pyx_t_12) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_start); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_START, __pyx_t_12) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_rng, __pyx_n_s_end); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_END, __pyx_t_12) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1034, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "msyd/pyxfiles/io.pyx":1036
 *                 rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 * 
 *                 if syn.cigars_dict:             # <<<<<<<<<<<<<<
 *                     cg = syn.cigars_dict[org]
 *                     if add_cigar:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_cigars_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1036, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1036, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_10) {

          /* "msyd/pyxfiles/io.pyx":1037
 * 
 *                 if syn.cigars_dict:
 *                     cg = syn.cigars_dict[org]             # <<<<<<<<<<<<<<
 *                     if add_cigar:
 *                         rec.samples[org].update({'CG': cg.to_string()})
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_cigars_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1037, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_org); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF_SET(__pyx_v_cg, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "msyd/pyxfiles/io.pyx":1038
 *                 if syn.cigars_dict:
 *                     cg = syn.cigars_dict[org]
 *                     if add_cigar:             # <<<<<<<<<<<<<<
 *                         rec.samples[org].update({'CG': cg.to_string()})
 *                     if add_identity:
 */
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_add_cigar); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1038, __pyx_L1_error)
          if (__pyx_t_10) {

            /* "msyd/pyxfiles/io.pyx":1039
 *                     cg = syn.cigars_dict[org]
 *                     if add_cigar:
 *                         rec.samples[org].update({'CG': cg.to_string()})             # <<<<<<<<<<<<<<
 *                     if add_identity:
 *                         rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1039, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_org); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1039, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1039, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1039, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_to_string); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1039, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_16 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};
              __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1039, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            }
            if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_CG, __pyx_t_12) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1039, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "msyd/pyxfiles/io.pyx":1038
 *                 if syn.cigars_dict:
 *                     cg = syn.cigars_dict[org]
 *                     if add_cigar:             # <<<<<<<<<<<<<<
 *                         rec.samples[org].update({'CG': cg.to_string()})
 *                     if add_identity:
 */
          }

          /* "msyd/pyxfiles/io.pyx":1040
 *                     if add_cigar:
 *                         rec.samples[org].update({'CG': cg.to_string()})
 *                     if add_identity:             # <<<<<<<<<<<<<<
 *                         rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 *             else:
 */
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_add_identity); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1040, __pyx_L1_error)
          if (__pyx_t_10) {

            /* "msyd/pyxfiles/io.pyx":1041
 *                         rec.samples[org].update({'CG': cg.to_string()})
 *                     if add_identity:
 *                         rec.samples[org].update({'AI': int(cg.get_identity()*100)})             # <<<<<<<<<<<<<<
 *             else:
 *                 rec.samples[org].update({'SYN': 0})
 */
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_org); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_cg, __pyx_n_s_get_identity); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_16 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_16, NULL};
              __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1041, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            }
            __pyx_t_14 = __Pyx_PyInt_MultiplyObjC(__pyx_t_12, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyNumber_Int(__pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_AI, __pyx_t_12) < 0) __PYX_ERR(0, 1041, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = NULL;
            __pyx_t_4 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_4 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "msyd/pyxfiles/io.pyx":1040
 *                     if add_cigar:
 *                         rec.samples[org].update({'CG': cg.to_string()})
 *                     if add_identity:             # <<<<<<<<<<<<<<
 *                         rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 *             else:
 */
          }

          /* "msyd/pyxfiles/io.pyx":1036
 *                 rec.samples[org].update({'SYN':1, 'CHR':rng.chr, 'START': rng.start, 'END': rng.end})
 * 
 *                 if syn.cigars_dict:             # <<<<<<<<<<<<<<
 *                     cg = syn.cigars_dict[org]
 *                     if add_cigar:
 */
        }

        /* "msyd/pyxfiles/io.pyx":1022
 *         # input the values for every organism
 *         for org in orgs:
 *             if org in syn.get_orgs():             # <<<<<<<<<<<<<<
 *                 rng = syn.ranges_dict[org]
 *                 ## comment out chr to int conversion for now
 */
        goto __pyx_L21;
      }

      /* "msyd/pyxfiles/io.pyx":1043
 *                         rec.samples[org].update({'AI': int(cg.get_identity()*100)})
 *             else:
 *                 rec.samples[org].update({'SYN': 0})             # <<<<<<<<<<<<<<
 * 
 *         out.write(rec)
 */
      /*else*/ {
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_rec, __pyx_n_s_samples); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_org); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1043, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_11, __pyx_n_u_SYN, __pyx_int_0) < 0) __PYX_ERR(0, 1043, __pyx_L1_error)
        __pyx_t_12 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1043, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_L21:;

      /* "msyd/pyxfiles/io.pyx":1021
 * 
 *         # input the values for every organism
 *         for org in orgs:             # <<<<<<<<<<<<<<
 *             if org in syn.get_orgs():
 *                 rng = syn.ranges_dict[org]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":1045
 *                 rec.samples[org].update({'SYN': 0})
 * 
 *         out.write(rec)             # <<<<<<<<<<<<<<
 *     out.close()
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_write); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_rec};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1045, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "msyd/pyxfiles/io.pyx":974
 * 
 *     # add each pansyn object
 *     for syn in syns.iterrows():             # <<<<<<<<<<<<<<
 *         syn = syn[1][0]
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1046
 * 
 *         out.write(rec)
 *     out.close()             # <<<<<<<<<<<<<<
 * 
 * cpdef save_to_pff(df, buf, save_cigars=True, collapse_mesyn=True):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out, __pyx_n_s_close); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":948
 *     #        for fin in fins]
 * 
 * cpdef void save_to_vcf(syns: Union[str, os.PathLike], outf: Union[str, os.PathLike], ref=None, cores=1, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     #TODO add functionality to incorporate reference information as optional argument
 *     cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("msyd.io.save_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_v_orgs);
  __Pyx_XDECREF(__pyx_v_header_chrs);
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_org);
  __Pyx_XDECREF(__pyx_v_syn);
  __Pyx_XDECREF(__pyx_v_rec);
  __Pyx_XDECREF(__pyx_v_chrom);
  __Pyx_XDECREF(__pyx_v_rng);
  __Pyx_XDECREF(__pyx_v_cg);
  __Pyx_XDECREF(__pyx_v_ref);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_29save_to_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_4msyd_2io_29save_to_vcf = {"save_to_vcf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_29save_to_vcf, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_4msyd_2io_29save_to_vcf(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_syns = 0;
  PyObject *__pyx_v_outf = 0;
  PyObject *__pyx_v_ref = 0;
  PyObject *__pyx_v_cores = 0;
  PyObject *__pyx_v_add_cigar = 0;
  PyObject *__pyx_v_add_identity = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_to_vcf (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_syns,&__pyx_n_s_outf,&__pyx_n_s_ref,&__pyx_n_s_cores,&__pyx_n_s_add_cigar,&__pyx_n_s_add_identity,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_1));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[5] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_syns)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_outf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("save_to_vcf", 0, 2, 6, 1); __PYX_ERR(0, 948, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ref);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cores);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_cigar);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_identity);
          if (value) { values[5] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "save_to_vcf") < 0)) __PYX_ERR(0, 948, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_syns = values[0];
    __pyx_v_outf = values[1];
    __pyx_v_ref = values[2];
    __pyx_v_cores = values[3];
    __pyx_v_add_cigar = values[4];
    __pyx_v_add_identity = values[5];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_to_vcf", 0, 2, 6, __pyx_nargs); __PYX_ERR(0, 948, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.save_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_28save_to_vcf(__pyx_self, __pyx_v_syns, __pyx_v_outf, __pyx_v_ref, __pyx_v_cores, __pyx_v_add_cigar, __pyx_v_add_identity);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_28save_to_vcf(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_syns, PyObject *__pyx_v_outf, PyObject *__pyx_v_ref, PyObject *__pyx_v_cores, PyObject *__pyx_v_add_cigar, PyObject *__pyx_v_add_identity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_opt_args_4msyd_2io_save_to_vcf __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_to_vcf", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1.__pyx_n = 4;
  __pyx_t_1.ref = __pyx_v_ref;
  __pyx_t_1.cores = __pyx_v_cores;
  __pyx_t_1.add_cigar = __pyx_v_add_cigar;
  __pyx_t_1.add_identity = __pyx_v_add_identity;
  __pyx_f_4msyd_2io_save_to_vcf(__pyx_v_syns, __pyx_v_outf, 0, &__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_t_2 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("msyd.io.save_to_vcf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":1048
 *     out.close()
 * 
 * cpdef save_to_pff(df, buf, save_cigars=True, collapse_mesyn=True):             # <<<<<<<<<<<<<<
 *     """Takes a df containing `Pansyn` objects and writes them in pansynteny file format to `buf`.
 *     Can be used to print directly to a file, or to print or further process the output.
 */

static PyObject *__pyx_pw_4msyd_2io_31save_to_pff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_save_to_pff(PyObject *__pyx_v_df, PyObject *__pyx_v_buf, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_4msyd_2io_save_to_pff *__pyx_optional_args) {
  PyObject *__pyx_v_collapse_mesyn = ((PyObject *)Py_True);
  PyObject *__pyx_v_orgs = NULL;
  int __pyx_v_n;
  int __pyx_v_corecounter;
  int __pyx_v_mericounter;
  int __pyx_v_coreend;
  PyObject *__pyx_v_corechr = 0;
  PyObject *__pyx_v_syniter = NULL;
  PyObject *__pyx_v_mesyns = NULL;
  PyObject *__pyx_v_refmesyns = NULL;
  PyObject *__pyx_v_syn = NULL;
  PyObject *__pyx_v_mesyn = NULL;
  PyObject *__pyx_v_refmesyn = NULL;
  PyObject *__pyx_v_ref = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_to_pff", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 1) {
      __pyx_v_collapse_mesyn = __pyx_optional_args->collapse_mesyn;
    }
  }

  /* "msyd/pyxfiles/io.pyx":1053
 *     """
 *     # output organisms in lexicalic ordering
 *     orgs = sorted(util.get_orgs_from_df(df))             # <<<<<<<<<<<<<<
 *     cdef:
 *         int n = len(orgs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_orgs_from_df); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_df};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1053, __pyx_L1_error)
  __pyx_v_orgs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1055
 *     orgs = sorted(util.get_orgs_from_df(df))
 *     cdef:
 *         int n = len(orgs)             # <<<<<<<<<<<<<<
 *         int corecounter = 1
 *         int mericounter = 1
 */
  __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_orgs); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1055, __pyx_L1_error)
  __pyx_v_n = __pyx_t_7;

  /* "msyd/pyxfiles/io.pyx":1056
 *     cdef:
 *         int n = len(orgs)
 *         int corecounter = 1             # <<<<<<<<<<<<<<
 *         int mericounter = 1
 *         int coreend = 0
 */
  __pyx_v_corecounter = 1;

  /* "msyd/pyxfiles/io.pyx":1057
 *         int n = len(orgs)
 *         int corecounter = 1
 *         int mericounter = 1             # <<<<<<<<<<<<<<
 *         int coreend = 0
 *         str corechr = ''
 */
  __pyx_v_mericounter = 1;

  /* "msyd/pyxfiles/io.pyx":1058
 *         int corecounter = 1
 *         int mericounter = 1
 *         int coreend = 0             # <<<<<<<<<<<<<<
 *         str corechr = ''
 * 
 */
  __pyx_v_coreend = 0;

  /* "msyd/pyxfiles/io.pyx":1059
 *         int mericounter = 1
 *         int coreend = 0
 *         str corechr = ''             # <<<<<<<<<<<<<<
 * 
 *     buf.write("#CHR\tSTART\tEND\tANN\t")
 */
  __Pyx_INCREF(__pyx_kp_u__6);
  __pyx_v_corechr = __pyx_kp_u__6;

  /* "msyd/pyxfiles/io.pyx":1061
 *         str corechr = ''
 * 
 *     buf.write("#CHR\tSTART\tEND\tANN\t")             # <<<<<<<<<<<<<<
 *     buf.write("\t".join(orgs))
 *     buf.write("\n")
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_CHR_START_END_ANN};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1062
 * 
 *     buf.write("#CHR\tSTART\tEND\tANN\t")
 *     buf.write("\t".join(orgs))             # <<<<<<<<<<<<<<
 *     buf.write("\n")
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyUnicode_Join(__pyx_kp_u__14, __pyx_v_orgs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1063
 *     buf.write("#CHR\tSTART\tEND\tANN\t")
 *     buf.write("\t".join(orgs))
 *     buf.write("\n")             # <<<<<<<<<<<<<<
 * 
 *     syniter = df.iterrows()
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u__42};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1065
 *     buf.write("\n")
 * 
 *     syniter = df.iterrows()             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_df, __pyx_n_s_iterrows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_syniter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1067
 *     syniter = df.iterrows()
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         mesyns = []
 *         refmesyns = []
 */
  while (1) {

    /* "msyd/pyxfiles/io.pyx":1068
 * 
 *     while True:
 *         mesyns = []             # <<<<<<<<<<<<<<
 *         refmesyns = []
 *         syn = None
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_mesyns, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":1069
 *     while True:
 *         mesyns = []
 *         refmesyns = []             # <<<<<<<<<<<<<<
 *         syn = None
 *         try:
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_refmesyns, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "msyd/pyxfiles/io.pyx":1070
 *         mesyns = []
 *         refmesyns = []
 *         syn = None             # <<<<<<<<<<<<<<
 *         try:
 *             syn = next(syniter)[1][0]
 */
    __Pyx_INCREF(Py_None);
    __Pyx_XDECREF_SET(__pyx_v_syn, Py_None);

    /* "msyd/pyxfiles/io.pyx":1071
 *         refmesyns = []
 *         syn = None
 *         try:             # <<<<<<<<<<<<<<
 *             syn = next(syniter)[1][0]
 *             # get all mesyns, separate by those having a position on reference and those that don't
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "msyd/pyxfiles/io.pyx":1072
 *         syn = None
 *         try:
 *             syn = next(syniter)[1][0]             # <<<<<<<<<<<<<<
 *             # get all mesyns, separate by those having a position on reference and those that don't
 *             while syn.get_degree() < n:
 */
        __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_syniter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1072, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF_SET(__pyx_v_syn, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "msyd/pyxfiles/io.pyx":1074
 *             syn = next(syniter)[1][0]
 *             # get all mesyns, separate by those having a position on reference and those that don't
 *             while syn.get_degree() < n:             # <<<<<<<<<<<<<<
 *                 if syn.ref.org == "ref":
 *                     refmesyns.append(syn)
 */
        while (1) {
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_get_degree); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1074, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1074, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1074, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (!__pyx_t_11) break;

          /* "msyd/pyxfiles/io.pyx":1075
 *             # get all mesyns, separate by those having a position on reference and those that don't
 *             while syn.get_degree() < n:
 *                 if syn.ref.org == "ref":             # <<<<<<<<<<<<<<
 *                     refmesyns.append(syn)
 *                 else:
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_org); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_11 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_ref, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1075, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_11) {

            /* "msyd/pyxfiles/io.pyx":1076
 *             while syn.get_degree() < n:
 *                 if syn.ref.org == "ref":
 *                     refmesyns.append(syn)             # <<<<<<<<<<<<<<
 *                 else:
 *                     mesyns.append(syn)
 */
            __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_refmesyns, __pyx_v_syn); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1076, __pyx_L5_error)

            /* "msyd/pyxfiles/io.pyx":1075
 *             # get all mesyns, separate by those having a position on reference and those that don't
 *             while syn.get_degree() < n:
 *                 if syn.ref.org == "ref":             # <<<<<<<<<<<<<<
 *                     refmesyns.append(syn)
 *                 else:
 */
            goto __pyx_L15;
          }

          /* "msyd/pyxfiles/io.pyx":1078
 *                     refmesyns.append(syn)
 *                 else:
 *                     mesyns.append(syn)             # <<<<<<<<<<<<<<
 *                 syn = next(syniter)[1][0]
 *         except StopIteration: # try/catch block internal, so things still get written after we run out of pansyn regions
 */
          /*else*/ {
            __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_mesyns, __pyx_v_syn); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1078, __pyx_L5_error)
          }
          __pyx_L15:;

          /* "msyd/pyxfiles/io.pyx":1079
 *                 else:
 *                     mesyns.append(syn)
 *                 syn = next(syniter)[1][0]             # <<<<<<<<<<<<<<
 *         except StopIteration: # try/catch block internal, so things still get written after we run out of pansyn regions
 *             pass
 */
          __pyx_t_4 = __Pyx_PyIter_Next(__pyx_v_syniter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1079, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1079, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1079, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF_SET(__pyx_v_syn, __pyx_t_4);
          __pyx_t_4 = 0;
        }

        /* "msyd/pyxfiles/io.pyx":1071
 *         refmesyns = []
 *         syn = None
 *         try:             # <<<<<<<<<<<<<<
 *             syn = next(syniter)[1][0]
 *             # get all mesyns, separate by those having a position on reference and those that don't
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "msyd/pyxfiles/io.pyx":1080
 *                     mesyns.append(syn)
 *                 syn = next(syniter)[1][0]
 *         except StopIteration: # try/catch block internal, so things still get written after we run out of pansyn regions             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
      __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
      if (__pyx_t_5) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;

      /* "msyd/pyxfiles/io.pyx":1071
 *         refmesyns = []
 *         syn = None
 *         try:             # <<<<<<<<<<<<<<
 *             syn = next(syniter)[1][0]
 *             # get all mesyns, separate by those having a position on reference and those that don't
 */
      __pyx_L7_except_error:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_L12_try_end:;
    }

    /* "msyd/pyxfiles/io.pyx":1086
 *         # write to the first position it can be
 *         # maybe this should be annotated for the entire range it can be instead (coreend+1:syn.start-1)
 *         if collapse_mesyn:             # <<<<<<<<<<<<<<
 *             if mesyns: # do not add anything if mesyns is empty
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))
 */
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_collapse_mesyn); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1086, __pyx_L1_error)
    if (__pyx_t_11) {

      /* "msyd/pyxfiles/io.pyx":1087
 *         # maybe this should be annotated for the entire range it can be instead (coreend+1:syn.start-1)
 *         if collapse_mesyn:
 *             if mesyns: # do not add anything if mesyns is empty             # <<<<<<<<<<<<<<
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))
 *                 write_pansyns(mesyns, buf, orgs)
 */
      __pyx_t_11 = (PyList_GET_SIZE(__pyx_v_mesyns) != 0);
      if (__pyx_t_11) {

        /* "msyd/pyxfiles/io.pyx":1088
 *         if collapse_mesyn:
 *             if mesyns: # do not add anything if mesyns is empty
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))             # <<<<<<<<<<<<<<
 *                 write_pansyns(mesyns, buf, orgs)
 *                 mericounter += len(mesyns)
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_coreend + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_coreend + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_n_u_MERISYN);
        __pyx_t_7 += 7;
        __Pyx_GIVEREF(__pyx_n_u_MERISYN);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_MERISYN);
        __pyx_t_14 = __Pyx_PyUnicode_From_int(__pyx_v_mericounter, 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_14);
        __pyx_t_14 = 0;
        __Pyx_INCREF(__pyx_kp_u__43);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__43);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__43);
        __pyx_t_15 = __Pyx_PyList_GET_SIZE(__pyx_v_mesyns); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1088, __pyx_L1_error)
        __pyx_t_14 = __Pyx_PyUnicode_From_Py_ssize_t(((__pyx_v_mericounter + __pyx_t_15) - 1), 0, ' ', 'd'); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_14);
        __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_7, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_corechr);
        __Pyx_GIVEREF(__pyx_v_corechr);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_corechr)) __PYX_ERR(0, 1088, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_3);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(0, 1088, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_12);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_12)) __PYX_ERR(0, 1088, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_14);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_14)) __PYX_ERR(0, 1088, __pyx_L1_error);
        __Pyx_INCREF(__pyx_kp_u__6);
        __Pyx_GIVEREF(__pyx_kp_u__6);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__6)) __PYX_ERR(0, 1088, __pyx_L1_error);
        __pyx_t_3 = 0;
        __pyx_t_12 = 0;
        __pyx_t_14 = 0;
        __pyx_t_14 = PyUnicode_Join(__pyx_kp_u__14, __pyx_t_1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1088, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_14};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1088, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "msyd/pyxfiles/io.pyx":1089
 *             if mesyns: # do not add anything if mesyns is empty
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))
 *                 write_pansyns(mesyns, buf, orgs)             # <<<<<<<<<<<<<<
 *                 mericounter += len(mesyns)
 *         else:
 */
        __pyx_t_4 = __pyx_f_4msyd_2io_write_pansyns(__pyx_v_mesyns, __pyx_v_buf, __pyx_v_orgs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1089, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "msyd/pyxfiles/io.pyx":1090
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))
 *                 write_pansyns(mesyns, buf, orgs)
 *                 mericounter += len(mesyns)             # <<<<<<<<<<<<<<
 *         else:
 *             for mesyn in mesyns:
 */
        __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_mesyns); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1090, __pyx_L1_error)
        __pyx_v_mericounter = (__pyx_v_mericounter + __pyx_t_7);

        /* "msyd/pyxfiles/io.pyx":1087
 *         # maybe this should be annotated for the entire range it can be instead (coreend+1:syn.start-1)
 *         if collapse_mesyn:
 *             if mesyns: # do not add anything if mesyns is empty             # <<<<<<<<<<<<<<
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))
 *                 write_pansyns(mesyns, buf, orgs)
 */
      }

      /* "msyd/pyxfiles/io.pyx":1086
 *         # write to the first position it can be
 *         # maybe this should be annotated for the entire range it can be instead (coreend+1:syn.start-1)
 *         if collapse_mesyn:             # <<<<<<<<<<<<<<
 *             if mesyns: # do not add anything if mesyns is empty
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}-{mericounter+len(mesyns)-1}", '']))
 */
      goto __pyx_L16;
    }

    /* "msyd/pyxfiles/io.pyx":1092
 *                 mericounter += len(mesyns)
 *         else:
 *             for mesyn in mesyns:             # <<<<<<<<<<<<<<
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}", '']))
 *                 write_pansyns([mesyn], buf, orgs)
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_mesyns; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_7 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1092, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1092, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1092, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_mesyn, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":1093
 *         else:
 *             for mesyn in mesyns:
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}", '']))             # <<<<<<<<<<<<<<
 *                 write_pansyns([mesyn], buf, orgs)
 *                 mericounter += 1
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_coreend + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_coreend + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyUnicode_From_int(__pyx_v_mericounter, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_n_u_MERISYN, __pyx_t_1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_corechr);
        __Pyx_GIVEREF(__pyx_v_corechr);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_corechr)) __PYX_ERR(0, 1093, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_12);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_12)) __PYX_ERR(0, 1093, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_3);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_3)) __PYX_ERR(0, 1093, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_16);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_16)) __PYX_ERR(0, 1093, __pyx_L1_error);
        __Pyx_INCREF(__pyx_kp_u__6);
        __Pyx_GIVEREF(__pyx_kp_u__6);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__6)) __PYX_ERR(0, 1093, __pyx_L1_error);
        __pyx_t_12 = 0;
        __pyx_t_3 = 0;
        __pyx_t_16 = 0;
        __pyx_t_16 = PyUnicode_Join(__pyx_kp_u__14, __pyx_t_1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_5 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_5 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_16};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1093, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "msyd/pyxfiles/io.pyx":1094
 *             for mesyn in mesyns:
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}", '']))
 *                 write_pansyns([mesyn], buf, orgs)             # <<<<<<<<<<<<<<
 *                 mericounter += 1
 * 
 */
        __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_mesyn);
        __Pyx_GIVEREF(__pyx_v_mesyn);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_mesyn)) __PYX_ERR(0, 1094, __pyx_L1_error);
        __pyx_t_14 = __pyx_f_4msyd_2io_write_pansyns(__pyx_t_2, __pyx_v_buf, __pyx_v_orgs); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1094, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "msyd/pyxfiles/io.pyx":1095
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}", '']))
 *                 write_pansyns([mesyn], buf, orgs)
 *                 mericounter += 1             # <<<<<<<<<<<<<<
 * 
 *         # write mesyn regions that have a position on reference at their appropriate position
 */
        __pyx_v_mericounter = (__pyx_v_mericounter + 1);

        /* "msyd/pyxfiles/io.pyx":1092
 *                 mericounter += len(mesyns)
 *         else:
 *             for mesyn in mesyns:             # <<<<<<<<<<<<<<
 *                 buf.write('\t'.join([corechr, str(coreend+1), str(coreend+1), f"MERISYN{mericounter}", '']))
 *                 write_pansyns([mesyn], buf, orgs)
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L16:;

    /* "msyd/pyxfiles/io.pyx":1098
 * 
 *         # write mesyn regions that have a position on reference at their appropriate position
 *         for refmesyn in refmesyns:             # <<<<<<<<<<<<<<
 *             ref = refmesyn.ref
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"MERISYN{mericounter}", '']))
 */
    __pyx_t_4 = __pyx_v_refmesyns; __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1098, __pyx_L1_error)
        #endif
        if (__pyx_t_7 >= __pyx_temp) break;
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_14 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_14); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 1098, __pyx_L1_error)
      #else
      __pyx_t_14 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1098, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_refmesyn, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "msyd/pyxfiles/io.pyx":1099
 *         # write mesyn regions that have a position on reference at their appropriate position
 *         for refmesyn in refmesyns:
 *             ref = refmesyn.ref             # <<<<<<<<<<<<<<
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"MERISYN{mericounter}", '']))
 *             write_pansyns([refmesyn], buf, orgs)
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_refmesyn, __pyx_n_s_ref); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1099, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_XDECREF_SET(__pyx_v_ref, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "msyd/pyxfiles/io.pyx":1100
 *         for refmesyn in refmesyns:
 *             ref = refmesyn.ref
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"MERISYN{mericounter}", '']))             # <<<<<<<<<<<<<<
 *             write_pansyns([refmesyn], buf, orgs)
 *             mericounter += 1
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_chr); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyUnicode_From_int(__pyx_v_mericounter, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_17 = __Pyx_PyUnicode_Concat(__pyx_n_u_MERISYN, __pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_16);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_16)) __PYX_ERR(0, 1100, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_12);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_12)) __PYX_ERR(0, 1100, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_17);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_17)) __PYX_ERR(0, 1100, __pyx_L1_error);
      __Pyx_INCREF(__pyx_kp_u__6);
      __Pyx_GIVEREF(__pyx_kp_u__6);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__6)) __PYX_ERR(0, 1100, __pyx_L1_error);
      __pyx_t_16 = 0;
      __pyx_t_3 = 0;
      __pyx_t_12 = 0;
      __pyx_t_17 = 0;
      __pyx_t_17 = PyUnicode_Join(__pyx_kp_u__14, __pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_17};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "msyd/pyxfiles/io.pyx":1101
 *             ref = refmesyn.ref
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"MERISYN{mericounter}", '']))
 *             write_pansyns([refmesyn], buf, orgs)             # <<<<<<<<<<<<<<
 *             mericounter += 1
 * 
 */
      __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_v_refmesyn);
      __Pyx_GIVEREF(__pyx_v_refmesyn);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_v_refmesyn)) __PYX_ERR(0, 1101, __pyx_L1_error);
      __pyx_t_2 = __pyx_f_4msyd_2io_write_pansyns(__pyx_t_14, __pyx_v_buf, __pyx_v_orgs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":1102
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"MERISYN{mericounter}", '']))
 *             write_pansyns([refmesyn], buf, orgs)
 *             mericounter += 1             # <<<<<<<<<<<<<<
 * 
 *         # write coresyn region
 */
      __pyx_v_mericounter = (__pyx_v_mericounter + 1);

      /* "msyd/pyxfiles/io.pyx":1098
 * 
 *         # write mesyn regions that have a position on reference at their appropriate position
 *         for refmesyn in refmesyns:             # <<<<<<<<<<<<<<
 *             ref = refmesyn.ref
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"MERISYN{mericounter}", '']))
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "msyd/pyxfiles/io.pyx":1105
 * 
 *         # write coresyn region
 *         if syn:             # <<<<<<<<<<<<<<
 *             ref = syn.ref
 *             coreend = ref.end
 */
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_syn); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 1105, __pyx_L1_error)
    if (__pyx_t_11) {

      /* "msyd/pyxfiles/io.pyx":1106
 *         # write coresyn region
 *         if syn:
 *             ref = syn.ref             # <<<<<<<<<<<<<<
 *             coreend = ref.end
 *             corechr = ref.chr
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_syn, __pyx_n_s_ref); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_ref, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "msyd/pyxfiles/io.pyx":1107
 *         if syn:
 *             ref = syn.ref
 *             coreend = ref.end             # <<<<<<<<<<<<<<
 *             corechr = ref.chr
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"CORESYN{corecounter}", '']))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_end); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1107, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_coreend = __pyx_t_5;

      /* "msyd/pyxfiles/io.pyx":1108
 *             ref = syn.ref
 *             coreend = ref.end
 *             corechr = ref.chr             # <<<<<<<<<<<<<<
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"CORESYN{corecounter}", '']))
 *             write_pansyns([syn], buf, orgs)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_chr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_4))) __PYX_ERR(0, 1108, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_corechr, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "msyd/pyxfiles/io.pyx":1109
 *             coreend = ref.end
 *             corechr = ref.chr
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"CORESYN{corecounter}", '']))             # <<<<<<<<<<<<<<
 *             write_pansyns([syn], buf, orgs)
 *             corecounter += 1
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_chr); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_start); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_ref, __pyx_n_s_end); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_17); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = __Pyx_PyUnicode_From_int(__pyx_v_corecounter, 0, ' ', 'd'); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_n_u_CORESYN_3, __pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = PyList_New(5); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_14);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_14)) __PYX_ERR(0, 1109, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_1);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_12);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_12)) __PYX_ERR(0, 1109, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_3);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error);
      __Pyx_INCREF(__pyx_kp_u__6);
      __Pyx_GIVEREF(__pyx_kp_u__6);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 4, __pyx_kp_u__6)) __PYX_ERR(0, 1109, __pyx_L1_error);
      __pyx_t_14 = 0;
      __pyx_t_1 = 0;
      __pyx_t_12 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__14, __pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_17 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_3};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "msyd/pyxfiles/io.pyx":1110
 *             corechr = ref.chr
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"CORESYN{corecounter}", '']))
 *             write_pansyns([syn], buf, orgs)             # <<<<<<<<<<<<<<
 *             corecounter += 1
 *         else:
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_syn);
      __Pyx_GIVEREF(__pyx_v_syn);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_syn)) __PYX_ERR(0, 1110, __pyx_L1_error);
      __pyx_t_2 = __pyx_f_4msyd_2io_write_pansyns(__pyx_t_4, __pyx_v_buf, __pyx_v_orgs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1110, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "msyd/pyxfiles/io.pyx":1111
 *             buf.write('\t'.join([ref.chr, str(ref.start), str(ref.end), f"CORESYN{corecounter}", '']))
 *             write_pansyns([syn], buf, orgs)
 *             corecounter += 1             # <<<<<<<<<<<<<<
 *         else:
 *             break
 */
      __pyx_v_corecounter = (__pyx_v_corecounter + 1);

      /* "msyd/pyxfiles/io.pyx":1105
 * 
 *         # write coresyn region
 *         if syn:             # <<<<<<<<<<<<<<
 *             ref = syn.ref
 *             coreend = ref.end
 */
      goto __pyx_L24;
    }

    /* "msyd/pyxfiles/io.pyx":1113
 *             corecounter += 1
 *         else:
 *             break             # <<<<<<<<<<<<<<
 * 
 *     buf.write("\n")
 */
    /*else*/ {
      goto __pyx_L4_break;
    }
    __pyx_L24:;
  }
  __pyx_L4_break:;

  /* "msyd/pyxfiles/io.pyx":1115
 *             break
 * 
 *     buf.write("\n")             # <<<<<<<<<<<<<<
 *     buf.flush()
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u__42};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":1116
 * 
 *     buf.write("\n")
 *     buf.flush()             # <<<<<<<<<<<<<<
 * 
 * cdef write_pansyns(pansyns, buf, orgs):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_flush); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":1048
 *     out.close()
 * 
 * cpdef save_to_pff(df, buf, save_cigars=True, collapse_mesyn=True):             # <<<<<<<<<<<<<<
 *     """Takes a df containing `Pansyn` objects and writes them in pansynteny file format to `buf`.
 *     Can be used to print directly to a file, or to print or further process the output.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("msyd.io.save_to_pff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orgs);
  __Pyx_XDECREF(__pyx_v_corechr);
  __Pyx_XDECREF(__pyx_v_syniter);
  __Pyx_XDECREF(__pyx_v_mesyns);
  __Pyx_XDECREF(__pyx_v_refmesyns);
  __Pyx_XDECREF(__pyx_v_syn);
  __Pyx_XDECREF(__pyx_v_mesyn);
  __Pyx_XDECREF(__pyx_v_refmesyn);
  __Pyx_XDECREF(__pyx_v_ref);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_31save_to_pff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_30save_to_pff, "Takes a df containing `Pansyn` objects and writes them in pansynteny file format to `buf`.\n    Can be used to print directly to a file, or to print or further process the output.\n    ");
static PyMethodDef __pyx_mdef_4msyd_2io_31save_to_pff = {"save_to_pff", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_31save_to_pff, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_30save_to_pff};
static PyObject *__pyx_pw_4msyd_2io_31save_to_pff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_df = 0;
  PyObject *__pyx_v_buf = 0;
  PyObject *__pyx_v_save_cigars = 0;
  PyObject *__pyx_v_collapse_mesyn = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_to_pff (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_df,&__pyx_n_s_buf,&__pyx_n_s_save_cigars,&__pyx_n_s_collapse_mesyn,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_df)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1048, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_buf)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1048, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("save_to_pff", 0, 2, 4, 1); __PYX_ERR(0, 1048, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_save_cigars);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1048, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_collapse_mesyn);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1048, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "save_to_pff") < 0)) __PYX_ERR(0, 1048, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_df = values[0];
    __pyx_v_buf = values[1];
    __pyx_v_save_cigars = values[2];
    __pyx_v_collapse_mesyn = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_to_pff", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1048, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.save_to_pff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_30save_to_pff(__pyx_self, __pyx_v_df, __pyx_v_buf, __pyx_v_save_cigars, __pyx_v_collapse_mesyn);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_30save_to_pff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_df, PyObject *__pyx_v_buf, PyObject *__pyx_v_save_cigars, PyObject *__pyx_v_collapse_mesyn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4msyd_2io_save_to_pff __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_to_pff", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.save_cigars = __pyx_v_save_cigars;
  __pyx_t_2.collapse_mesyn = __pyx_v_collapse_mesyn;
  __pyx_t_1 = __pyx_f_4msyd_2io_save_to_pff(__pyx_v_df, __pyx_v_buf, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.save_to_pff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":1118
 *     buf.flush()
 * 
 * cdef write_pansyns(pansyns, buf, orgs):             # <<<<<<<<<<<<<<
 *     """Function to write a set of pansyns in a single PFF-style annotation to buf.
 *     Does not write the BED-like first part of the annotation.
 */

static PyObject *__pyx_f_4msyd_2io_write_pansyns(PyObject *__pyx_v_pansyns, PyObject *__pyx_v_buf, PyObject *__pyx_v_orgs) {
  PyObject *__pyx_9genexpr26__pyx_v_org = NULL;
  PyObject *__pyx_9genexpr27__pyx_v_pansyn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_pansyns", 1);

  /* "msyd/pyxfiles/io.pyx":1125
 *     :param orgs: ordering of organisms to use (should be sorted)
 *     """
 *     buf.write('\t'.join(             # <<<<<<<<<<<<<<
 *         [';'.join(
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { /* enter inner scope */

    /* "msyd/pyxfiles/io.pyx":1126
 *     """
 *     buf.write('\t'.join(
 *         [';'.join(             # <<<<<<<<<<<<<<
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1126, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "msyd/pyxfiles/io.pyx":1129
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 *          for org in orgs])             # <<<<<<<<<<<<<<
 *       )
 *     buf.write("\n")
 */
    if (likely(PyList_CheckExact(__pyx_v_orgs)) || PyTuple_CheckExact(__pyx_v_orgs)) {
      __pyx_t_4 = __pyx_v_orgs; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_orgs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1129, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1129, __pyx_L5_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1129, __pyx_L5_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1129, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1129, __pyx_L5_error)
            #endif
            if (__pyx_t_5 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1129, __pyx_L5_error)
          #else
          __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1129, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1129, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr26__pyx_v_org, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "msyd/pyxfiles/io.pyx":1126
 *     """
 *     buf.write('\t'.join(
 *         [';'.join(             # <<<<<<<<<<<<<<
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 */
      { /* enter inner scope */

        /* "msyd/pyxfiles/io.pyx":1127
 *     buf.write('\t'.join(
 *         [';'.join(
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>             # <<<<<<<<<<<<<<
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 *          for org in orgs])
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1127, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "msyd/pyxfiles/io.pyx":1128
 *         [';'.join(
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus             # <<<<<<<<<<<<<<
 *          for org in orgs])
 *       )
 */
        if (likely(PyList_CheckExact(__pyx_v_pansyns)) || PyTuple_CheckExact(__pyx_v_pansyns)) {
          __pyx_t_8 = __pyx_v_pansyns; __Pyx_INCREF(__pyx_t_8);
          __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_pansyns); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1128, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1128, __pyx_L10_error)
        }
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1128, __pyx_L10_error)
                #endif
                if (__pyx_t_9 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 1128, __pyx_L10_error)
              #else
              __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1128, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1128, __pyx_L10_error)
                #endif
                if (__pyx_t_9 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 1128, __pyx_L10_error)
              #else
              __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1128, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            }
          } else {
            __pyx_t_11 = __pyx_t_10(__pyx_t_8);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1128, __pyx_L10_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr27__pyx_v_pansyn, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "msyd/pyxfiles/io.pyx":1127
 *     buf.write('\t'.join(
 *         [';'.join(
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>             # <<<<<<<<<<<<<<
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 *          for org in orgs])
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr27__pyx_v_pansyn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1128, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_9genexpr26__pyx_v_org, __pyx_t_12, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 1128, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_13) {
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr27__pyx_v_pansyn, __pyx_n_s_ranges_dict); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_14, __pyx_9genexpr26__pyx_v_org); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_to_pff); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = NULL;
            __pyx_t_16 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_14))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_14, function);
                __pyx_t_16 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_15, NULL};
              __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_16, 0+__pyx_t_16);
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1127, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            }
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr27__pyx_v_pansyn, __pyx_n_s_ref); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_org); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyList_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_12);
            if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_12)) __PYX_ERR(0, 1127, __pyx_L10_error);
            __Pyx_GIVEREF(__pyx_t_15);
            if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_15)) __PYX_ERR(0, 1127, __pyx_L10_error);
            __pyx_t_12 = 0;
            __pyx_t_15 = 0;
            __pyx_t_15 = PyUnicode_Join(__pyx_kp_u__4, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1127, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_11 = __pyx_t_15;
            __pyx_t_15 = 0;
          } else {
            __Pyx_INCREF(__pyx_kp_u__43);
            __pyx_t_11 = __pyx_kp_u__43;
          }
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 1127, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "msyd/pyxfiles/io.pyx":1128
 *         [';'.join(
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus             # <<<<<<<<<<<<<<
 *          for org in orgs])
 *       )
 */
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_pansyn); __pyx_9genexpr27__pyx_v_pansyn = 0;
        goto __pyx_L14_exit_scope;
        __pyx_L10_error:;
        __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_pansyn); __pyx_9genexpr27__pyx_v_pansyn = 0;
        goto __pyx_L5_error;
        __pyx_L14_exit_scope:;
      } /* exit inner scope */

      /* "msyd/pyxfiles/io.pyx":1126
 *     """
 *     buf.write('\t'.join(
 *         [';'.join(             # <<<<<<<<<<<<<<
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 */
      __pyx_t_8 = PyUnicode_Join(__pyx_kp_u__3, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1126, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1126, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "msyd/pyxfiles/io.pyx":1129
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 *              if org in pansyn.ranges_dict else '-' for pansyn in pansyns]) # if the haplotype isn't syntenic to an organism, put a minus
 *          for org in orgs])             # <<<<<<<<<<<<<<
 *       )
 *     buf.write("\n")
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_9genexpr26__pyx_v_org); __pyx_9genexpr26__pyx_v_org = 0;
    goto __pyx_L16_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr26__pyx_v_org); __pyx_9genexpr26__pyx_v_org = 0;
    goto __pyx_L1_error;
    __pyx_L16_exit_scope:;
  } /* exit inner scope */

  /* "msyd/pyxfiles/io.pyx":1125
 *     :param orgs: ordering of organisms to use (should be sorted)
 *     """
 *     buf.write('\t'.join(             # <<<<<<<<<<<<<<
 *         [';'.join(
 *             [','.join([pansyn.ranges_dict[org].to_pff(), pansyn.ref.org]) # <range>,<haplotype organism>
 */
  __pyx_t_4 = PyUnicode_Join(__pyx_kp_u__14, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_16 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_16 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_16, 1+__pyx_t_16);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1131
 *          for org in orgs])
 *       )
 *     buf.write("\n")             # <<<<<<<<<<<<<<
 * 
 * cpdef read_pff(f):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buf, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_16 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_16 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u__42};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_16, 1+__pyx_t_16);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "msyd/pyxfiles/io.pyx":1118
 *     buf.flush()
 * 
 * cdef write_pansyns(pansyns, buf, orgs):             # <<<<<<<<<<<<<<
 *     """Function to write a set of pansyns in a single PFF-style annotation to buf.
 *     Does not write the BED-like first part of the annotation.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("msyd.io.write_pansyns", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_9genexpr26__pyx_v_org);
  __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_pansyn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "msyd/pyxfiles/io.pyx":1133
 *     buf.write("\n")
 * 
 * cpdef read_pff(f):             # <<<<<<<<<<<<<<
 *     """Takes a file object or path to a file in PFF format and reads it in as a DataFrame.
 *     """
 */

static PyObject *__pyx_pw_4msyd_2io_33read_pff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_4msyd_2io_read_pff(PyObject *__pyx_v_f, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_syns = NULL;
  PyObject *__pyx_v_orgs = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_v_syn = NULL;
  PyObject *__pyx_9genexpr28__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr28__pyx_v_cell = NULL;
  PyObject *__pyx_9genexpr29__pyx_v_i = NULL;
  PyObject *__pyx_9genexpr29__pyx_v_cell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  int __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_pff", 0);
  __Pyx_INCREF(__pyx_v_f);

  /* "msyd/pyxfiles/io.pyx":1136
 *     """Takes a file object or path to a file in PFF format and reads it in as a DataFrame.
 *     """
 *     if isinstance(f, str):             # <<<<<<<<<<<<<<
 *         f = open(f, 'rt')
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_f); 
  if (__pyx_t_1) {

    /* "msyd/pyxfiles/io.pyx":1137
 *     """
 *     if isinstance(f, str):
 *         f = open(f, 'rt')             # <<<<<<<<<<<<<<
 * 
 *     syns = deque()
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_f);
    __Pyx_GIVEREF(__pyx_v_f);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_f)) __PYX_ERR(0, 1137, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_u_rt);
    __Pyx_GIVEREF(__pyx_n_u_rt);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_rt)) __PYX_ERR(0, 1137, __pyx_L1_error);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_f, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":1136
 *     """Takes a file object or path to a file in PFF format and reads it in as a DataFrame.
 *     """
 *     if isinstance(f, str):             # <<<<<<<<<<<<<<
 *         f = open(f, 'rt')
 * 
 */
  }

  /* "msyd/pyxfiles/io.pyx":1139
 *         f = open(f, 'rt')
 * 
 *     syns = deque()             # <<<<<<<<<<<<<<
 *     orgs = f.readline().strip()[1:].split("\t")[2:] # 0 is ANN, 1 is ref
 *     for l in f:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_syns = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":1140
 * 
 *     syns = deque()
 *     orgs = f.readline().strip()[1:].split("\t")[2:] # 0 is ANN, 1 is ref             # <<<<<<<<<<<<<<
 *     for l in f:
 *         l = l.strip().split('\t')
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_readline); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_strip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_t_2, 1, 0, NULL, NULL, &__pyx_slice__11, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__14};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_3, 2, 0, NULL, NULL, &__pyx_slice__44, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_orgs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":1141
 *     syns = deque()
 *     orgs = f.readline().strip()[1:].split("\t")[2:] # 0 is ANN, 1 is ref
 *     for l in f:             # <<<<<<<<<<<<<<
 *         l = l.strip().split('\t')
 *         if l[0] == 'SYN': # line contains a pansyn region
 */
  if (likely(PyList_CheckExact(__pyx_v_f)) || PyTuple_CheckExact(__pyx_v_f)) {
    __pyx_t_2 = __pyx_v_f; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1141, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1141, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1141, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1141, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1141, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1141, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":1142
 *     orgs = f.readline().strip()[1:].split("\t")[2:] # 0 is ANN, 1 is ref
 *     for l in f:
 *         l = l.strip().split('\t')             # <<<<<<<<<<<<<<
 *         if l[0] == 'SYN': # line contains a pansyn region
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_l, __pyx_n_s_strip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__14};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_l, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "msyd/pyxfiles/io.pyx":1143
 *     for l in f:
 *         l = l.strip().split('\t')
 *         if l[0] == 'SYN': # line contains a pansyn region             # <<<<<<<<<<<<<<
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_l, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_SYN, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "msyd/pyxfiles/io.pyx":1144
 *         l = l.strip().split('\t')
 *         if l[0] == 'SYN': # line contains a pansyn region
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range             # <<<<<<<<<<<<<<
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Pansyn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Range); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_read_pff); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_l, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_n_u_ref, __pyx_t_7};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      { /* enter inner scope */

        /* "msyd/pyxfiles/io.pyx":1145
 *         if l[0] == 'SYN': # line contains a pansyn region
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict             # <<<<<<<<<<<<<<
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])
 */
        __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1145, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_7 = __pyx_int_0;

        /* "msyd/pyxfiles/io.pyx":1146
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},             # <<<<<<<<<<<<<<
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict
 */
        __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_l, 2, 0, NULL, NULL, &__pyx_slice__44, 1, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1146, __pyx_L9_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_12 = __pyx_t_11; __Pyx_INCREF(__pyx_t_12);
          __pyx_t_13 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_13 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1146, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1146, __pyx_L9_error)
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_12))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_12);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1146, __pyx_L9_error)
                #endif
                if (__pyx_t_13 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_11); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1146, __pyx_L9_error)
              #else
              __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1146, __pyx_L9_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_12);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1146, __pyx_L9_error)
                #endif
                if (__pyx_t_13 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_13); __Pyx_INCREF(__pyx_t_11); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1146, __pyx_L9_error)
              #else
              __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_12, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1146, __pyx_L9_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            }
          } else {
            __pyx_t_11 = __pyx_t_14(__pyx_t_12);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1146, __pyx_L9_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr28__pyx_v_cell, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_XDECREF_SET(__pyx_9genexpr28__pyx_v_i, __pyx_t_7);
          __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1146, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_7);
          __pyx_t_7 = __pyx_t_11;
          __pyx_t_11 = 0;
          __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_9genexpr28__pyx_v_cell, __pyx_kp_u__45, Py_NE)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1146, __pyx_L9_error)
          if (__pyx_t_1) {

            /* "msyd/pyxfiles/io.pyx":1145
 *         if l[0] == 'SYN': # line contains a pansyn region
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict             # <<<<<<<<<<<<<<
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])
 */
            __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_orgs, __pyx_9genexpr28__pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Range); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_read_pff); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __pyx_t_16 = __Pyx_PyObject_GetItem(__pyx_v_orgs, __pyx_9genexpr28__pyx_v_i); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr28__pyx_v_cell, __pyx_n_s_split); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_19);
            __pyx_t_20 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_19))) {
              __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_19);
              if (likely(__pyx_t_20)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
                __Pyx_INCREF(__pyx_t_20);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_19, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_kp_u__4};
              __pyx_t_18 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1145, __pyx_L9_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
            }
            __pyx_t_19 = __Pyx_GetItemInt(__pyx_t_18, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_GOTREF(__pyx_t_19);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            __pyx_t_18 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_18)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_18);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_18, __pyx_t_16, __pyx_t_19};
              __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1145, __pyx_L9_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            }
            if (unlikely(PyDict_SetItem(__pyx_t_10, (PyObject*)__pyx_t_11, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 1145, __pyx_L9_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "msyd/pyxfiles/io.pyx":1146
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},             # <<<<<<<<<<<<<<
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict
 */
          }
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_cell); __pyx_9genexpr28__pyx_v_cell = 0;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i); __pyx_9genexpr28__pyx_v_i = 0;
        goto __pyx_L14_exit_scope;
        __pyx_L9_error:;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_cell); __pyx_9genexpr28__pyx_v_cell = 0;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i); __pyx_9genexpr28__pyx_v_i = 0;
        goto __pyx_L1_error;
        __pyx_L14_exit_scope:;
      } /* exit inner scope */
      { /* enter inner scope */

        /* "msyd/pyxfiles/io.pyx":1147
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])             # <<<<<<<<<<<<<<
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict
 *             )
 */
        __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1147, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_12 = __pyx_int_0;

        /* "msyd/pyxfiles/io.pyx":1148
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict             # <<<<<<<<<<<<<<
 *             )
 *             syns.append(syn)
 */
        __pyx_t_15 = __Pyx_PyObject_GetSlice(__pyx_v_l, 2, 0, NULL, NULL, &__pyx_slice__44, 1, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1148, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
          __pyx_t_11 = __pyx_t_15; __Pyx_INCREF(__pyx_t_11);
          __pyx_t_13 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_13 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1148, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1148, __pyx_L17_error)
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1148, __pyx_L17_error)
                #endif
                if (__pyx_t_13 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_15 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1148, __pyx_L17_error)
              #else
              __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1148, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_15);
              #endif
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
                #if !CYTHON_ASSUME_SAFE_MACROS
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1148, __pyx_L17_error)
                #endif
                if (__pyx_t_13 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_13); __Pyx_INCREF(__pyx_t_15); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 1148, __pyx_L17_error)
              #else
              __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1148, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_15);
              #endif
            }
          } else {
            __pyx_t_15 = __pyx_t_14(__pyx_t_11);
            if (unlikely(!__pyx_t_15)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1148, __pyx_L17_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_15);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr29__pyx_v_cell, __pyx_t_15);
          __pyx_t_15 = 0;
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_XDECREF_SET(__pyx_9genexpr29__pyx_v_i, __pyx_t_12);
          __pyx_t_15 = __Pyx_PyInt_AddObjC(__pyx_t_12, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1148, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_12);
          __pyx_t_12 = __pyx_t_15;
          __pyx_t_15 = 0;
          __pyx_t_21 = (__Pyx_PyUnicode_Equals(__pyx_9genexpr29__pyx_v_cell, __pyx_kp_u__45, Py_NE)); if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 1148, __pyx_L17_error)
          if (__pyx_t_21) {
          } else {
            __pyx_t_1 = __pyx_t_21;
            goto __pyx_L21_bool_binop_done;
          }
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr29__pyx_v_cell, __pyx_n_s_split); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1148, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_19 = NULL;
          __pyx_t_5 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_19)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_19);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_5 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_19, __pyx_kp_u__4};
            __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1148, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __pyx_t_22 = PyObject_Length(__pyx_t_15); if (unlikely(__pyx_t_22 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1148, __pyx_L17_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_21 = (__pyx_t_22 > 1);
          __pyx_t_1 = __pyx_t_21;
          __pyx_L21_bool_binop_done:;
          if (__pyx_t_1) {

            /* "msyd/pyxfiles/io.pyx":1147
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])             # <<<<<<<<<<<<<<
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict
 *             )
 */
            __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_v_orgs, __pyx_9genexpr29__pyx_v_i); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1147, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_cigar); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1147, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_19);
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_cigar_from_string); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1147, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
            __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr29__pyx_v_cell, __pyx_n_s_split); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1147, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_18);
            __pyx_t_20 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_18))) {
              __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_18);
              if (likely(__pyx_t_20)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                __Pyx_INCREF(__pyx_t_20);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_18, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_kp_u__4};
              __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1147, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_19);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
            }
            __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_19, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1147, __pyx_L17_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
            __pyx_t_19 = NULL;
            __pyx_t_5 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_5 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_19, __pyx_t_18};
              __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1147, __pyx_L17_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            if (unlikely(PyDict_SetItem(__pyx_t_7, (PyObject*)__pyx_t_15, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 1147, __pyx_L17_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "msyd/pyxfiles/io.pyx":1148
 *                         for i, cell in enumerate(l[2:]) if cell != '.'},
 *                 {orgs[i]:cigar.cigar_from_string(cell.split(',')[1])
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict             # <<<<<<<<<<<<<<
 *             )
 *             syns.append(syn)
 */
          }
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_cell); __pyx_9genexpr29__pyx_v_cell = 0;
        __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_i); __pyx_9genexpr29__pyx_v_i = 0;
        goto __pyx_L24_exit_scope;
        __pyx_L17_error:;
        __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_cell); __pyx_9genexpr29__pyx_v_cell = 0;
        __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_i); __pyx_9genexpr29__pyx_v_i = 0;
        goto __pyx_L1_error;
        __pyx_L24_exit_scope:;
      } /* exit inner scope */
      __pyx_t_12 = NULL;
      __pyx_t_5 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_12, __pyx_t_6, __pyx_t_10, __pyx_t_7};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_syn, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "msyd/pyxfiles/io.pyx":1150
 *                  for i, cell in enumerate(l[2:]) if cell != '.' and len(cell.split(',')) > 1} # extract cigars dict
 *             )
 *             syns.append(syn)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_23 = __Pyx_PyObject_Append(__pyx_v_syns, __pyx_v_syn); if (unlikely(__pyx_t_23 == ((int)-1))) __PYX_ERR(0, 1150, __pyx_L1_error)

      /* "msyd/pyxfiles/io.pyx":1143
 *     for l in f:
 *         l = l.strip().split('\t')
 *         if l[0] == 'SYN': # line contains a pansyn region             # <<<<<<<<<<<<<<
 *             syn = Pansyn(Range.read_pff("ref", l[1]), # extract reference range
 *                 {orgs[i]:Range.read_pff(orgs[i], cell.split(",")[0]) # extract ranges dict
 */
    }

    /* "msyd/pyxfiles/io.pyx":1141
 *     syns = deque()
 *     orgs = f.readline().strip()[1:].split("\t")[2:] # 0 is ANN, 1 is ref
 *     for l in f:             # <<<<<<<<<<<<<<
 *         l = l.strip().split('\t')
 *         if l[0] == 'SYN': # line contains a pansyn region
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":1153
 * 
 * 
 *     return pd.DataFrame(data=list(syns)) # shouldn't require sorting             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PySequence_List(__pyx_v_syns); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_data, __pyx_t_4) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "msyd/pyxfiles/io.pyx":1133
 *     buf.write("\n")
 * 
 * cpdef read_pff(f):             # <<<<<<<<<<<<<<
 *     """Takes a file object or path to a file in PFF format and reads it in as a DataFrame.
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("msyd.io.read_pff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_syns);
  __Pyx_XDECREF(__pyx_v_orgs);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_syn);
  __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_cell);
  __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_i);
  __Pyx_XDECREF(__pyx_9genexpr29__pyx_v_cell);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4msyd_2io_33read_pff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_4msyd_2io_32read_pff, "Takes a file object or path to a file in PFF format and reads it in as a DataFrame.\n    ");
static PyMethodDef __pyx_mdef_4msyd_2io_33read_pff = {"read_pff", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_4msyd_2io_33read_pff, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_4msyd_2io_32read_pff};
static PyObject *__pyx_pw_4msyd_2io_33read_pff(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_f = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_pff (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_f)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1133, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read_pff") < 0)) __PYX_ERR(0, 1133, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_f = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_pff", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1133, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("msyd.io.read_pff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4msyd_2io_32read_pff(__pyx_self, __pyx_v_f);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4msyd_2io_32read_pff(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_pff", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4msyd_2io_read_pff(__pyx_v_f, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("msyd.io.read_pff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *__pyx_freelist_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records[8];
static int __pyx_freecount_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records = 0;

static PyObject *__pyx_tp_new_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records)))) {
    o = (PyObject*)__pyx_freelist_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records[--__pyx_freecount_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records];
    memset(o, 0, sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records(PyObject *o) {
  struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *p = (struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_alleles);
  Py_CLEAR(p->__pyx_v_gtmap);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records)))) {
    __pyx_freelist_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records[__pyx_freecount_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records++] = ((struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *p = (struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *)o;
  if (p->__pyx_v_alleles) {
    e = (*v)(p->__pyx_v_alleles, a); if (e) return e;
  }
  if (p->__pyx_v_gtmap) {
    e = (*v)(p->__pyx_v_gtmap, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *p = (struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records *)o;
  tmp = ((PyObject*)p->__pyx_v_alleles);
  p->__pyx_v_alleles = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_gtmap);
  p->__pyx_v_gtmap = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records},
  {Py_tp_clear, (void *)__pyx_tp_clear_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records},
  {Py_tp_new, (void *)__pyx_tp_new_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records},
  {0, 0},
};
static PyType_Spec __pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records_spec = {
  "msyd.io.__pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records",
  sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records_slots,
};
#else

static PyTypeObject __pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records = {
  PyVarObject_HEAD_INIT(0, 0)
  "msyd.io.""__pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records", /*tp_name*/
  sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records, /*tp_traverse*/
  __pyx_tp_clear_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *__pyx_freelist_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files[8];
static int __pyx_freecount_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files = 0;

static PyObject *__pyx_tp_new_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_COMPILING_IN_CPYTHON
  if (likely((int)(__pyx_freecount_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files)))) {
    o = (PyObject*)__pyx_freelist_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files[--__pyx_freecount_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files];
    memset(o, 0, sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files(PyObject *o) {
  struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *p = (struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_kwargs);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (((int)(__pyx_freecount_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files)))) {
    __pyx_freelist_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files[__pyx_freecount_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files++] = ((struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *p = (struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *)o;
  if (p->__pyx_v_kwargs) {
    e = (*v)(p->__pyx_v_kwargs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *p = (struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files *)o;
  tmp = ((PyObject*)p->__pyx_v_kwargs);
  p->__pyx_v_kwargs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files},
  {Py_tp_clear, (void *)__pyx_tp_clear_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files},
  {Py_tp_new, (void *)__pyx_tp_new_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files},
  {0, 0},
};
static PyType_Spec __pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files_spec = {
  "msyd.io.__pyx_scope_struct_1_extract_syri_regions_to_list_from_files",
  sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files_slots,
};
#else

static PyTypeObject __pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files = {
  PyVarObject_HEAD_INIT(0, 0)
  "msyd.io.""__pyx_scope_struct_1_extract_syri_regions_to_list_from_files", /*tp_name*/
  sizeof(struct __pyx_obj_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files, /*tp_traverse*/
  __pyx_tp_clear_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "__pyx_ctuple_Py_ssize_t",
    "__pyx_ctuple_Py_ssize_t_struct",
    "__pyx_ctuple_int",
    "__pyx_ctuple_int_struct",
    "__pyx_ctuple_long",
    "__pyx_ctuple_long__and_Py_ssize_t",
    "__pyx_ctuple_long__and_Py_ssize_t_struct",
    "__pyx_ctuple_long_struct",
    "__pyx_opt_args_4msyd_2io_add_syn_ann",
    "__pyx_opt_args_4msyd_2io_add_syn_anns_to_vcf",
    "__pyx_opt_args_4msyd_2io_copy_record",
    "__pyx_opt_args_4msyd_2io_extract_syntenic_from_vcf",
    "__pyx_opt_args_4msyd_2io_extract_syri_regions",
    "__pyx_opt_args_4msyd_2io_extract_syri_regions_from_file",
    "__pyx_opt_args_4msyd_2io_filter_vcfs",
    "__pyx_opt_args_4msyd_2io_merge_vcf_records",
    "__pyx_opt_args_4msyd_2io_merge_vcfs",
    "__pyx_opt_args_4msyd_2io_reduce_vcfs",
    "__pyx_opt_args_4msyd_2io_save_to_pff",
    "__pyx_opt_args_4msyd_2io_save_to_vcf",
    "__pyx_scope_struct_1_extract_syri_regions_to_list_from_files",
    "__pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            likely(PyString_Check(name)) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            likely(PyUnicode_Check(name)) &&
            likely(__Pyx_PyUnicode_GET_LENGTH(name)) &&
            __Pyx_PyUnicode_READ_CHAR(name, 0) == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
    {&__pyx_kp_u_012b, __pyx_k_012b, sizeof(__pyx_k_012b), 0, 1, 0, 0},
    {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
    {&__pyx_kp_u_2f, __pyx_k_2f, sizeof(__pyx_k_2f), 0, 1, 0, 0},
    {&__pyx_n_u_AI, __pyx_k_AI, sizeof(__pyx_k_AI), 0, 1, 0, 1},
    {&__pyx_n_s_AlignmentFile, __pyx_k_AlignmentFile, sizeof(__pyx_k_AlignmentFile), 0, 0, 1, 1},
    {&__pyx_kp_u_Appending_filename_to_sample_na, __pyx_k_Appending_filename_to_sample_na, sizeof(__pyx_k_Appending_filename_to_sample_na), 0, 1, 0, 0},
    {&__pyx_n_u_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 1, 0, 1},
    {&__pyx_n_s_BadGzipFile, __pyx_k_BadGzipFile, sizeof(__pyx_k_BadGzipFile), 0, 0, 1, 1},
    {&__pyx_n_u_CG, __pyx_k_CG, sizeof(__pyx_k_CG), 0, 1, 0, 1},
    {&__pyx_n_u_CHR, __pyx_k_CHR, sizeof(__pyx_k_CHR), 0, 1, 0, 1},
    {&__pyx_kp_u_CHR_START_END_ANN, __pyx_k_CHR_START_END_ANN, sizeof(__pyx_k_CHR_START_END_ANN), 0, 1, 0, 0},
    {&__pyx_kp_u_CIGAR_string_is_not_present_in_P, __pyx_k_CIGAR_string_is_not_present_in_P, sizeof(__pyx_k_CIGAR_string_is_not_present_in_P), 0, 1, 0, 0},
    {&__pyx_kp_u_CORESYN, __pyx_k_CORESYN, sizeof(__pyx_k_CORESYN), 0, 1, 0, 0},
    {&__pyx_kp_u_CORESYN_2, __pyx_k_CORESYN_2, sizeof(__pyx_k_CORESYN_2), 0, 1, 0, 0},
    {&__pyx_n_u_CORESYN_3, __pyx_k_CORESYN_3, sizeof(__pyx_k_CORESYN_3), 0, 1, 0, 1},
    {&__pyx_n_u_CPG, __pyx_k_CPG, sizeof(__pyx_k_CPG), 0, 1, 0, 1},
    {&__pyx_n_u_CPL, __pyx_k_CPL, sizeof(__pyx_k_CPL), 0, 1, 0, 1},
    {&__pyx_kp_u_CROSSSYN, __pyx_k_CROSSSYN, sizeof(__pyx_k_CROSSSYN), 0, 1, 0, 0},
    {&__pyx_kp_u_CROSSSYN_2, __pyx_k_CROSSSYN_2, sizeof(__pyx_k_CROSSSYN_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Cannot_open_file_Exiting, __pyx_k_Cannot_open_file_Exiting, sizeof(__pyx_k_Cannot_open_file_Exiting), 0, 1, 0, 0},
    {&__pyx_kp_u_Choosing, __pyx_k_Choosing, sizeof(__pyx_k_Choosing), 0, 1, 0, 0},
    {&__pyx_n_u_ChrB, __pyx_k_ChrB, sizeof(__pyx_k_ChrB), 0, 1, 0, 1},
    {&__pyx_kp_u_Combining, __pyx_k_Combining, sizeof(__pyx_k_Combining), 0, 1, 0, 0},
    {&__pyx_kp_u_Conflicting_info_stored_for, __pyx_k_Conflicting_info_stored_for, sizeof(__pyx_k_Conflicting_info_stored_for), 0, 1, 0, 0},
    {&__pyx_n_s_CustomFormatter, __pyx_k_CustomFormatter, sizeof(__pyx_k_CustomFormatter), 0, 0, 1, 1},
    {&__pyx_n_u_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 1, 0, 1},
    {&__pyx_n_u_DEL, __pyx_k_DEL, sizeof(__pyx_k_DEL), 0, 1, 0, 1},
    {&__pyx_n_u_DUP, __pyx_k_DUP, sizeof(__pyx_k_DUP), 0, 1, 0, 1},
    {&__pyx_n_u_DUPAL, __pyx_k_DUPAL, sizeof(__pyx_k_DUPAL), 0, 1, 0, 1},
    {&__pyx_kp_u_D_2, __pyx_k_D_2, sizeof(__pyx_k_D_2), 0, 1, 0, 0},
    {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
    {&__pyx_kp_u_Duplicate_chromosome_IDs_are_no, __pyx_k_Duplicate_chromosome_IDs_are_no, sizeof(__pyx_k_Duplicate_chromosome_IDs_are_no), 0, 1, 0, 0},
    {&__pyx_kp_u_Duplicate_sample, __pyx_k_Duplicate_sample, sizeof(__pyx_k_Duplicate_sample), 0, 1, 0, 0},
    {&__pyx_n_u_END, __pyx_k_END, sizeof(__pyx_k_END), 0, 1, 0, 1},
    {&__pyx_kp_u_ERROR_CIGAR_string_starting_with, __pyx_k_ERROR_CIGAR_string_starting_with, sizeof(__pyx_k_ERROR_CIGAR_string_starting_with), 0, 1, 0, 0},
    {&__pyx_kp_u_Empty_VCF_encountered_Outputting, __pyx_k_Empty_VCF_encountered_Outputting, sizeof(__pyx_k_Empty_VCF_encountered_Outputting), 0, 1, 0, 0},
    {&__pyx_n_u_EndB, __pyx_k_EndB, sizeof(__pyx_k_EndB), 0, 1, 0, 1},
    {&__pyx_kp_u_Error_adding_pansyn_annotation_f, __pyx_k_Error_adding_pansyn_annotation_f, sizeof(__pyx_k_Error_adding_pansyn_annotation_f), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_in_opening_BAM_SAM_file, __pyx_k_Error_in_opening_BAM_SAM_file, sizeof(__pyx_k_Error_in_opening_BAM_SAM_file), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_in_reading_BAM_SAM_file, __pyx_k_Error_in_reading_BAM_SAM_file, sizeof(__pyx_k_Error_in_reading_BAM_SAM_file), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_in_reading_PAF_Exiting, __pyx_k_Error_in_reading_PAF_Exiting, sizeof(__pyx_k_Error_in_reading_PAF_Exiting), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_in_reading_SAM_file, __pyx_k_Error_in_reading_SAM_file, sizeof(__pyx_k_Error_in_reading_SAM_file), 0, 1, 0, 0},
    {&__pyx_kp_u_Error_in_reading_input_file, __pyx_k_Error_in_reading_input_file, sizeof(__pyx_k_Error_in_reading_input_file), 0, 1, 0, 0},
    {&__pyx_n_s_FileNotFoundError, __pyx_k_FileNotFoundError, sizeof(__pyx_k_FileNotFoundError), 0, 0, 1, 1},
    {&__pyx_kp_u_Filtering, __pyx_k_Filtering, sizeof(__pyx_k_Filtering), 0, 1, 0, 0},
    {&__pyx_kp_u_Found_samples, __pyx_k_Found_samples, sizeof(__pyx_k_Found_samples), 0, 1, 0, 0},
    {&__pyx_n_u_GT, __pyx_k_GT, sizeof(__pyx_k_GT), 0, 1, 0, 1},
    {&__pyx_n_u_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 1, 0, 1},
    {&__pyx_n_u_HDR, __pyx_k_HDR, sizeof(__pyx_k_HDR), 0, 1, 0, 1},
    {&__pyx_n_s_HEADER, __pyx_k_HEADER, sizeof(__pyx_k_HEADER), 0, 0, 1, 1},
    {&__pyx_kp_u_H_2, __pyx_k_H_2, sizeof(__pyx_k_H_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Headers_not_matching_in, __pyx_k_Headers_not_matching_in, sizeof(__pyx_k_Headers_not_matching_in), 0, 1, 0, 0},
    {&__pyx_n_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 1},
    {&__pyx_kp_u_IDs_were_used, __pyx_k_IDs_were_used, sizeof(__pyx_k_IDs_were_used), 0, 1, 0, 0},
    {&__pyx_kp_u_INFO_ID_END_Number_1_Type_Integ, __pyx_k_INFO_ID_END_Number_1_Type_Integ, sizeof(__pyx_k_INFO_ID_END_Number_1_Type_Integ), 0, 1, 0, 0},
    {&__pyx_n_u_INS, __pyx_k_INS, sizeof(__pyx_k_INS), 0, 1, 0, 1},
    {&__pyx_n_u_INV, __pyx_k_INV, sizeof(__pyx_k_INV), 0, 1, 0, 1},
    {&__pyx_n_u_INVAL, __pyx_k_INVAL, sizeof(__pyx_k_INVAL), 0, 1, 0, 1},
    {&__pyx_n_u_INVDP, __pyx_k_INVDP, sizeof(__pyx_k_INVDP), 0, 1, 0, 1},
    {&__pyx_n_u_INVDPAL, __pyx_k_INVDPAL, sizeof(__pyx_k_INVDPAL), 0, 1, 0, 1},
    {&__pyx_n_u_INVTR, __pyx_k_INVTR, sizeof(__pyx_k_INVTR), 0, 1, 0, 1},
    {&__pyx_n_u_INVTRAL, __pyx_k_INVTRAL, sizeof(__pyx_k_INVTRAL), 0, 1, 0, 1},
    {&__pyx_kp_u_I_2, __pyx_k_I_2, sizeof(__pyx_k_I_2), 0, 1, 0, 0},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_u_Incomplete_input_file_syri_out_f, __pyx_k_Incomplete_input_file_syri_out_f, sizeof(__pyx_k_Incomplete_input_file_syri_out_f), 0, 1, 0, 0},
    {&__pyx_kp_u_Incorrect_CIGAR_string_found_CIG, __pyx_k_Incorrect_CIGAR_string_found_CIG, sizeof(__pyx_k_Incorrect_CIGAR_string_found_CIG), 0, 1, 0, 0},
    {&__pyx_kp_u_Incorrect_CIGAR_string_found_Cli, __pyx_k_Incorrect_CIGAR_string_found_Cli, sizeof(__pyx_k_Incorrect_CIGAR_string_found_Cli), 0, 1, 0, 0},
    {&__pyx_kp_u_Infiles_and_qrynames_lists_lengt, __pyx_k_Infiles_and_qrynames_lists_lengt, sizeof(__pyx_k_Infiles_and_qrynames_lists_lengt), 0, 1, 0, 0},
    {&__pyx_kp_u_Input_VCF_contains_organisms_not, __pyx_k_Input_VCF_contains_organisms_not, sizeof(__pyx_k_Input_VCF_contains_organisms_not), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_GT_found, __pyx_k_Invalid_GT_found, sizeof(__pyx_k_Invalid_GT_found), 0, 1, 0, 0},
    {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
    {&__pyx_n_u_LN, __pyx_k_LN, sizeof(__pyx_k_LN), 0, 1, 0, 1},
    {&__pyx_kp_s_List_Union_str_os_PathLike, __pyx_k_List_Union_str_os_PathLike, sizeof(__pyx_k_List_Union_str_os_PathLike), 0, 0, 1, 0},
    {&__pyx_n_u_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 1, 0, 1},
    {&__pyx_n_u_MERISYN, __pyx_k_MERISYN, sizeof(__pyx_k_MERISYN), 0, 1, 0, 1},
    {&__pyx_kp_u_Merging, __pyx_k_Merging, sizeof(__pyx_k_Merging), 0, 1, 0, 0},
    {&__pyx_kp_u_Merging_VCFs_with_no_samples_is, __pyx_k_Merging_VCFs_with_no_samples_is, sizeof(__pyx_k_Merging_VCFs_with_no_samples_is), 0, 1, 0, 0},
    {&__pyx_n_u_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 1, 0, 1},
    {&__pyx_n_u_NOTAL, __pyx_k_NOTAL, sizeof(__pyx_k_NOTAL), 0, 1, 0, 1},
    {&__pyx_kp_u_N_ACGT, __pyx_k_N_ACGT, sizeof(__pyx_k_N_ACGT), 0, 1, 0, 0},
    {&__pyx_kp_u_No_Reference_specified_not_savin, __pyx_k_No_Reference_specified_not_savin, sizeof(__pyx_k_No_Reference_specified_not_savin), 0, 1, 0, 0},
    {&__pyx_kp_u_No_primary_alignment_found_for_q, __pyx_k_No_primary_alignment_found_for_q, sizeof(__pyx_k_No_primary_alignment_found_for_q), 0, 1, 0, 0},
    {&__pyx_kp_u_No_primary_alignment_found_for_r, __pyx_k_No_primary_alignment_found_for_r, sizeof(__pyx_k_No_primary_alignment_found_for_r), 0, 1, 0, 0},
    {&__pyx_kp_u_Non_numerical_values_used_as_gen, __pyx_k_Non_numerical_values_used_as_gen, sizeof(__pyx_k_Non_numerical_values_used_as_gen), 0, 1, 0, 0},
    {&__pyx_n_s_OSError, __pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 0, 1, 1},
    {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
    {&__pyx_n_u_PID, __pyx_k_PID, sizeof(__pyx_k_PID), 0, 1, 0, 1},
    {&__pyx_n_s_Pansyn, __pyx_k_Pansyn, sizeof(__pyx_k_Pansyn), 0, 0, 1, 1},
    {&__pyx_n_s_Pool, __pyx_k_Pool, sizeof(__pyx_k_Pool), 0, 0, 1, 1},
    {&__pyx_n_s_Position, __pyx_k_Position, sizeof(__pyx_k_Position), 0, 0, 1, 1},
    {&__pyx_n_s_Range, __pyx_k_Range, sizeof(__pyx_k_Range), 0, 0, 1, 1},
    {&__pyx_kp_u_Reading_BAM_SAM_file, __pyx_k_Reading_BAM_SAM_file, sizeof(__pyx_k_Reading_BAM_SAM_file), 0, 1, 0, 0},
    {&__pyx_kp_u_Reading_PAF_file, __pyx_k_Reading_PAF_file, sizeof(__pyx_k_Reading_PAF_file), 0, 1, 0, 0},
    {&__pyx_kp_u_Reading_in_Reference_Fasta, __pyx_k_Reading_in_Reference_Fasta, sizeof(__pyx_k_Reading_in_Reference_Fasta), 0, 1, 0, 0},
    {&__pyx_n_u_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 1, 0, 1},
    {&__pyx_kp_u_SAM_reader, __pyx_k_SAM_reader, sizeof(__pyx_k_SAM_reader), 0, 1, 0, 0},
    {&__pyx_n_u_SN, __pyx_k_SN, sizeof(__pyx_k_SN), 0, 1, 0, 1},
    {&__pyx_n_u_SNP, __pyx_k_SNP, sizeof(__pyx_k_SNP), 0, 1, 0, 1},
    {&__pyx_n_s_SNV, __pyx_k_SNV, sizeof(__pyx_k_SNV), 0, 0, 1, 1},
    {&__pyx_kp_u_SQ, __pyx_k_SQ, sizeof(__pyx_k_SQ), 0, 1, 0, 0},
    {&__pyx_n_u_START, __pyx_k_START, sizeof(__pyx_k_START), 0, 1, 0, 1},
    {&__pyx_n_u_SYN, __pyx_k_SYN, sizeof(__pyx_k_SYN), 0, 1, 0, 1},
    {&__pyx_n_u_SYNAL, __pyx_k_SYNAL, sizeof(__pyx_k_SYNAL), 0, 1, 0, 1},
    {&__pyx_kp_u_SYN_2, __pyx_k_SYN_2, sizeof(__pyx_k_SYN_2), 0, 1, 0, 0},
    {&__pyx_kp_u_S_2, __pyx_k_S_2, sizeof(__pyx_k_S_2), 0, 1, 0, 0},
    {&__pyx_n_u_StartB, __pyx_k_StartB, sizeof(__pyx_k_StartB), 0, 1, 0, 1},
    {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
    {&__pyx_n_u_TDM, __pyx_k_TDM, sizeof(__pyx_k_TDM), 0, 1, 0, 1},
    {&__pyx_n_u_TRANS, __pyx_k_TRANS, sizeof(__pyx_k_TRANS), 0, 1, 0, 1},
    {&__pyx_n_u_TRANSAL, __pyx_k_TRANSAL, sizeof(__pyx_k_TRANSAL), 0, 1, 0, 1},
    {&__pyx_kp_u_There_was_conflicting_informatio, __pyx_k_There_was_conflicting_informatio, sizeof(__pyx_k_There_was_conflicting_informatio), 0, 1, 0, 0},
    {&__pyx_kp_u_There_were_VCF_records_at_the_sa, __pyx_k_There_were_VCF_records_at_the_sa, sizeof(__pyx_k_There_were_VCF_records_at_the_sa), 0, 1, 0, 0},
    {&__pyx_kp_u_This_could_mean_that_the_entire, __pyx_k_This_could_mean_that_the_entire, sizeof(__pyx_k_This_could_mean_that_the_entire), 0, 1, 0, 0},
    {&__pyx_kp_u_Trying_to_join_records_with_diff, __pyx_k_Trying_to_join_records_with_diff, sizeof(__pyx_k_Trying_to_join_records_with_diff), 0, 1, 0, 0},
    {&__pyx_kp_u_Unexpected_error_in_opening_BAM, __pyx_k_Unexpected_error_in_opening_BAM, sizeof(__pyx_k_Unexpected_error_in_opening_BAM), 0, 1, 0, 0},
    {&__pyx_kp_s_Union_str_os_PathLike, __pyx_k_Union_str_os_PathLike, sizeof(__pyx_k_Union_str_os_PathLike), 0, 0, 1, 0},
    {&__pyx_n_s_VARS, __pyx_k_VARS, sizeof(__pyx_k_VARS), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_VariantFile, __pyx_k_VariantFile, sizeof(__pyx_k_VariantFile), 0, 0, 1, 1},
    {&__pyx_kp_u_Wrong_parameter, __pyx_k_Wrong_parameter, sizeof(__pyx_k_Wrong_parameter), 0, 1, 0, 0},
    {&__pyx_n_u_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 1, 0, 1},
    {&__pyx_kp_u_X_2, __pyx_k_X_2, sizeof(__pyx_k_X_2), 0, 1, 0, 0},
    {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
    {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
    {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
    {&__pyx_n_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 1},
    {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
    {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
    {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
    {&__pyx_kp_u__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 1, 0, 0},
    {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_kp_u__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 1, 0, 0},
    {&__pyx_n_u__37, __pyx_k__37, sizeof(__pyx_k__37), 0, 1, 0, 1},
    {&__pyx_kp_u__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 1, 0, 0},
    {&__pyx_kp_u__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 1, 0, 0},
    {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_kp_u__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 1, 0, 0},
    {&__pyx_kp_u__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 1, 0, 0},
    {&__pyx_kp_u__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 1, 0, 0},
    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_kp_b__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 0, 0},
    {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
    {&__pyx_n_s__89, __pyx_k__89, sizeof(__pyx_k__89), 0, 0, 1, 1},
    {&__pyx_kp_b__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 0, 0, 0},
    {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
    {&__pyx_n_u_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 1},
    {&__pyx_n_s_achr, __pyx_k_achr, sizeof(__pyx_k_achr), 0, 0, 1, 1},
    {&__pyx_n_u_achr, __pyx_k_achr, sizeof(__pyx_k_achr), 0, 1, 0, 1},
    {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
    {&__pyx_n_s_add_cigar, __pyx_k_add_cigar, sizeof(__pyx_k_add_cigar), 0, 0, 1, 1},
    {&__pyx_n_s_add_identity, __pyx_k_add_identity, sizeof(__pyx_k_add_identity), 0, 0, 1, 1},
    {&__pyx_n_s_add_line, __pyx_k_add_line, sizeof(__pyx_k_add_line), 0, 0, 1, 1},
    {&__pyx_n_s_add_sample, __pyx_k_add_sample, sizeof(__pyx_k_add_sample), 0, 0, 1, 1},
    {&__pyx_n_s_add_syn_anns, __pyx_k_add_syn_anns, sizeof(__pyx_k_add_syn_anns), 0, 0, 1, 1},
    {&__pyx_n_s_add_syn_anns_to_vcf, __pyx_k_add_syn_anns_to_vcf, sizeof(__pyx_k_add_syn_anns_to_vcf), 0, 0, 1, 1},
    {&__pyx_n_s_adir, __pyx_k_adir, sizeof(__pyx_k_adir), 0, 0, 1, 1},
    {&__pyx_n_u_adir, __pyx_k_adir, sizeof(__pyx_k_adir), 0, 1, 0, 1},
    {&__pyx_n_s_aend, __pyx_k_aend, sizeof(__pyx_k_aend), 0, 0, 1, 1},
    {&__pyx_n_u_aend, __pyx_k_aend, sizeof(__pyx_k_aend), 0, 1, 0, 1},
    {&__pyx_n_s_al, __pyx_k_al, sizeof(__pyx_k_al), 0, 0, 1, 1},
    {&__pyx_n_s_alen, __pyx_k_alen, sizeof(__pyx_k_alen), 0, 0, 1, 1},
    {&__pyx_n_u_alen, __pyx_k_alen, sizeof(__pyx_k_alen), 0, 1, 0, 1},
    {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
    {&__pyx_n_s_alleles, __pyx_k_alleles, sizeof(__pyx_k_alleles), 0, 0, 1, 1},
    {&__pyx_n_s_aln, __pyx_k_aln, sizeof(__pyx_k_aln), 0, 0, 1, 1},
    {&__pyx_kp_u_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0, 0},
    {&__pyx_n_s_anns, __pyx_k_anns, sizeof(__pyx_k_anns), 0, 0, 1, 1},
    {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
    {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
    {&__pyx_n_s_ascending, __pyx_k_ascending, sizeof(__pyx_k_ascending), 0, 0, 1, 1},
    {&__pyx_n_s_astart, __pyx_k_astart, sizeof(__pyx_k_astart), 0, 0, 1, 1},
    {&__pyx_n_u_astart, __pyx_k_astart, sizeof(__pyx_k_astart), 0, 1, 0, 1},
    {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_u_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 1, 0, 1},
    {&__pyx_n_s_bchr, __pyx_k_bchr, sizeof(__pyx_k_bchr), 0, 0, 1, 1},
    {&__pyx_n_u_bchr, __pyx_k_bchr, sizeof(__pyx_k_bchr), 0, 1, 0, 1},
    {&__pyx_n_s_bdir, __pyx_k_bdir, sizeof(__pyx_k_bdir), 0, 0, 1, 1},
    {&__pyx_n_u_bdir, __pyx_k_bdir, sizeof(__pyx_k_bdir), 0, 1, 0, 1},
    {&__pyx_n_s_bend, __pyx_k_bend, sizeof(__pyx_k_bend), 0, 0, 1, 1},
    {&__pyx_n_u_bend, __pyx_k_bend, sizeof(__pyx_k_bend), 0, 1, 0, 1},
    {&__pyx_n_s_bf, __pyx_k_bf, sizeof(__pyx_k_bf), 0, 0, 1, 1},
    {&__pyx_n_s_binary_repr, __pyx_k_binary_repr, sizeof(__pyx_k_binary_repr), 0, 0, 1, 1},
    {&__pyx_n_s_blen, __pyx_k_blen, sizeof(__pyx_k_blen), 0, 0, 1, 1},
    {&__pyx_n_u_blen, __pyx_k_blen, sizeof(__pyx_k_blen), 0, 1, 0, 1},
    {&__pyx_n_s_bstart, __pyx_k_bstart, sizeof(__pyx_k_bstart), 0, 0, 1, 1},
    {&__pyx_n_u_bstart, __pyx_k_bstart, sizeof(__pyx_k_bstart), 0, 1, 0, 1},
    {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_s_cg, __pyx_k_cg, sizeof(__pyx_k_cg), 0, 0, 1, 1},
    {&__pyx_n_u_cg, __pyx_k_cg, sizeof(__pyx_k_cg), 0, 1, 0, 1},
    {&__pyx_n_s_cgdict, __pyx_k_cgdict, sizeof(__pyx_k_cgdict), 0, 0, 1, 1},
    {&__pyx_n_s_cgt, __pyx_k_cgt, sizeof(__pyx_k_cgt), 0, 0, 1, 1},
    {&__pyx_n_s_cgtpl, __pyx_k_cgtpl, sizeof(__pyx_k_cgtpl), 0, 0, 1, 1},
    {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
    {&__pyx_n_u_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 1, 0, 1},
    {&__pyx_n_s_chrid, __pyx_k_chrid, sizeof(__pyx_k_chrid), 0, 0, 1, 1},
    {&__pyx_n_s_chrom, __pyx_k_chrom, sizeof(__pyx_k_chrom), 0, 0, 1, 1},
    {&__pyx_n_s_chrseq, __pyx_k_chrseq, sizeof(__pyx_k_chrseq), 0, 0, 1, 1},
    {&__pyx_n_s_cigar, __pyx_k_cigar, sizeof(__pyx_k_cigar), 0, 0, 1, 1},
    {&__pyx_n_s_cigar_from_string, __pyx_k_cigar_from_string, sizeof(__pyx_k_cigar_from_string), 0, 0, 1, 1},
    {&__pyx_n_s_cigars_dict, __pyx_k_cigars_dict, sizeof(__pyx_k_cigars_dict), 0, 0, 1, 1},
    {&__pyx_n_s_cigarstring, __pyx_k_cigarstring, sizeof(__pyx_k_cigarstring), 0, 0, 1, 1},
    {&__pyx_n_s_cigartuples, __pyx_k_cigartuples, sizeof(__pyx_k_cigartuples), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_collapse_mesyn, __pyx_k_collapse_mesyn, sizeof(__pyx_k_collapse_mesyn), 0, 0, 1, 1},
    {&__pyx_n_s_collect, __pyx_k_collect, sizeof(__pyx_k_collect), 0, 0, 1, 1},
    {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
    {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
    {&__pyx_n_s_concat, __pyx_k_concat, sizeof(__pyx_k_concat), 0, 0, 1, 1},
    {&__pyx_kp_u_contig_ID, __pyx_k_contig_ID, sizeof(__pyx_k_contig_ID), 0, 1, 0, 0},
    {&__pyx_kp_u_contig_ID_length, __pyx_k_contig_ID_length, sizeof(__pyx_k_contig_ID_length), 0, 1, 0, 0},
    {&__pyx_n_s_contigs, __pyx_k_contigs, sizeof(__pyx_k_contigs), 0, 0, 1, 1},
    {&__pyx_n_s_coords, __pyx_k_coords, sizeof(__pyx_k_coords), 0, 0, 1, 1},
    {&__pyx_n_s_coords_in_info, __pyx_k_coords_in_info, sizeof(__pyx_k_coords_in_info), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_kp_u_copy_record_Adding, __pyx_k_copy_record_Adding, sizeof(__pyx_k_copy_record_Adding), 0, 1, 0, 0},
    {&__pyx_n_s_cores, __pyx_k_cores, sizeof(__pyx_k_cores), 0, 0, 1, 1},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
    {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
    {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
    {&__pyx_n_s_df, __pyx_k_df, sizeof(__pyx_k_df), 0, 0, 1, 1},
    {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_kp_u_do_not_align_with_any_query_seq, __pyx_k_do_not_align_with_any_query_seq, sizeof(__pyx_k_do_not_align_with_any_query_seq), 0, 1, 0, 0},
    {&__pyx_kp_u_do_not_align_with_any_reference, __pyx_k_do_not_align_with_any_reference, sizeof(__pyx_k_do_not_align_with_any_reference), 0, 1, 0, 0},
    {&__pyx_kp_u_do_not_align_with_any_reference_2, __pyx_k_do_not_align_with_any_reference_2, sizeof(__pyx_k_do_not_align_with_any_reference_2), 0, 1, 0, 0},
    {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_kp_u_encountered_in, __pyx_k_encountered_in, sizeof(__pyx_k_encountered_in), 0, 1, 0, 0},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_u_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 1, 0, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},
    {&__pyx_n_s_extract_syntenic_from_vcf, __pyx_k_extract_syntenic_from_vcf, sizeof(__pyx_k_extract_syntenic_from_vcf), 0, 0, 1, 1},
    {&__pyx_n_s_extract_syri_regions, __pyx_k_extract_syri_regions, sizeof(__pyx_k_extract_syri_regions), 0, 0, 1, 1},
    {&__pyx_n_s_extract_syri_regions_from_file, __pyx_k_extract_syri_regions_from_file, sizeof(__pyx_k_extract_syri_regions_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_extract_syri_regions_to_list_fro, __pyx_k_extract_syri_regions_to_list_fro, sizeof(__pyx_k_extract_syri_regions_to_list_fro), 0, 0, 1, 1},
    {&__pyx_n_s_extract_syri_regions_to_list_fro_2, __pyx_k_extract_syri_regions_to_list_fro_2, sizeof(__pyx_k_extract_syri_regions_to_list_fro_2), 0, 0, 1, 1},
    {&__pyx_n_s_extract_syri_snvs, __pyx_k_extract_syri_snvs, sizeof(__pyx_k_extract_syri_snvs), 0, 0, 1, 1},
    {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
    {&__pyx_n_s_fetch, __pyx_k_fetch, sizeof(__pyx_k_fetch), 0, 0, 1, 1},
    {&__pyx_n_s_filter_vcfs, __pyx_k_filter_vcfs, sizeof(__pyx_k_filter_vcfs), 0, 0, 1, 1},
    {&__pyx_n_s_fin, __pyx_k_fin, sizeof(__pyx_k_fin), 0, 0, 1, 1},
    {&__pyx_n_s_findata, __pyx_k_findata, sizeof(__pyx_k_findata), 0, 0, 1, 1},
    {&__pyx_n_s_fins, __pyx_k_fins, sizeof(__pyx_k_fins), 0, 0, 1, 1},
    {&__pyx_n_s_flag, __pyx_k_flag, sizeof(__pyx_k_flag), 0, 0, 1, 1},
    {&__pyx_n_u_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 1, 0, 1},
    {&__pyx_n_s_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 0, 0, 1, 1},
    {&__pyx_kp_u_for, __pyx_k_for, sizeof(__pyx_k_for), 0, 1, 0, 0},
    {&__pyx_n_s_force, __pyx_k_force, sizeof(__pyx_k_force), 0, 0, 1, 1},
    {&__pyx_n_s_force_index, __pyx_k_force_index, sizeof(__pyx_k_force_index), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_kp_u_from_VCF, __pyx_k_from_VCF, sizeof(__pyx_k_from_VCF), 0, 1, 0, 0},
    {&__pyx_n_s_from_dict, __pyx_k_from_dict, sizeof(__pyx_k_from_dict), 0, 0, 1, 1},
    {&__pyx_n_s_fullmatch, __pyx_k_fullmatch, sizeof(__pyx_k_fullmatch), 0, 0, 1, 1},
    {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
    {&__pyx_n_s_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
    {&__pyx_n_s_get_degree, __pyx_k_get_degree, sizeof(__pyx_k_get_degree), 0, 0, 1, 1},
    {&__pyx_n_s_get_identity, __pyx_k_get_identity, sizeof(__pyx_k_get_identity), 0, 0, 1, 1},
    {&__pyx_n_s_get_orgs, __pyx_k_get_orgs, sizeof(__pyx_k_get_orgs), 0, 0, 1, 1},
    {&__pyx_n_s_get_orgs_from_df, __pyx_k_get_orgs_from_df, sizeof(__pyx_k_get_orgs_from_df), 0, 0, 1, 1},
    {&__pyx_n_s_getlogger, __pyx_k_getlogger, sizeof(__pyx_k_getlogger), 0, 0, 1, 1},
    {&__pyx_n_s_gettmpfile, __pyx_k_gettmpfile, sizeof(__pyx_k_gettmpfile), 0, 0, 1, 1},
    {&__pyx_kp_u_gz, __pyx_k_gz, sizeof(__pyx_k_gz), 0, 1, 0, 0},
    {&__pyx_n_s_gzip, __pyx_k_gzip, sizeof(__pyx_k_gzip), 0, 0, 1, 1},
    {&__pyx_n_s_gzopen, __pyx_k_gzopen, sizeof(__pyx_k_gzopen), 0, 0, 1, 1},
    {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
    {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_kp_u_id_not_matching_in, __pyx_k_id_not_matching_in, sizeof(__pyx_k_id_not_matching_in), 0, 1, 0, 0},
    {&__pyx_n_s_iden, __pyx_k_iden, sizeof(__pyx_k_iden), 0, 0, 1, 1},
    {&__pyx_n_u_iden, __pyx_k_iden, sizeof(__pyx_k_iden), 0, 1, 0, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_kp_u_in, __pyx_k_in, sizeof(__pyx_k_in), 0, 1, 0, 0},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_u_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 1, 0, 1},
    {&__pyx_n_s_index_filename, __pyx_k_index_filename, sizeof(__pyx_k_index_filename), 0, 0, 1, 1},
    {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_inpath, __pyx_k_inpath, sizeof(__pyx_k_inpath), 0, 0, 1, 1},
    {&__pyx_n_s_inplace, __pyx_k_inplace, sizeof(__pyx_k_inplace), 0, 0, 1, 1},
    {&__pyx_kp_u_into, __pyx_k_into, sizeof(__pyx_k_into), 0, 1, 0, 0},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_inv, __pyx_k_is_inv, sizeof(__pyx_k_is_inv), 0, 0, 1, 1},
    {&__pyx_kp_u_is_not_a_valid_annotation_for_a, __pyx_k_is_not_a_valid_annotation_for_a, sizeof(__pyx_k_is_not_a_valid_annotation_for_a), 0, 1, 0, 0},
    {&__pyx_kp_u_is_repeated, __pyx_k_is_repeated, sizeof(__pyx_k_is_repeated), 0, 1, 0, 0},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_isgzip, __pyx_k_isgzip, sizeof(__pyx_k_isgzip), 0, 0, 1, 1},
    {&__pyx_n_s_issubset, __pyx_k_issubset, sizeof(__pyx_k_issubset), 0, 0, 1, 1},
    {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
    {&__pyx_n_s_iterrows, __pyx_k_iterrows, sizeof(__pyx_k_iterrows), 0, 0, 1, 1},
    {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_keep_nonsyn_calls, __pyx_k_keep_nonsyn_calls, sizeof(__pyx_k_keep_nonsyn_calls), 0, 0, 1, 1},
    {&__pyx_n_s_keep_original, __pyx_k_keep_original, sizeof(__pyx_k_keep_original), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
    {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
    {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
    {&__pyx_n_s_loc, __pyx_k_loc, sizeof(__pyx_k_loc), 0, 0, 1, 1},
    {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
    {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
    {&__pyx_kp_u_merge_vcf_records_Adding, __pyx_k_merge_vcf_records_Adding, sizeof(__pyx_k_merge_vcf_records_Adding), 0, 1, 0, 0},
    {&__pyx_n_s_merge_vcf_records_locals_lambda, __pyx_k_merge_vcf_records_locals_lambda, sizeof(__pyx_k_merge_vcf_records_locals_lambda), 0, 0, 1, 1},
    {&__pyx_kp_u_merge_vcfs_Adding, __pyx_k_merge_vcfs_Adding, sizeof(__pyx_k_merge_vcfs_Adding), 0, 1, 0, 0},
    {&__pyx_n_s_msyd, __pyx_k_msyd, sizeof(__pyx_k_msyd), 0, 0, 1, 1},
    {&__pyx_n_s_msyd_cigar, __pyx_k_msyd_cigar, sizeof(__pyx_k_msyd_cigar), 0, 0, 1, 1},
    {&__pyx_n_s_msyd_coords, __pyx_k_msyd_coords, sizeof(__pyx_k_msyd_coords), 0, 0, 1, 1},
    {&__pyx_n_s_msyd_io, __pyx_k_msyd_io, sizeof(__pyx_k_msyd_io), 0, 0, 1, 1},
    {&__pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_k_msyd_pyxfiles_io_pyx, sizeof(__pyx_k_msyd_pyxfiles_io_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_msyd_util, __pyx_k_msyd_util, sizeof(__pyx_k_msyd_util), 0, 0, 1, 1},
    {&__pyx_n_s_msyd_vars, __pyx_k_msyd_vars, sizeof(__pyx_k_msyd_vars), 0, 0, 1, 1},
    {&__pyx_n_s_multiprocessing, __pyx_k_multiprocessing, sizeof(__pyx_k_multiprocessing), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_new_record, __pyx_k_new_record, sizeof(__pyx_k_new_record), 0, 0, 1, 1},
    {&__pyx_n_s_no_complex, __pyx_k_no_complex, sizeof(__pyx_k_no_complex), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
    {&__pyx_n_s_oldref, __pyx_k_oldref, sizeof(__pyx_k_oldref), 0, 0, 1, 1},
    {&__pyx_n_s_opath, __pyx_k_opath, sizeof(__pyx_k_opath), 0, 0, 1, 1},
    {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_n_s_org, __pyx_k_org, sizeof(__pyx_k_org), 0, 0, 1, 1},
    {&__pyx_n_s_orient, __pyx_k_orient, sizeof(__pyx_k_orient), 0, 0, 1, 1},
    {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
    {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
    {&__pyx_n_s_outf, __pyx_k_outf, sizeof(__pyx_k_outf), 0, 0, 1, 1},
    {&__pyx_n_s_outpath, __pyx_k_outpath, sizeof(__pyx_k_outpath), 0, 0, 1, 1},
    {&__pyx_n_s_ovcf, __pyx_k_ovcf, sizeof(__pyx_k_ovcf), 0, 0, 1, 1},
    {&__pyx_n_s_paf, __pyx_k_paf, sizeof(__pyx_k_paf), 0, 0, 1, 1},
    {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
    {&__pyx_n_s_partial, __pyx_k_partial, sizeof(__pyx_k_partial), 0, 0, 1, 1},
    {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
    {&__pyx_n_s_pool, __pyx_k_pool, sizeof(__pyx_k_pool), 0, 0, 1, 1},
    {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
    {&__pyx_n_s_preset, __pyx_k_preset, sizeof(__pyx_k_preset), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_pysam, __pyx_k_pysam, sizeof(__pyx_k_pysam), 0, 0, 1, 1},
    {&__pyx_n_s_qe, __pyx_k_qe, sizeof(__pyx_k_qe), 0, 0, 1, 1},
    {&__pyx_n_u_qry, __pyx_k_qry, sizeof(__pyx_k_qry), 0, 1, 0, 1},
    {&__pyx_n_s_qry_prim, __pyx_k_qry_prim, sizeof(__pyx_k_qry_prim), 0, 0, 1, 1},
    {&__pyx_n_s_qryname, __pyx_k_qryname, sizeof(__pyx_k_qryname), 0, 0, 1, 1},
    {&__pyx_n_s_qrynames, __pyx_k_qrynames, sizeof(__pyx_k_qrynames), 0, 0, 1, 1},
    {&__pyx_n_s_qryorg, __pyx_k_qryorg, sizeof(__pyx_k_qryorg), 0, 0, 1, 1},
    {&__pyx_n_s_qs, __pyx_k_qs, sizeof(__pyx_k_qs), 0, 0, 1, 1},
    {&__pyx_n_s_query_alignment_length, __pyx_k_query_alignment_length, sizeof(__pyx_k_query_alignment_length), 0, 0, 1, 1},
    {&__pyx_n_s_query_name, __pyx_k_query_name, sizeof(__pyx_k_query_name), 0, 0, 1, 1},
    {&__pyx_n_s_query_sequence, __pyx_k_query_sequence, sizeof(__pyx_k_query_sequence), 0, 0, 1, 1},
    {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
    {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_ranges_dict, __pyx_k_ranges_dict, sizeof(__pyx_k_ranges_dict), 0, 0, 1, 1},
    {&__pyx_n_s_rawsyriout, __pyx_k_rawsyriout, sizeof(__pyx_k_rawsyriout), 0, 0, 1, 1},
    {&__pyx_n_u_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 1, 0, 1},
    {&__pyx_n_s_rc, __pyx_k_rc, sizeof(__pyx_k_rc), 0, 0, 1, 1},
    {&__pyx_n_s_rcs, __pyx_k_rcs, sizeof(__pyx_k_rcs), 0, 0, 1, 1},
    {&__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_readPAF, __pyx_k_readPAF, sizeof(__pyx_k_readPAF), 0, 0, 1, 1},
    {&__pyx_n_s_readSAMBAM, __pyx_k_readSAMBAM, sizeof(__pyx_k_readSAMBAM), 0, 0, 1, 1},
    {&__pyx_n_s_read_pff, __pyx_k_read_pff, sizeof(__pyx_k_read_pff), 0, 0, 1, 1},
    {&__pyx_n_s_readfasta, __pyx_k_readfasta, sizeof(__pyx_k_readfasta), 0, 0, 1, 1},
    {&__pyx_kp_u_reading_coords_from_INFO_only_su, __pyx_k_reading_coords_from_INFO_only_su, sizeof(__pyx_k_reading_coords_from_INFO_only_su), 0, 1, 0, 0},
    {&__pyx_kp_u_reading_coords_from_INFO_only_su_2, __pyx_k_reading_coords_from_INFO_only_su_2, sizeof(__pyx_k_reading_coords_from_INFO_only_su_2), 0, 1, 0, 0},
    {&__pyx_n_s_readline, __pyx_k_readline, sizeof(__pyx_k_readline), 0, 0, 1, 1},
    {&__pyx_n_s_readsyriout, __pyx_k_readsyriout, sizeof(__pyx_k_readsyriout), 0, 0, 1, 1},
    {&__pyx_n_u_readsyriout, __pyx_k_readsyriout, sizeof(__pyx_k_readsyriout), 0, 1, 0, 1},
    {&__pyx_n_s_reduce_vcfs, __pyx_k_reduce_vcfs, sizeof(__pyx_k_reduce_vcfs), 0, 0, 1, 1},
    {&__pyx_kp_u_reduce_vcfs_called_with_empty_vc, __pyx_k_reduce_vcfs_called_with_empty_vc, sizeof(__pyx_k_reduce_vcfs_called_with_empty_vc), 0, 1, 0, 0},
    {&__pyx_kp_u_reduce_vcfs_called_with_only_one, __pyx_k_reduce_vcfs_called_with_only_one, sizeof(__pyx_k_reduce_vcfs_called_with_only_one), 0, 1, 0, 0},
    {&__pyx_n_s_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 0, 1, 1},
    {&__pyx_n_u_ref, __pyx_k_ref, sizeof(__pyx_k_ref), 0, 1, 0, 1},
    {&__pyx_n_s_ref_prim, __pyx_k_ref_prim, sizeof(__pyx_k_ref_prim), 0, 0, 1, 1},
    {&__pyx_n_s_reference_end, __pyx_k_reference_end, sizeof(__pyx_k_reference_end), 0, 0, 1, 1},
    {&__pyx_n_s_reference_name, __pyx_k_reference_name, sizeof(__pyx_k_reference_name), 0, 0, 1, 1},
    {&__pyx_n_s_reference_start, __pyx_k_reference_start, sizeof(__pyx_k_reference_start), 0, 0, 1, 1},
    {&__pyx_n_s_reforg, __pyx_k_reforg, sizeof(__pyx_k_reforg), 0, 0, 1, 1},
    {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
    {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
    {&__pyx_n_s_rs, __pyx_k_rs, sizeof(__pyx_k_rs), 0, 0, 1, 1},
    {&__pyx_n_u_rt, __pyx_k_rt, sizeof(__pyx_k_rt), 0, 1, 0, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_n_s_samples, __pyx_k_samples, sizeof(__pyx_k_samples), 0, 0, 1, 1},
    {&__pyx_n_s_samtocoords, __pyx_k_samtocoords, sizeof(__pyx_k_samtocoords), 0, 0, 1, 1},
    {&__pyx_n_s_save_cigars, __pyx_k_save_cigars, sizeof(__pyx_k_save_cigars), 0, 0, 1, 1},
    {&__pyx_n_s_save_to_pff, __pyx_k_save_to_pff, sizeof(__pyx_k_save_to_pff), 0, 0, 1, 1},
    {&__pyx_n_s_save_to_vcf, __pyx_k_save_to_vcf, sizeof(__pyx_k_save_to_vcf), 0, 0, 1, 1},
    {&__pyx_n_s_scipy_stats, __pyx_k_scipy_stats, sizeof(__pyx_k_scipy_stats), 0, 0, 1, 1},
    {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
    {&__pyx_n_s_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 0, 1, 1},
    {&__pyx_n_u_seq, __pyx_k_seq, sizeof(__pyx_k_seq), 0, 1, 0, 1},
    {&__pyx_n_s_sort_values, __pyx_k_sort_values, sizeof(__pyx_k_sort_values), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
    {&__pyx_n_s_splitlines, __pyx_k_splitlines, sizeof(__pyx_k_splitlines), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_u_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 1, 0, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
    {&__pyx_n_s_subset_samples, __pyx_k_subset_samples, sizeof(__pyx_k_subset_samples), 0, 0, 1, 1},
    {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
    {&__pyx_n_s_synorg, __pyx_k_synorg, sizeof(__pyx_k_synorg), 0, 0, 1, 1},
    {&__pyx_n_s_syns, __pyx_k_syns, sizeof(__pyx_k_syns), 0, 0, 1, 1},
    {&__pyx_kp_u_syri_vcf, __pyx_k_syri_vcf, sizeof(__pyx_k_syri_vcf), 0, 1, 0, 0},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_tabix_index, __pyx_k_tabix_index, sizeof(__pyx_k_tabix_index), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_kp_u_to_VCF_Check_if_the_chromosome, __pyx_k_to_VCF_Check_if_the_chromosome, sizeof(__pyx_k_to_VCF_Check_if_the_chromosome), 0, 1, 0, 0},
    {&__pyx_kp_u_to_header, __pyx_k_to_header, sizeof(__pyx_k_to_header), 0, 1, 0, 0},
    {&__pyx_n_s_to_pff, __pyx_k_to_pff, sizeof(__pyx_k_to_pff), 0, 0, 1, 1},
    {&__pyx_n_s_to_string, __pyx_k_to_string, sizeof(__pyx_k_to_string), 0, 0, 1, 1},
    {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
    {&__pyx_n_u_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 1, 0, 1},
    {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_kp_u_values_were_overwritten, __pyx_k_values_were_overwritten, sizeof(__pyx_k_values_were_overwritten), 0, 1, 0, 0},
    {&__pyx_n_u_vartype, __pyx_k_vartype, sizeof(__pyx_k_vartype), 0, 1, 0, 1},
    {&__pyx_n_u_vcf, __pyx_k_vcf, sizeof(__pyx_k_vcf), 0, 1, 0, 1},
    {&__pyx_n_s_vcfin, __pyx_k_vcfin, sizeof(__pyx_k_vcfin), 0, 0, 1, 1},
    {&__pyx_n_s_vcfout, __pyx_k_vcfout, sizeof(__pyx_k_vcfout), 0, 0, 1, 1},
    {&__pyx_n_s_vcfs, __pyx_k_vcfs, sizeof(__pyx_k_vcfs), 0, 0, 1, 1},
    {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
    {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
    {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_builtin_format = __Pyx_GetBuiltinName(__pyx_n_s_format); if (!__pyx_builtin_format) __PYX_ERR(0, 165, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 183, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_n_s_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 199, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_builtin_any = __Pyx_GetBuiltinName(__pyx_n_s_any); if (!__pyx_builtin_any) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 318, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 356, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 357, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 586, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 826, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 937, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":986
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../../../../../../../../gpfs/scratch/pr32va/ra98jam/ra98jam/pip-build-env-khs6ftpb/overlay/lib/python3.8/site-packages/numpy/__init__.cython-30.pxd":992
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "msyd/pyxfiles/io.pyx":44
 *     for i in "MIDNSHPX=":
 *         cg = cg.replace(i, ';'+i+',')
 *     return [i.split(';') for i in cg.split(',')[:-1]]             # <<<<<<<<<<<<<<
 * 
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 */
  __pyx_slice__5 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "msyd/pyxfiles/io.pyx":53
 * 
 *     # Test if the file is Gzipped or not
 *     with gzopen(f, 'rb') as fin:             # <<<<<<<<<<<<<<
 *         try:
 *             fin.read(1)
 */
  __pyx_tuple__7 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "msyd/pyxfiles/io.pyx":110
 *         with open(f, 'r') as fin:
 *             for l in fin:
 *                 if l[:3] == '@SQ':             # <<<<<<<<<<<<<<
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:
 */
  __pyx_slice__10 = PySlice_New(Py_None, __pyx_int_3, Py_None); if (unlikely(!__pyx_slice__10)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__10);
  __Pyx_GIVEREF(__pyx_slice__10);

  /* "msyd/pyxfiles/io.pyx":112
 *                 if l[:3] == '@SQ':
 *                     c, s = 0, 0
 *                     for h in l.strip().split()[1:]:             # <<<<<<<<<<<<<<
 *                         h = h.split(':')
 *                         if h[0] == 'SN': c = h[1]
 */
  __pyx_slice__11 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__11)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);

  /* "msyd/pyxfiles/io.pyx":120
 *                 elif l[0] == '@': continue
 * 
 *                 l = l.split('\t')[:6]             # <<<<<<<<<<<<<<
 *                 # if l[1] == '2064': break
 *                 if l[2] == '*':
 */
  __pyx_slice__15 = PySlice_New(Py_None, __pyx_int_6, Py_None); if (unlikely(!__pyx_slice__15)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__15);
  __Pyx_GIVEREF(__pyx_slice__15);

  /* "msyd/pyxfiles/io.pyx":129
 *                     logger.error('Incorrect CIGAR string found. CIGAR string can only have I/D/H/S/X/=. CIGAR STRING: ' + l[5])
 *                     sys.exit()
 *                 cgt = [[int(j[0]), j[1]] for j in [i.split(';') for i in l[5].replace('S', ';S,').replace('H', ';H,').replace('=', ';=,').replace('X', ';X,').replace('I', ';I,').replace('D', ';D,').split(',')[:-1]]]             # <<<<<<<<<<<<<<
 *                 if len(cgt) > 2:
 *                     if True in [True if i[1] in ['S', 'H'] else False for i in cgt[1:-1]]:
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_u_S, __pyx_kp_u_S_2); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_u_H, __pyx_kp_u_H_2); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_kp_u__19, __pyx_kp_u__20); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_u_X, __pyx_kp_u_X_2); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_u_I, __pyx_kp_u_I_2); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_u_D, __pyx_kp_u_D_2); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "msyd/pyxfiles/io.pyx":146
 *                         qs = cgt[0][0] + 1
 *                     else:
 *                         print('ERROR: CIGAR string starting with non-matching base')             # <<<<<<<<<<<<<<
 *                     qe = qs - 1 + sum([i[0] for i in cgt if i[1] in ['X', '=', 'I']])
 *                 elif bf[7] == '1':  # inverted alignment
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_ERROR_CIGAR_string_starting_with); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "msyd/pyxfiles/io.pyx":195
 *             return samtocoords(fin)
 *         else:
 *             raise ValueError("Wrong parameter")             # <<<<<<<<<<<<<<
 *     except ValueError as e:
 *         logger.error("Error in opening BAM/SAM file. " + str(e))
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_Wrong_parameter); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "msyd/pyxfiles/io.pyx":238
 *                 sys.exit()
 *             if len(aln.cigartuples) > 2:
 *                 if True in [True if i[0] in [4,5] else False for i in aln.cigartuples[1:-1]]:             # <<<<<<<<<<<<<<
 *                     logger.error("Incorrect CIGAR string found. Clipped bases inside alignment. H/S can only be in the terminal. CIGAR STRING: " + aln.cigarstring)
 *                     sys.exit()
 */
  __pyx_slice__27 = PySlice_New(__pyx_int_1, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__27)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__27);
  __Pyx_GIVEREF(__pyx_slice__27);

  /* "msyd/pyxfiles/io.pyx":304
 *                 alen = abs(aend - astart) + 1
 *                 blen = abs(bend - bstart) + 1 if bdir == 1 else bstart - bend + 1
 *                 cg = [i.split(":")[-1] for i in line[12:] if i[:2] == 'cg']             # <<<<<<<<<<<<<<
 *                 if len(cg) != 1:
 *                     logger.error("CIGAR string is not present in PAF at line {}. Exiting.".format("\t".join(line)))
 */
  __pyx_slice__29 = PySlice_New(__pyx_int_12, Py_None, Py_None); if (unlikely(!__pyx_slice__29)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__29);
  __Pyx_GIVEREF(__pyx_slice__29);
  __pyx_slice__30 = PySlice_New(Py_None, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__30)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__30);
  __Pyx_GIVEREF(__pyx_slice__30);

  /* "msyd/pyxfiles/io.pyx":442
 *     if coords_in_info and len(orgsvcf) != 1:
 *         logger.error("reading coords from INFO only supported for VCFs with exactly one sample! Check if your SyRI installation is up to date!")
 *         raise ValueError("reading coords from INFO only supported for VCFs with exactly one sample!")             # <<<<<<<<<<<<<<
 * 
 *     # force indexing to allow for calling fetch later.
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_reading_coords_from_INFO_only_su_2); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "msyd/pyxfiles/io.pyx":513
 *             if coords_in_info:
 *                 sample = orgsvcf[0] # there can only be one sample
 *                 for info, ft in [('ChrB', 'CHR'), ('StartB', 'START'), ('EndB', 'END')]:             # <<<<<<<<<<<<<<
 *                     if info in rec.info:
 *                         new_rec.samples[sample][ft] = rec.info[info]
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_u_ChrB, __pyx_n_u_CHR); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_u_StartB, __pyx_n_u_START); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_n_u_EndB, __pyx_n_u_END); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_tuple__32, __pyx_tuple__33, __pyx_tuple__34); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "msyd/pyxfiles/io.pyx":1140
 * 
 *     syns = deque()
 *     orgs = f.readline().strip()[1:].split("\t")[2:] # 0 is ANN, 1 is ref             # <<<<<<<<<<<<<<
 *     for l in f:
 *         l = l.strip().split('\t')
 */
  __pyx_slice__44 = PySlice_New(__pyx_int_2, Py_None, Py_None); if (unlikely(!__pyx_slice__44)) __PYX_ERR(0, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__44);
  __Pyx_GIVEREF(__pyx_slice__44);

  /* "msyd/pyxfiles/io.pyx":28
 * from msyd.coords import Pansyn
 * from msyd.vars import SNV
 * import msyd.util as util             # <<<<<<<<<<<<<<
 * import msyd.cigar as cigar
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_msyd, __pyx_n_s_util); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "msyd/pyxfiles/io.pyx":29
 * from msyd.vars import SNV
 * import msyd.util as util
 * import msyd.cigar as cigar             # <<<<<<<<<<<<<<
 * 
 * logger = util.CustomFormatter.getlogger(__name__)
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_s_msyd, __pyx_n_s_cigar); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "msyd/pyxfiles/io.pyx":32
 * 
 * logger = util.CustomFormatter.getlogger(__name__)
 * np.random.seed(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "msyd/pyxfiles/io.pyx":38
 * ## copied over from func
 * 
 * def cgtpl(cg):             # <<<<<<<<<<<<<<
 *     """
 *     Takes a cigar string as input and returns a cigar tuple
 */
  __pyx_tuple__49 = PyTuple_Pack(3, __pyx_n_s_cg, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_cgtpl, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 38, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":47
 * 
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 * def readfasta(f):             # <<<<<<<<<<<<<<
 *     out = {}
 *     chrid = ''
 */
  __pyx_tuple__51 = PyTuple_Pack(8, __pyx_n_s_f, __pyx_n_s_out, __pyx_n_s_chrid, __pyx_n_s_chrseq, __pyx_n_s_fin, __pyx_n_s_isgzip, __pyx_n_s_line, __pyx_n_s_e); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_readfasta, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 47, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":102
 * 
 * 
 * def samtocoords(f):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('SAM reader')
 *     rc = {}        # Referece chromosomes
 */
  __pyx_tuple__53 = PyTuple_Pack(27, __pyx_n_s_f, __pyx_n_s_logger, __pyx_n_s_rc, __pyx_n_s_rcs, __pyx_n_s_al, __pyx_n_s_fin, __pyx_n_s_l, __pyx_n_s_c, __pyx_n_s_s, __pyx_n_s_h, __pyx_n_s_cgt, __pyx_n_s_bf, __pyx_n_s_rs, __pyx_n_s_re, __pyx_n_s_qs, __pyx_n_s_qe, __pyx_n_s_k, __pyx_n_s_e, __pyx_n_s_j, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 27, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_samtocoords, 102, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 102, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":187
 * # END
 * 
 * def readSAMBAM(fin, type='B'):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:
 */
  __pyx_tuple__55 = PyTuple_Pack(32, __pyx_n_s_fin, __pyx_n_s_type, __pyx_n_s_logger, __pyx_n_s_findata, __pyx_n_s_e, __pyx_n_s_qry_prim, __pyx_n_s_ref_prim, __pyx_n_s_cgdict, __pyx_n_s_coords, __pyx_n_s_index, __pyx_n_s_aln, __pyx_n_s_astart, __pyx_n_s_aend, __pyx_n_s_is_inv, __pyx_n_s_bstart, __pyx_n_s_bend, __pyx_n_s_alen, __pyx_n_s_blen, __pyx_n_s_iden, __pyx_n_s_adir, __pyx_n_s_bdir, __pyx_n_s_achr, __pyx_n_s_bchr, __pyx_n_s_seq, __pyx_n_s_cg, __pyx_n_s_k, __pyx_n_s_v, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 32, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_readSAMBAM, 187, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_tuple__57 = PyTuple_Pack(1, ((PyObject*)__pyx_n_u_B)); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "msyd/pyxfiles/io.pyx":289
 * # END
 * 
 * def readPAF(paf):             # <<<<<<<<<<<<<<
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 */
  __pyx_tuple__58 = PyTuple_Pack(23, __pyx_n_s_paf, __pyx_n_s_coords, __pyx_n_s_logger, __pyx_n_s_fin, __pyx_n_s_line, __pyx_n_s_astart, __pyx_n_s_aend, __pyx_n_s_adir, __pyx_n_s_bdir, __pyx_n_s_bstart, __pyx_n_s_bend, __pyx_n_s_alen, __pyx_n_s_blen, __pyx_n_s_cg, __pyx_n_s_iden, __pyx_n_s_achr, __pyx_n_s_bchr, __pyx_n_s_e, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_readPAF, 289, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 289, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":338
 * # pasted from plotsr, parsing syri output
 * VARS = ['SYN', 'SYNAL', 'INV', 'TRANS', 'INVTR', 'DUP', 'INVDP']
 * cpdef readsyriout(f):             # <<<<<<<<<<<<<<
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 *     logger = logging.getLogger("readsyriout")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_n_s_f); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_readsyriout, 338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":372
 *     return df, chrid_dict
 * 
 * cpdef extract_syri_snvs(fin):             # <<<<<<<<<<<<<<
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_fin); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_extract_syri_snvs, 372, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 372, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":398
 * ##FORMAT=<ID=HAP,Number=1,Type=Character,Description="Unique haplotype identifier">"""
 * 
 * cpdef filter_vcfs(syns, vcfs: List[Union[str, os.PathLike]], ref: Union[str, os.PathLike], add_syn_anns=False, no_complex=False):             # <<<<<<<<<<<<<<
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(5, __pyx_n_s_syns, __pyx_n_s_vcfs, __pyx_n_s_ref, __pyx_n_s_add_syn_anns, __pyx_n_s_no_complex); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_filter_vcfs, 398, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_tuple__66 = PyTuple_Pack(2, Py_False, Py_False); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "msyd/pyxfiles/io.pyx":408
 *     return tmpfiles
 * 
 * cpdef void extract_syntenic_from_vcf(syns, inpath:Union[str, os.PathLike], outpath: Union[str, os.PathLike], force_index=True, synorg='ref', ref=None, keep_nonsyn_calls=False, add_syn_anns=True, add_cigar=False, add_identity=True, no_complex=False, coords_in_info=False):             # <<<<<<<<<<<<<<
 *     """
 *     Extract syntenic annotations from a given VCF.
 */
  __pyx_tuple__67 = PyTuple_Pack(12, __pyx_n_s_syns, __pyx_n_s_inpath, __pyx_n_s_outpath, __pyx_n_s_force_index, __pyx_n_s_synorg, __pyx_n_s_ref, __pyx_n_s_keep_nonsyn_calls, __pyx_n_s_add_syn_anns, __pyx_n_s_add_cigar, __pyx_n_s_add_identity, __pyx_n_s_no_complex, __pyx_n_s_coords_in_info); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(12, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_extract_syntenic_from_vcf, 408, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_tuple__69 = PyTuple_Pack(9, Py_True, __pyx_n_u_ref, Py_None, Py_False, Py_True, Py_False, Py_True, Py_False, Py_False); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "msyd/pyxfiles/io.pyx":521
 *     #vcfin.close()
 * 
 * cpdef void reduce_vcfs(vcfs: List[Union[str, os.PathLike]], opath: Union[str, os.PathLike], add_syn_anns=True):             # <<<<<<<<<<<<<<
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(3, __pyx_n_s_vcfs, __pyx_n_s_opath, __pyx_n_s_add_syn_anns); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_reduce_vcfs, 521, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_tuple__72 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "msyd/pyxfiles/io.pyx":541
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)
 * 
 * cpdef add_syn_anns_to_vcf(syns, vcfin: Union[str, os.PathLike], vcfout: Union[str, os.PathLike], ref=None):             # <<<<<<<<<<<<<<
 *     """Takes a VCF file, overwrites it adding annotations for core/cross-syn region. Other records are preserved as-is."""
 *     cdef:
 */
  __pyx_tuple__73 = PyTuple_Pack(4, __pyx_n_s_syns, __pyx_n_s_vcfin, __pyx_n_s_vcfout, __pyx_n_s_ref); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_add_syn_anns_to_vcf, 541, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_tuple__75 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "msyd/pyxfiles/io.pyx":894
 *     ovcf.write(rec)
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)
 */
  __pyx_tuple__76 = PyTuple_Pack(5, __pyx_n_s_fin, __pyx_n_s_ref, __pyx_n_s_anns, __pyx_n_s_reforg, __pyx_n_s_qryorg); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_extract_syri_regions_from_file, 894, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 894, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":899
 * 
 * 
 * cpdef extract_syri_regions(rawsyriout, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     """
 *     Given a syri output file, extract all regions matching a given annotation.
 */
  __pyx_tuple__78 = PyTuple_Pack(5, __pyx_n_s_rawsyriout, __pyx_n_s_ref, __pyx_n_s_anns, __pyx_n_s_reforg, __pyx_n_s_qryorg); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_extract_syri_regions, 899, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 899, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":928
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     `extract_syri_regions`, but for processing a list of inputs
 */
  __pyx_tuple__80 = PyTuple_Pack(9, __pyx_n_s_fins, __pyx_n_s_qrynames, __pyx_n_s_cores, __pyx_n_s_kwargs, __pyx_n_s_partial, __pyx_n_s_syns, __pyx_n_s_pool, __pyx_n_s_fin, __pyx_n_s_qryname); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_extract_syri_regions_to_list_fro_2, 928, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 928, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":948
 *     #        for fin in fins]
 * 
 * cpdef void save_to_vcf(syns: Union[str, os.PathLike], outf: Union[str, os.PathLike], ref=None, cores=1, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     #TODO add functionality to incorporate reference information as optional argument
 *     cdef:
 */
  __pyx_tuple__82 = PyTuple_Pack(6, __pyx_n_s_syns, __pyx_n_s_outf, __pyx_n_s_ref, __pyx_n_s_cores, __pyx_n_s_add_cigar, __pyx_n_s_add_identity); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_save_to_vcf, 948, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_tuple__84 = PyTuple_Pack(4, Py_None, __pyx_int_1, Py_False, Py_True); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "msyd/pyxfiles/io.pyx":1048
 *     out.close()
 * 
 * cpdef save_to_pff(df, buf, save_cigars=True, collapse_mesyn=True):             # <<<<<<<<<<<<<<
 *     """Takes a df containing `Pansyn` objects and writes them in pansynteny file format to `buf`.
 *     Can be used to print directly to a file, or to print or further process the output.
 */
  __pyx_tuple__85 = PyTuple_Pack(4, __pyx_n_s_df, __pyx_n_s_buf, __pyx_n_s_save_cigars, __pyx_n_s_collapse_mesyn); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_save_to_pff, 1048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __pyx_tuple__87 = PyTuple_Pack(2, Py_True, Py_True); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "msyd/pyxfiles/io.pyx":1133
 *     buf.write("\n")
 * 
 * cpdef read_pff(f):             # <<<<<<<<<<<<<<
 *     """Takes a file object or path to a file in PFF format and reads it in as a DataFrame.
 *     """
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_msyd_pyxfiles_io_pyx, __pyx_n_s_read_pff, 1133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.method_name = &__pyx_n_s_keys;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_99999999999 = PyInt_FromString((char *)"99999999999", 0, 0); if (unlikely(!__pyx_int_99999999999)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records_spec, NULL); if (unlikely(!__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records)) __PYX_ERR(0, 802, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records_spec, __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records) < 0) __PYX_ERR(0, 802, __pyx_L1_error)
  #else
  __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records = &__pyx_type_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records) < 0) __PYX_ERR(0, 802, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records->tp_dictoffset && __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4msyd_2io___pyx_scope_struct____pyx_f_4msyd_2io_merge_vcf_records->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files_spec, NULL); if (unlikely(!__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files)) __PYX_ERR(0, 928, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files_spec, __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files) < 0) __PYX_ERR(0, 928, __pyx_L1_error)
  #else
  __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files = &__pyx_type_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files) < 0) __PYX_ERR(0, 928, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files->tp_dictoffset && __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_4msyd_2io___pyx_scope_struct_1_extract_syri_regions_to_list_from_files->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 202, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 225, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(1, 812, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_number) __PYX_ERR(1, 814, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(1, 816, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(1, 818, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(1, 820, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(1, 822, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(1, 824, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(1, 826, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(1, 828, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_character) __PYX_ERR(1, 830, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_io(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_io},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "io",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initio(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initio(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_io(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_io(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_io(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'io' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("io", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "io" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_io(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_msyd__io) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "msyd.io")) {
      if (unlikely((PyDict_SetItemString(modules, "msyd.io", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "msyd/pyxfiles/io.pyx":5
 * # cython: language_level = 3
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from scipy.stats import *
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":6
 * 
 * import numpy as np
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from scipy.stats import *
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pandas, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":7
 * import numpy as np
 * import pandas as pd
 * from scipy.stats import *             # <<<<<<<<<<<<<<
 * 
 * from multiprocessing import Pool
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__16);
  __Pyx_GIVEREF(__pyx_n_s__16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__16)) __PYX_ERR(0, 7, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_scipy_stats, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_3) < 0) __PYX_ERR(0, 7, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":9
 * from scipy.stats import *
 * 
 * from multiprocessing import Pool             # <<<<<<<<<<<<<<
 * from functools import partial
 * from collections import deque, defaultdict, OrderedDict
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Pool);
  __Pyx_GIVEREF(__pyx_n_s_Pool);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Pool)) __PYX_ERR(0, 9, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_multiprocessing, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Pool); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pool, __pyx_t_3) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":10
 * 
 * from multiprocessing import Pool
 * from functools import partial             # <<<<<<<<<<<<<<
 * from collections import deque, defaultdict, OrderedDict
 * from gzip import open as gzopen
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_partial);
  __Pyx_GIVEREF(__pyx_n_s_partial);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_partial)) __PYX_ERR(0, 10, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_partial); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_partial, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":11
 * from multiprocessing import Pool
 * from functools import partial
 * from collections import deque, defaultdict, OrderedDict             # <<<<<<<<<<<<<<
 * from gzip import open as gzopen
 * from gzip import BadGzipFile
 */
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_deque)) __PYX_ERR(0, 11, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_defaultdict);
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_defaultdict)) __PYX_ERR(0, 11, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_s_OrderedDict)) __PYX_ERR(0, 11, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_deque); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_3) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict, __pyx_t_3) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_3) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":12
 * from functools import partial
 * from collections import deque, defaultdict, OrderedDict
 * from gzip import open as gzopen             # <<<<<<<<<<<<<<
 * from gzip import BadGzipFile
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_open);
  __Pyx_GIVEREF(__pyx_n_s_open);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_open)) __PYX_ERR(0, 12, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_gzip, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_open); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gzopen, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":13
 * from collections import deque, defaultdict, OrderedDict
 * from gzip import open as gzopen
 * from gzip import BadGzipFile             # <<<<<<<<<<<<<<
 * 
 * from collections import deque
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_BadGzipFile);
  __Pyx_GIVEREF(__pyx_n_s_BadGzipFile);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_BadGzipFile)) __PYX_ERR(0, 13, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_gzip, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BadGzipFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BadGzipFile, __pyx_t_3) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":15
 * from gzip import BadGzipFile
 * 
 * from collections import deque             # <<<<<<<<<<<<<<
 * import sys
 * import os
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_deque)) __PYX_ERR(0, 15, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_deque); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_deque, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":16
 * 
 * from collections import deque
 * import sys             # <<<<<<<<<<<<<<
 * import os
 * import logging
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_3) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":17
 * from collections import deque
 * import sys
 * import os             # <<<<<<<<<<<<<<
 * import logging
 * import pysam
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_3) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":18
 * import sys
 * import os
 * import logging             # <<<<<<<<<<<<<<
 * import pysam
 * import re
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_logging, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_3) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":19
 * import os
 * import logging
 * import pysam             # <<<<<<<<<<<<<<
 * import re
 * from gc import collect
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_pysam, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pysam, __pyx_t_3) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":20
 * import logging
 * import pysam
 * import re             # <<<<<<<<<<<<<<
 * from gc import collect
 * 
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_re, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_re, __pyx_t_3) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":21
 * import pysam
 * import re
 * from gc import collect             # <<<<<<<<<<<<<<
 * 
 * cimport numpy as np
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_collect);
  __Pyx_GIVEREF(__pyx_n_s_collect);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_collect)) __PYX_ERR(0, 21, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_gc, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_collect); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collect, __pyx_t_3) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":25
 * cimport numpy as np
 * 
 * from msyd.coords import Range             # <<<<<<<<<<<<<<
 * from msyd.coords import Pansyn
 * from msyd.vars import SNV
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Range);
  __Pyx_GIVEREF(__pyx_n_s_Range);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Range)) __PYX_ERR(0, 25, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_msyd_coords, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_Range); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Range, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":26
 * 
 * from msyd.coords import Range
 * from msyd.coords import Pansyn             # <<<<<<<<<<<<<<
 * from msyd.vars import SNV
 * import msyd.util as util
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_Pansyn);
  __Pyx_GIVEREF(__pyx_n_s_Pansyn);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_Pansyn)) __PYX_ERR(0, 26, __pyx_L1_error);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_msyd_coords, __pyx_t_3, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Pansyn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pansyn, __pyx_t_3) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":27
 * from msyd.coords import Range
 * from msyd.coords import Pansyn
 * from msyd.vars import SNV             # <<<<<<<<<<<<<<
 * import msyd.util as util
 * import msyd.cigar as cigar
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_SNV);
  __Pyx_GIVEREF(__pyx_n_s_SNV);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_SNV)) __PYX_ERR(0, 27, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_msyd_vars, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_SNV); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SNV, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":28
 * from msyd.coords import Pansyn
 * from msyd.vars import SNV
 * import msyd.util as util             # <<<<<<<<<<<<<<
 * import msyd.cigar as cigar
 * 
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_msyd_util, __pyx_tuple__46); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_util, __pyx_t_3) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":29
 * from msyd.vars import SNV
 * import msyd.util as util
 * import msyd.cigar as cigar             # <<<<<<<<<<<<<<
 * 
 * logger = util.CustomFormatter.getlogger(__name__)
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_msyd_cigar, __pyx_tuple__47); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cigar, __pyx_t_3) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "msyd/pyxfiles/io.pyx":31
 * import msyd.cigar as cigar
 * 
 * logger = util.CustomFormatter.getlogger(__name__)             # <<<<<<<<<<<<<<
 * np.random.seed(1)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_CustomFormatter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getlogger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logger, __pyx_t_4) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":32
 * 
 * logger = util.CustomFormatter.getlogger(__name__)
 * np.random.seed(1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_random); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_seed); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":38
 * ## copied over from func
 * 
 * def cgtpl(cg):             # <<<<<<<<<<<<<<
 *     """
 *     Takes a cigar string as input and returns a cigar tuple
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_1cgtpl, 0, __pyx_n_s_cgtpl, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cgtpl, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":47
 * 
 * # TODO maybe use https://pypi.org/project/pyfasta/ instead
 * def readfasta(f):             # <<<<<<<<<<<<<<
 *     out = {}
 *     chrid = ''
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_3readfasta, 0, __pyx_n_s_readfasta, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readfasta, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":102
 * 
 * 
 * def samtocoords(f):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('SAM reader')
 *     rc = {}        # Referece chromosomes
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_5samtocoords, 0, __pyx_n_s_samtocoords, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_samtocoords, __pyx_t_2) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":187
 * # END
 * 
 * def readSAMBAM(fin, type='B'):             # <<<<<<<<<<<<<<
 *     logger = logging.getLogger('Reading BAM/SAM file')
 *     try:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_7readSAMBAM, 0, __pyx_n_s_readSAMBAM, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__57);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readSAMBAM, __pyx_t_2) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":289
 * # END
 * 
 * def readPAF(paf):             # <<<<<<<<<<<<<<
 *     coords = deque()
 *     logger = logging.getLogger('Reading PAF file')
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_9readPAF, 0, __pyx_n_s_readPAF, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readPAF, __pyx_t_2) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":337
 * 
 * # pasted from plotsr, parsing syri output
 * VARS = ['SYN', 'SYNAL', 'INV', 'TRANS', 'INVTR', 'DUP', 'INVDP']             # <<<<<<<<<<<<<<
 * cpdef readsyriout(f):
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 */
  __pyx_t_2 = PyList_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_SYN);
  __Pyx_GIVEREF(__pyx_n_u_SYN);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_SYN)) __PYX_ERR(0, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_SYNAL);
  __Pyx_GIVEREF(__pyx_n_u_SYNAL);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_SYNAL)) __PYX_ERR(0, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INV);
  __Pyx_GIVEREF(__pyx_n_u_INV);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_u_INV)) __PYX_ERR(0, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_TRANS);
  __Pyx_GIVEREF(__pyx_n_u_TRANS);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_u_TRANS)) __PYX_ERR(0, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INVTR);
  __Pyx_GIVEREF(__pyx_n_u_INVTR);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_u_INVTR)) __PYX_ERR(0, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_DUP);
  __Pyx_GIVEREF(__pyx_n_u_DUP);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_u_DUP)) __PYX_ERR(0, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_INVDP);
  __Pyx_GIVEREF(__pyx_n_u_INVDP);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_u_INVDP)) __PYX_ERR(0, 337, __pyx_L1_error);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VARS, __pyx_t_2) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":338
 * # pasted from plotsr, parsing syri output
 * VARS = ['SYN', 'SYNAL', 'INV', 'TRANS', 'INVTR', 'DUP', 'INVDP']
 * cpdef readsyriout(f):             # <<<<<<<<<<<<<<
 *     # Reads syri.out. Select: achr, astart, aend, bchr, bstart, bend, srtype
 *     logger = logging.getLogger("readsyriout")
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_11readsyriout, 0, __pyx_n_s_readsyriout, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_readsyriout, __pyx_t_2) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":372
 *     return df, chrid_dict
 * 
 * cpdef extract_syri_snvs(fin):             # <<<<<<<<<<<<<<
 *     syri_regs = deque()
 *     with open(f, 'r') as fin:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_13extract_syri_snvs, 0, __pyx_n_s_extract_syri_snvs, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_syri_snvs, __pyx_t_2) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":386
 *     return df
 * 
 * HEADER="""##INFO=<ID=END,Number=1,Type=Integer,Description="End position on reference genome">             # <<<<<<<<<<<<<<
 * ##ALT<ID=CORESYN,Description="Core syntenic region (syntenic between any two samples)">
 * ##ALT<ID=CROSSSYN,Description="Cross syntenic region (syntenic between any two samples for a strict subset of the samples)>
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HEADER, __pyx_kp_u_INFO_ID_END_Number_1_Type_Integ) < 0) __PYX_ERR(0, 386, __pyx_L1_error)

  /* "msyd/pyxfiles/io.pyx":398
 * ##FORMAT=<ID=HAP,Number=1,Type=Character,Description="Unique haplotype identifier">"""
 * 
 * cpdef filter_vcfs(syns, vcfs: List[Union[str, os.PathLike]], ref: Union[str, os.PathLike], add_syn_anns=False, no_complex=False):             # <<<<<<<<<<<<<<
 *     tmpfiles = [util.gettmpfile() for _ in vcfs]
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_vcfs, __pyx_kp_s_List_Union_str_os_PathLike) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ref, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_15filter_vcfs, 0, __pyx_n_s_filter_vcfs, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__66);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_filter_vcfs, __pyx_t_4) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":408
 *     return tmpfiles
 * 
 * cpdef void extract_syntenic_from_vcf(syns, inpath:Union[str, os.PathLike], outpath: Union[str, os.PathLike], force_index=True, synorg='ref', ref=None, keep_nonsyn_calls=False, add_syn_anns=True, add_cigar=False, add_identity=True, no_complex=False, coords_in_info=False):             # <<<<<<<<<<<<<<
 *     """
 *     Extract syntenic annotations from a given VCF.
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_inpath, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_outpath, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_17extract_syntenic_from_vcf, 0, __pyx_n_s_extract_syntenic_from_vcf, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__69);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_syntenic_from_vcf, __pyx_t_2) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":521
 *     #vcfin.close()
 * 
 * cpdef void reduce_vcfs(vcfs: List[Union[str, os.PathLike]], opath: Union[str, os.PathLike], add_syn_anns=True):             # <<<<<<<<<<<<<<
 *     # quick and dirty reduction function, TODO write proper one when integrating with PFF variation merging
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_vcfs, __pyx_kp_s_List_Union_str_os_PathLike) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_opath, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_19reduce_vcfs, 0, __pyx_n_s_reduce_vcfs, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__72);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_vcfs, __pyx_t_4) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":541
 *     merge_vcfs(vcfs[-1], tmpfiles[-1], opath)
 * 
 * cpdef add_syn_anns_to_vcf(syns, vcfin: Union[str, os.PathLike], vcfout: Union[str, os.PathLike], ref=None):             # <<<<<<<<<<<<<<
 *     """Takes a VCF file, overwrites it adding annotations for core/cross-syn region. Other records are preserved as-is."""
 *     cdef:
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_vcfin, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_vcfout, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_21add_syn_anns_to_vcf, 0, __pyx_n_s_add_syn_anns_to_vcf, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__75);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_add_syn_anns_to_vcf, __pyx_t_2) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":894
 *     ovcf.write(rec)
 * 
 * cpdef extract_syri_regions_from_file(fin, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     raw, chr_mapping = readsyriout(fin) #TODO? handle chr_mapping
 *     return extract_syri_regions(raw, ref=ref, anns=anns, reforg=reforg, qryorg=qryorg)
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_SYN);
  __Pyx_GIVEREF(__pyx_n_u_SYN);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_SYN)) __PYX_ERR(0, 894, __pyx_L1_error);
  __pyx_k__40 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_SYN);
  __Pyx_GIVEREF(__pyx_n_u_SYN);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_SYN)) __PYX_ERR(0, 894, __pyx_L1_error);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_a);
  __Pyx_GIVEREF(__pyx_n_u_a);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_a)) __PYX_ERR(0, 894, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_ref);
  __Pyx_GIVEREF(__pyx_n_u_ref);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_n_u_ref)) __PYX_ERR(0, 894, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_qry);
  __Pyx_GIVEREF(__pyx_n_u_qry);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_n_u_qry)) __PYX_ERR(0, 894, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_23extract_syri_regions_from_file, 0, __pyx_n_s_extract_syri_regions_from_file, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_syri_regions_from_file, __pyx_t_2) < 0) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":899
 * 
 * 
 * cpdef extract_syri_regions(rawsyriout, ref='a', anns=['SYN'], reforg='ref', qryorg='qry'):             # <<<<<<<<<<<<<<
 *     """
 *     Given a syri output file, extract all regions matching a given annotation.
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_SYN);
  __Pyx_GIVEREF(__pyx_n_u_SYN);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_SYN)) __PYX_ERR(0, 899, __pyx_L1_error);
  __pyx_k__41 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_SYN);
  __Pyx_GIVEREF(__pyx_n_u_SYN);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_SYN)) __PYX_ERR(0, 899, __pyx_L1_error);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_a);
  __Pyx_GIVEREF(__pyx_n_u_a);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_a)) __PYX_ERR(0, 899, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2)) __PYX_ERR(0, 899, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_ref);
  __Pyx_GIVEREF(__pyx_n_u_ref);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_n_u_ref)) __PYX_ERR(0, 899, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_u_qry);
  __Pyx_GIVEREF(__pyx_n_u_qry);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_n_u_qry)) __PYX_ERR(0, 899, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_25extract_syri_regions, 0, __pyx_n_s_extract_syri_regions, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_syri_regions, __pyx_t_2) < 0) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":928
 *     return pd.DataFrame(data=list(buf), columns=[reforg, qryorg])
 * 
 * def extract_syri_regions_to_list_from_files(fins, qrynames, cores=1, **kwargs):             # <<<<<<<<<<<<<<
 *     """
 *     `extract_syri_regions`, but for processing a list of inputs
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_27extract_syri_regions_to_list_from_files, 0, __pyx_n_s_extract_syri_regions_to_list_fro_2, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__48);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extract_syri_regions_to_list_fro_2, __pyx_t_2) < 0) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "msyd/pyxfiles/io.pyx":948
 *     #        for fin in fins]
 * 
 * cpdef void save_to_vcf(syns: Union[str, os.PathLike], outf: Union[str, os.PathLike], ref=None, cores=1, add_cigar=False, add_identity=True):             # <<<<<<<<<<<<<<
 *     #TODO add functionality to incorporate reference information as optional argument
 *     cdef:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_syns, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_outf, __pyx_kp_s_Union_str_os_PathLike) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_29save_to_vcf, 0, __pyx_n_s_save_to_vcf, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__84);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_to_vcf, __pyx_t_4) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":1048
 *     out.close()
 * 
 * cpdef save_to_pff(df, buf, save_cigars=True, collapse_mesyn=True):             # <<<<<<<<<<<<<<
 *     """Takes a df containing `Pansyn` objects and writes them in pansynteny file format to `buf`.
 *     Can be used to print directly to a file, or to print or further process the output.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_31save_to_pff, 0, __pyx_n_s_save_to_pff, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__87);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_save_to_pff, __pyx_t_4) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":1133
 *     buf.write("\n")
 * 
 * cpdef read_pff(f):             # <<<<<<<<<<<<<<
 *     """Takes a file object or path to a file in PFF format and reads it in as a DataFrame.
 *     """
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_4msyd_2io_33read_pff, 0, __pyx_n_s_read_pff, NULL, __pyx_n_s_msyd_io, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_read_pff, __pyx_t_4) < 0) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "msyd/pyxfiles/io.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * # distutils: language = c++
 * # cython: language_level = 3
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init msyd.io", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init msyd.io");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!__Pyx_CyOrPyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C00A2
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SliceTupleAndList */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (length <= 0) {
        return PyList_New(0);
    }
    return __Pyx_PyList_FromArray(((PyListObject*)src)->ob_item + start, length);
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    return __Pyx_PyTuple_FromArray(((PyTupleObject*)src)->ob_item + start, length);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - (unsigned long)b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
#if PY_VERSION_HEX >= 0x030C00A7
    if (likely(__Pyx_PyLong_IsCompact(n))) {
        return PyLong_FromSize_t(__Pyx_PyLong_CompactValueUnsigned(n));
    }
#else
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromUnsignedLong(__Pyx_PyLong_Digits(n)[0]);
    }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            #if PY_VERSION_HEX >= 0x030C00A7
            ((PyLongObject*)copy)->long_value.lv_tag = ((PyLongObject*)copy)->long_value.lv_tag & ~_PyLong_SIGN_MASK;
            #else
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
            #endif
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                CYTHON_UNUSED_VAR(a);
                CYTHON_UNUSED_VAR(b);
                #ifdef HAVE_LONG_LONG
                lla = a;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 0;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a != b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) != 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 1;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 1;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal != 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a != (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
#if CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
#include <string.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IterNext */
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    __Pyx_TypeName iterator_type_name = __Pyx_PyType_GetName(Py_TYPE(iterator));
    PyErr_Format(PyExc_TypeError,
        __Pyx_FMT_TYPENAME " object is not an iterator", iterator_type_name);
    __Pyx_DECREF_TypeName(iterator_type_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
        next = iternext(iterator);
        if (likely(next))
            return next;
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
#endif
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseClosureNameError */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    CYTHON_UNUSED_VAR(is_set);
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || PY_VERSION_HEX >= 0x030d0000 || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        CYTHON_UNUSED_VAR(orig_length);
        CYTHON_UNUSED_VAR(ppos);
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* MergeKeywords */
static int __Pyx_MergeKeywords(PyObject *kwdict, PyObject *source_mapping) {
    PyObject *iter, *key = NULL, *value = NULL;
    int source_is_dict, result;
    Py_ssize_t orig_length, ppos = 0;
    iter = __Pyx_dict_iterator(source_mapping, 0, __pyx_n_s_items, &orig_length, &source_is_dict);
    if (unlikely(!iter)) {
        PyObject *args;
        if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError))) goto bad;
        PyErr_Clear();
        args = PyTuple_Pack(1, source_mapping);
        if (likely(args)) {
            PyObject *fallback = PyObject_Call((PyObject*)&PyDict_Type, args, NULL);
            Py_DECREF(args);
            if (likely(fallback)) {
                iter = __Pyx_dict_iterator(fallback, 1, __pyx_n_s_items, &orig_length, &source_is_dict);
                Py_DECREF(fallback);
            }
        }
        if (unlikely(!iter)) goto bad;
    }
    while (1) {
        result = __Pyx_dict_iter_next(iter, orig_length, &ppos, &key, &value, NULL, source_is_dict);
        if (unlikely(result < 0)) goto bad;
        if (!result) break;
        if (unlikely(PyDict_Contains(kwdict, key))) {
            __Pyx_RaiseDoubleKeywordsError("function", key);
            result = -1;
        } else {
            result = PyDict_SetItem(kwdict, key, value);
        }
        Py_DECREF(key);
        Py_DECREF(value);
        if (unlikely(result < 0)) goto bad;
    }
    Py_XDECREF(iter);
    return 0;
bad:
    Py_XDECREF(iter);
    return -1;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__16;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__45);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__89);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CStringEquals */
static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
